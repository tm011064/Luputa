<?xml version="1.0"?>
<doc>
    <assembly>
        <name>CommonTools</name>
    </assembly>
    <members>
        <member name="T:CommonTools.Xml.XmlResourceFileManagerException">
            <summary>
            Exceptions that can be thrown by the CommonTools.Xml.XmlResourceFileManager class.
            </summary>
        </member>
        <member name="M:CommonTools.Xml.XmlResourceFileManagerException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:CommonTools.Xml.XmlResourceFileManagerException"/> class.
            </summary>
            <param name="message">The error message.</param>
        </member>
        <member name="M:CommonTools.Xml.XmlResourceFileManagerException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:CommonTools.Xml.XmlResourceFileManagerException"/> class.
            </summary>
            <param name="message">The error message.</param>
            <param name="innerException">The original inner exception.</param>
        </member>
        <member name="T:CommonTools.Components.Security.SimpleHashAlgorithm">
            <summary>
            Used by the SimpleHash class to select a specific Hash algorithm (eg. md5, sha1, ...)
            </summary>
        </member>
        <member name="F:CommonTools.Components.Security.SimpleHashAlgorithm.MD5">
            <summary>
            MD5
            </summary>
        </member>
        <member name="F:CommonTools.Components.Security.SimpleHashAlgorithm.SHA1">
            <summary>
            SHA1
            </summary>
        </member>
        <member name="F:CommonTools.Components.Security.SimpleHashAlgorithm.SHA256">
            <summary>
            SHA256
            </summary>
        </member>
        <member name="F:CommonTools.Components.Security.SimpleHashAlgorithm.SHA384">
            <summary>
            SHA384
            </summary>
        </member>
        <member name="F:CommonTools.Components.Security.SimpleHashAlgorithm.SHA512">
            <summary>
            SHA512
            </summary>
        </member>
        <member name="T:CommonTools.Components.Security.SimpleHash">
             <summary>
             This class generates and compares hashes using MD5, SHA1, SHA256, SHA384, 
             and SHA512 hashing algorithms. Before computing a hash, it appends a
             randomly generated salt to the plain text, and stores this salt appended
             to the result. To verify another plain text value against the given hash,
             this class will retrieve the salt value from the hash string and use it
             when computing a new hash of the plain text. Appending a salt value to
             the hash may not be the most efficient approach, so when using hashes in
             a real-life application, you may choose to store them separately. You may
             also opt to keep results as byte arrays instead of converting them into
             base64-encoded strings.
             </summary>
             <remarks>
             <![CDATA[
             <summary>
             Illustrates the use of the SimpleHash class.
             </summary>
            public class SimpleHashTest
            {
            	/// <summary>
            	/// The main entry point for the application.
            	/// </summary>
            	[STAThread]
            	static void Main(string[] args)
            	{
            		string password = "myP@5sw0rd";  // original password
            		string wrongPassword = "password";    // wrong password
            
            		string passwordHashMD5 =
            			   SimpleHash.ComputeHash(password, "MD5", null);
            		string passwordHashSha1 =
            			   SimpleHash.ComputeHash(password, "SHA1", null);
            		string passwordHashSha256 =
            			   SimpleHash.ComputeHash(password, "SHA256", null);
            		string passwordHashSha384 =
            			   SimpleHash.ComputeHash(password, "SHA384", null);
            		string passwordHashSha512 =
            			   SimpleHash.ComputeHash(password, "SHA512", null);
            
            		Console.WriteLine("COMPUTING HASH VALUES\r\n");
            		Console.WriteLine("MD5   : {0}", passwordHashMD5);
            		Console.WriteLine("SHA1  : {0}", passwordHashSha1);
            		Console.WriteLine("SHA256: {0}", passwordHashSha256);
            		Console.WriteLine("SHA384: {0}", passwordHashSha384);
            		Console.WriteLine("SHA512: {0}", passwordHashSha512);
            		Console.WriteLine("");
            
            		Console.WriteLine("COMPARING PASSWORD HASHES\r\n");
            		Console.WriteLine("MD5    (good): {0}",
            							SimpleHash.VerifyHash(
            							password, "MD5",
            							passwordHashMD5).ToString());
            		Console.WriteLine("MD5    (bad) : {0}",
            							SimpleHash.VerifyHash(
            							wrongPassword, "MD5",
            							passwordHashMD5).ToString());
            		Console.WriteLine("SHA1   (good): {0}",
            							SimpleHash.VerifyHash(
            							password, "SHA1",
            							passwordHashSha1).ToString());
            		Console.WriteLine("SHA1   (bad) : {0}",
            							SimpleHash.VerifyHash(
            							wrongPassword, "SHA1",
            							passwordHashSha1).ToString());
            		Console.WriteLine("SHA256 (good): {0}",
            							SimpleHash.VerifyHash(
            							password, "SHA256",
            							passwordHashSha256).ToString());
            		Console.WriteLine("SHA256 (bad) : {0}",
            							SimpleHash.VerifyHash(
            							wrongPassword, "SHA256",
            							passwordHashSha256).ToString());
            		Console.WriteLine("SHA384 (good): {0}",
            							SimpleHash.VerifyHash(
            							password, "SHA384",
            							passwordHashSha384).ToString());
            		Console.WriteLine("SHA384 (bad) : {0}",
            							SimpleHash.VerifyHash(
            							wrongPassword, "SHA384",
            							passwordHashSha384).ToString());
            		Console.WriteLine("SHA512 (good): {0}",
            							SimpleHash.VerifyHash(
            							password, "SHA512",
            							passwordHashSha512).ToString());
            		Console.WriteLine("SHA512 (bad) : {0}",
            							SimpleHash.VerifyHash(
            							wrongPassword, "SHA512",
            							passwordHashSha512).ToString());
            	}
            }
             
             ]]>
             </remarks>
        </member>
        <member name="M:CommonTools.Components.Security.SimpleHash.ComputeHash(System.String,CommonTools.Components.Security.SimpleHashAlgorithm,System.Byte[])">
            <summary>
            Generates a hash for the given plain text value and returns a
            base64-encoded result. Before the hash is computed, a random salt
            is generated and appended to the plain text. This salt is stored at
            the end of the hash value, so it can be used later for hash
            verification.
            </summary>
            <param name="pText">
            Plaintext value to be hashed. The function does not check whether
            this parameter is null.
            </param>
            <param name="pHashAlgorithm">
            Name of the hash algorithm. Allowed values are: "MD5", "SHA1",
            "SHA256", "SHA384", and "SHA512" (if any other value is specified
            MD5 hashing algorithm will be used). This value is case-insensitive.
            </param>
            <param name="saltBytes">
            Salt bytes. This parameter can be null, in which case a random salt
            value will be generated.
            </param>
            <returns>
            Hash value formatted as a base64-encoded string.
            </returns>
        </member>
        <member name="M:CommonTools.Components.Security.SimpleHash.VerifyHash(System.String,CommonTools.Components.Security.SimpleHashAlgorithm,System.String)">
            <summary>
            Compares a hash of the specified plain text value to a given hash
            value. Plain text is hashed with the same salt value as the original
            hash.
            </summary>
            <param name="pText">
            Plain text to be verified against the specified hash. The function
            does not check whether this parameter is null.
            </param>
            <param name="pHashAlgorithm">
            Name of the hash algorithm. Allowed values are: "MD5", "SHA1", 
            "SHA256", "SHA384", and "SHA512" (if any other value is specified,
            MD5 hashing algorithm will be used). This value is case-insensitive.
            </param>
            <param name="pCipherText">
            Base64-encoded hash value produced by ComputeHash function. This value
            includes the original salt appended to it.
            </param>
            <returns>
            If computed hash mathes the specified hash the function the return
            value is true; otherwise, the function returns false.
            </returns>
        </member>
        <member name="T:CommonTools.Components.Security.EncryptionManager">
            <summary>
            Provides methods for encrypting and decrypting data. This is a
            replacement for the old Cipher class available in utilities.
            </summary>
        </member>
        <member name="M:CommonTools.Components.Security.EncryptionManager.ComputeHash(System.String,CommonTools.Components.Security.SimpleHashAlgorithm,System.Byte[])">
            <summary>
            Generates a hash for the given plain text value and returns a
            base64-encoded result. Before the hash is computed, a random salt
            is generated and appended to the plain text. This salt is stored at
            the end of the hash value, so it can be used later for hash
            verification.
            </summary>
            <param name="pText">
            Plaintext value to be hashed. The function does not check whether
            this parameter is null.
            </param>
            <param name="pHashAlgorithm">
            Name of the hash algorithm. Allowed values are: "MD5", "SHA1",
            "SHA256", "SHA384", and "SHA512" (if any other value is specified
            MD5 hashing algorithm will be used). This value is case-insensitive.
            </param>
            <param name="saltBytes">
            Salt bytes. This parameter can be null, in which case a random salt
            value will be generated.
            </param>
            <returns>
            Hash value formatted as a base64-encoded string.
            </returns>
        </member>
        <member name="M:CommonTools.Components.Security.EncryptionManager.VerifyHash(System.String,CommonTools.Components.Security.SimpleHashAlgorithm,System.String)">
            <summary>
            Compares a hash of the specified plain text value to a given hash
            value. Plain text is hashed with the same salt value as the original
            hash.
            </summary>
            <param name="pText">
            Plain text to be verified against the specified hash. The function
            does not check whether this parameter is null.
            </param>
            <param name="pHashAlgorithm">
            Name of the hash algorithm. Allowed values are: "MD5", "SHA1", 
            "SHA256", "SHA384", and "SHA512" (if any other value is specified,
            MD5 hashing algorithm will be used). This value is case-insensitive.
            </param>
            <param name="pCipherText">
            Base64-encoded hash value produced by ComputeHash function. This value
            includes the original salt appended to it.
            </param>
            <returns>
            If computed hash mathes the specified hash the function the return
            value is true; otherwise, the function returns false.
            </returns>
        </member>
        <member name="M:CommonTools.Components.Security.EncryptionManager.EncryptDPAPIToBytes(System.String)">
            <summary>
            Advanced. Used to encrypt a string into a crypt32.dll:CryptProtectData encoded.
            </summary>
            <param name="textToEncrypt">The text to encrypt.</param>
            <returns></returns>
        </member>
        <member name="M:CommonTools.Components.Security.EncryptionManager.DecryptDPAPIToBytes(System.String)">
            <summary>
            Advanced and overloaded. Used to decrypt a string with crypt32.dll:CryptUnprotectData.
            </summary>
            <param name="textToDecrypt"></param>
            <returns></returns>
        </member>
        <member name="M:CommonTools.Components.Security.EncryptionManager.DecryptDPAPI(System.Byte[])">
            <summary>
            Advanced and overloaded. Used to decrypt a block of bytes with crypt32.dll:CryptUnprotectData.
            and then return the ascii text of that string.
            </summary>
            <param name="textToDecrypt"></param>
            <returns></returns>
        </member>
        <member name="M:CommonTools.Components.Security.EncryptionManager.DecryptDPAPI(System.String)">
            <summary>
            Advanced and overloaded. Used to decrypt a string with crypt32.dll:CryptUnprotectData.
            and then return the ascii text of that string.
            </summary>
            <param name="textToDecrypt"></param>
            <returns></returns>
        </member>
        <member name="M:CommonTools.Components.Security.EncryptionManager.EncryptDPAPI(System.String)">
            <summary>
            Overloaded. Used to encrypt a string with
            crypt32.dll:CryptProtectData and return the base64 representation of the ciphertext.
            </summary>
            <param name="textToEncrypt"></param>
            <returns></returns>
        </member>
        <member name="M:CommonTools.Components.Security.EncryptionManager.AES_Simple_Encrypt(System.String,System.String,System.String,System.String)">
            <summary>
            
            </summary>
            <param name="pTextToEncrypt"></param>
            <param name="pPassPhrase"></param>
            <param name="pInitVector"></param>
            <param name="pSaltValue"></param>
            <returns></returns>
        </member>
        <member name="M:CommonTools.Components.Security.EncryptionManager.AES_Simple_Decrypt(System.String,System.String,System.String,System.String)">
            <summary>
            
            </summary>
            <param name="pTextToDecrypt"></param>
            <param name="pPassPhrase"></param>
            <param name="pInitVector"></param>
            <param name="pSaltValue"></param>
            <returns></returns>
        </member>
        <member name="M:CommonTools.Components.Security.EncryptionManager.AES_Simple_Encrypt(System.String,System.String,System.String,System.String,CommonTools.Components.Security.RijndaelSimpleHashAlgorithm,CommonTools.Components.Security.RijndaelSimpleKeySize,System.Int32)">
            <summary>
            Encrypts a string using the Rijndael algo and encodes it into base64 format.
            Plaintext, salt, passphrase and initialization vectors are provided.
            </summary>
            <param name="text">The text to encrypt</param>
            <param name="passPhrase">The pass phrase used for this encryption</param>
            <param name="saltValue">The salt value used for this encryption</param>
            <param name="initVector">The init vector used for this encryption (must be 16 bit)</param>
            <param name="hashAlgorithm">The hash algorithm used for this encryption</param>
            <param name="keySize">The size of the key used for this encryption.</param>
            <param name="passWordIterations">
            Number of iterations used to generate password. One or two iterations
            should be enough.</param>
            <returns></returns>
        </member>
        <member name="M:CommonTools.Components.Security.EncryptionManager.AES_Simple_Decrypt(System.String,System.String,System.String,System.String,CommonTools.Components.Security.RijndaelSimpleHashAlgorithm,CommonTools.Components.Security.RijndaelSimpleKeySize,System.Int32)">
            <summary>
            Decrypts specified ciphertext using Rijndael symmetric key algorithm.
            </summary>
            <param name="cipherText">The text to decrypt</param>
            <param name="passPhrase">The pass phrase used for this encryption</param>
            <param name="saltValue">The salt value used for this encryption</param>
            <param name="initVector">The init vector used for this encryption (must be 16 bit)</param>
            <param name="hashAlgorithm">The hash algorithm used for this encryption</param>
            <param name="keySize">The size of the key used for this encryption.</param>
            <param name="passWordIterations">
            Number of iterations used to generate password. One or two iterations
            should be enough.</param>
            <returns></returns>
        </member>
        <member name="M:CommonTools.Components.Security.EncryptionManager.AESEncrypt(System.String,System.String,System.String)">
            <summary>
            Encrypts a string using the AES algorithm and returns the
            base64 representation of that string.
            </summary>
            <param name="pTextToEncrypt"></param>
            <param name="pPassPhrase"></param>
            <param name="pInitVector"></param>
            <returns></returns>
        </member>
        <member name="M:CommonTools.Components.Security.EncryptionManager.AESDecrypt(System.String,System.String,System.String,CommonTools.Components.Security.EncryptionManager.AESHashAlgorithm)">
            <summary>
            AESs the decrypt.
            </summary>
            <param name="pTextToDecrypt">The text to decrypt</param>
            <param name="pPassPhrase">The pass phrase</param>
            <param name="pInitVector">The init vector</param>
            <param name="hashAlgorithm">The hashing algorithm to use</param>
            <returns></returns>
        </member>
        <member name="M:CommonTools.Components.Security.EncryptionManager.AESEncrypt(System.String,System.String,System.String,CommonTools.Components.Security.EncryptionManager.AESHashAlgorithm)">
            <summary>
            AESs the encrypt.
            </summary>
            <param name="pTextToEncrypt">The text to encrypt</param>
            <param name="pPassPhrase">The pass phrase</param>
            <param name="pInitVector">The init vector</param>
            <param name="hashAlgorithm">The hashing algorithm to use</param>
            <returns></returns>
        </member>
        <member name="M:CommonTools.Components.Security.EncryptionManager.AESDecrypt(System.String,System.String,System.String)">
            <summary>
            Decrypts a base64 encoded string to its plaintext, using the specified passwords/IVs.
            </summary>
            <param name="pTextToDecrypt"></param>
            <param name="pPassPhrase"></param>
            <param name="pInitVector"></param>
            <returns></returns>
        </member>
        <member name="M:CommonTools.Components.Security.EncryptionManager.AESEncryptToBytes(System.String,System.String,System.String)">
            <summary>
            Overloaded. Encrypts a string using AES and returns the cipher text of that string.
            </summary>
            <param name="pTextToEncrypt"></param>
            <param name="pPassPhrase"></param>
            <param name="pInitVector"></param>
            <returns></returns>
        </member>
        <member name="M:CommonTools.Components.Security.EncryptionManager.AESDecryptToBytes(System.String,System.String,System.String)">
            <summary>
            Overloaded. Decrypts a base64 encoded ciphertext using AES and returns the
            decrypted data.
            </summary>
            <param name="pTextToDecrypt"></param>
            <param name="pPassPhrase"></param>
            <param name="pInitVector"></param>
            <returns></returns>
        </member>
        <member name="M:CommonTools.Components.Security.EncryptionManager.AESEncryptToBytes(System.Byte[],System.String,System.String)">
            <summary>
            Overloaded. Encrypts a block of data using AES and returns the encrypted data.
            </summary>
            <param name="pTextToEncrypt"></param>
            <param name="pPassPhrase"></param>
            <param name="pInitVector"></param>
            <returns></returns>
        </member>
        <member name="M:CommonTools.Components.Security.EncryptionManager.AESDecryptToBytes(System.Byte[],System.String,System.String)">
            <summary>
            Overloaded. Decrypts a cipher block and returns the decrypted data.
            </summary>
            <param name="pTextToDecrypt"></param>
            <param name="pPassPhrase"></param>
            <param name="pInitVector"></param>
            <returns></returns>
        </member>
        <member name="M:CommonTools.Components.Security.EncryptionManager.GeneratePassword(System.Int32)">
            <summary>
            Generates a random password of the exact length.
            </summary>
            <param name="pLength">
            Exact password length.
            </param>
            <returns>
            Randomly generated password.
            </returns>
        </member>
        <member name="M:CommonTools.Components.Security.EncryptionManager.GeneratePassword(System.Int32,System.Int32)">
            <summary>
            Generates a random password.
            </summary>
            <param name="pMinLength">
            Minimum password length.
            </param>
            <param name="pMaxLength">
            Maximum password length.
            </param>
            <returns>
            Randomly generated password.
            </returns>
            <remarks>
            The length of the generated password will be determined at
            random and it will fall with the range determined by the
            function parameters.
            </remarks>
        </member>
        <member name="T:CommonTools.Components.Security.EncryptionManager.AESHashAlgorithm">
             <summary>
            
             </summary>
        </member>
        <member name="F:CommonTools.Components.Security.EncryptionManager.AESHashAlgorithm.MD5">
            <summary>
            MD5 algo
            </summary>
        </member>
        <member name="F:CommonTools.Components.Security.EncryptionManager.AESHashAlgorithm.SHA1">
            <summary>
            SHA-1 algo
            </summary>
        </member>
        <member name="T:CommonTools.Web.UI.FlashDetectionControl">
            <summary>
            This Control registers Javascript code that determines via VB and Javascript whether the client has Flash installed. 
            This script instances two global js variables, 'flashinstalled' and 'flashversion'. After the 
            detect, the variable flashinstalled can have three values:
            2: Flash installed, 1: Flash not installed, 0: Unknown if Flash is installed. 'flashversion' stores the client's version.
            </summary>
        </member>
        <member name="M:CommonTools.Web.UI.FlashDetectionControl.OnPreRender(System.EventArgs)">
            <summary>
            Overridden. Renders the tags for the flash detection stuff.
            </summary>
            <param name="e"></param>
        </member>
        <member name="P:CommonTools.Web.UI.FlashDetectionControl.FlashVersion">
            <summary>
            defines the latest version of flash available. This integer is used in the vbscript part to loop through a try/catch block to determine which version is currently installed.
            </summary>
        </member>
        <member name="T:CommonTools.Web.UI.ExceptionLogView">
            <summary>
            
            </summary>
        </member>
        <member name="M:CommonTools.Web.UI.ExceptionLogView.RecreateChildControls">
            <see cref="M:CommonTools.Web.UI.JobView.RecreateChildControls"/>
        </member>
        <member name="M:CommonTools.Web.UI.ExceptionLogView.CreateChildControls">
            <see cref="M:CommonTools.Web.UI.JobView.CreateChildControls"/>
        </member>
        <member name="M:CommonTools.Web.UI.ExceptionLogView.OnPreRender(System.EventArgs)">
            <summary>
            Raises the <see cref="E:System.Web.UI.Control.PreRender"></see> event.
            </summary>
            <param name="e">An <see cref="T:System.EventArgs"></see> object that contains the event data.</param>
        </member>
        <member name="M:CommonTools.Web.UI.ExceptionLogView.Render(System.Web.UI.HtmlTextWriter)">
            <see cref="M:CommonTools.Web.UI.JobView.Render(System.Web.UI.HtmlTextWriter)"/>
        </member>
        <member name="M:CommonTools.Web.UI.ExceptionLogView.RaisePostBackEvent(System.String)">
            <summary>
            When implemented by a class, enables a server control to process an event raised when a form is posted to the server.
            </summary>
            <param name="eventArgument">A <see cref="T:System.String"></see> that represents an optional event argument to be passed to the event handler.</param>
        </member>
        <member name="P:CommonTools.Web.UI.ExceptionLogView.ExceptionCellCssClass">
            <see cref="P:CommonTools.Web.UI.JobView.TableCssClass"/>
        </member>
        <member name="P:CommonTools.Web.UI.ExceptionLogView.FilterCssClass">
            <see cref="P:CommonTools.Web.UI.JobView.TableCssClass"/>
        </member>
        <member name="P:CommonTools.Web.UI.ExceptionLogView.DeleteCellCssClass">
            <see cref="P:CommonTools.Web.UI.JobView.TableCssClass"/>
        </member>
        <member name="P:CommonTools.Web.UI.ExceptionLogView.UseDefaultStyling">
            <see cref="P:CommonTools.Web.UI.JobView.TableCssClass"/>
        </member>
        <member name="P:CommonTools.Web.UI.ExceptionLogView.PagerCssClass">
            <see cref="P:CommonTools.Web.UI.JobView.TableCellCssClass"/>
        </member>
        <member name="P:CommonTools.Web.UI.ExceptionLogView.PagerCellCssClass">
            <see cref="P:CommonTools.Web.UI.JobView.TableCellCssClass"/>
        </member>
        <member name="P:CommonTools.Web.UI.ExceptionLogView.PagerSelectedCellCssClass">
            <see cref="P:CommonTools.Web.UI.JobView.TableCellCssClass"/>
        </member>
        <member name="P:CommonTools.Web.UI.ExceptionLogView.MaxPagerItemsPerRow">
            <see cref="P:CommonTools.Web.UI.JobView.TableCellCssClass"/>
        </member>
        <member name="P:CommonTools.Web.UI.ExceptionLogView.PageIndex">
            <summary>
            Gets or sets the index of the page.
            </summary>
            <value>The index of the page.</value>
        </member>
        <member name="P:CommonTools.Web.UI.ExceptionLogView.ApplicationLocationEnumType">
            <summary>
            Gets or sets the event types.
            </summary>
            <value>The event types.</value>
        </member>
        <member name="T:CommonTools.Web.Navigation.ISiteMapUrls">
            <summary>
            This interface enforces all properties needed for 
            </summary>
        </member>
        <member name="M:CommonTools.Web.Navigation.ISiteMapUrls.FindNodeByResourceKey(System.String)">
            <summary>
            Finds the node by resource key.
            </summary>
            <param name="name">The name.</param>
            <returns></returns>
        </member>
        <member name="M:CommonTools.Web.Navigation.ISiteMapUrls.GetPath(System.String)">
            <summary>
            Gets the path.
            </summary>
            <param name="key">The resourceKey of the sitemapnode</param>
            <returns></returns>
        </member>
        <member name="M:CommonTools.Web.Navigation.ISiteMapUrls.GetPath(System.String,System.String[])">
            <summary>
            Gets the path.
            </summary>
            <param name="key">The resourceKey of the sitemapnode</param>
            <param name="args">The arguments to replace the path of the SitemapNode with.</param>
            <returns></returns>
        </member>
        <member name="M:CommonTools.Web.Navigation.ISiteMapUrls.GetMatchingRewrite(System.String)">
            <summary>
            Gets the matching rewrite.
            </summary>
            <param name="pattern">The pattern to match</param>
            <returns></returns>
        </member>
        <member name="M:CommonTools.Web.Navigation.ISiteMapUrls.GetMatchingRewriteItem(System.String)">
            <summary>
            Gets the matching rewrite item. This method is intended for testing, don't use it in production because it is
            inefficient.
            </summary>
            <param name="pathAndQuery">The path and query url.</param>
            <returns></returns>
        </member>
        <member name="M:CommonTools.Web.Navigation.ISiteMapUrls.Reload">
            <summary>
            Reloads the site map.
            </summary>
        </member>
        <member name="T:CommonTools.IO.Csv.Resources.ExceptionMessage">
            <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
        </member>
        <member name="P:CommonTools.IO.Csv.Resources.ExceptionMessage.ResourceManager">
            <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
        </member>
        <member name="P:CommonTools.IO.Csv.Resources.ExceptionMessage.Culture">
            <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
        </member>
        <member name="P:CommonTools.IO.Csv.Resources.ExceptionMessage.BufferSizeTooSmall">
            <summary>
              Looks up a localized string similar to Buffer size must be 1 or more..
            </summary>
        </member>
        <member name="P:CommonTools.IO.Csv.Resources.ExceptionMessage.CannotMovePreviousRecordInForwardOnly">
            <summary>
              Looks up a localized string similar to Cannot move to a previous record in forward-only mode..
            </summary>
        </member>
        <member name="P:CommonTools.IO.Csv.Resources.ExceptionMessage.CannotReadRecordAtIndex">
            <summary>
              Looks up a localized string similar to Cannot read record at index &apos;{0}&apos;..
            </summary>
        </member>
        <member name="P:CommonTools.IO.Csv.Resources.ExceptionMessage.EnumerationFinishedOrNotStarted">
            <summary>
              Looks up a localized string similar to Enumeration has either not started or has already finished..
            </summary>
        </member>
        <member name="P:CommonTools.IO.Csv.Resources.ExceptionMessage.EnumerationVersionCheckFailed">
            <summary>
              Looks up a localized string similar to Collection was modified; enumeration operation may not execute..
            </summary>
        </member>
        <member name="P:CommonTools.IO.Csv.Resources.ExceptionMessage.FieldHeaderNotFound">
            <summary>
              Looks up a localized string similar to &apos;{0}&apos; field header not found..
            </summary>
        </member>
        <member name="P:CommonTools.IO.Csv.Resources.ExceptionMessage.FieldIndexOutOfRange">
            <summary>
              Looks up a localized string similar to Field index must be included in [0, FieldCount[. Specified field index was : &apos;{0}&apos;..
            </summary>
        </member>
        <member name="P:CommonTools.IO.Csv.Resources.ExceptionMessage.MalformedCsvException">
            <summary>
              Looks up a localized string similar to The CSV appears to be corrupt near record &apos;{0}&apos; field &apos;{1} at position &apos;{2}&apos;. Current raw data : &apos;{3}&apos;..
            </summary>
        </member>
        <member name="P:CommonTools.IO.Csv.Resources.ExceptionMessage.MissingFieldActionNotSupported">
            <summary>
              Looks up a localized string similar to &apos;{0}&apos; is not a supported missing field action..
            </summary>
        </member>
        <member name="P:CommonTools.IO.Csv.Resources.ExceptionMessage.NoCurrentRecord">
            <summary>
              Looks up a localized string similar to No current record..
            </summary>
        </member>
        <member name="P:CommonTools.IO.Csv.Resources.ExceptionMessage.NoHeaders">
            <summary>
              Looks up a localized string similar to The CSV does not have headers (CsvReader.HasHeaders property is false)..
            </summary>
        </member>
        <member name="P:CommonTools.IO.Csv.Resources.ExceptionMessage.NotEnoughSpaceInArray">
            <summary>
              Looks up a localized string similar to The number of fields in the record is greater than the available space from index to the end of the destination array..
            </summary>
        </member>
        <member name="P:CommonTools.IO.Csv.Resources.ExceptionMessage.ParseErrorActionInvalidInsideParseErrorEvent">
            <summary>
              Looks up a localized string similar to &apos;{0}&apos; is not a valid ParseErrorAction while inside a ParseError event..
            </summary>
        </member>
        <member name="P:CommonTools.IO.Csv.Resources.ExceptionMessage.ParseErrorActionNotSupported">
            <summary>
              Looks up a localized string similar to &apos;{0}&apos; is not a supported ParseErrorAction..
            </summary>
        </member>
        <member name="P:CommonTools.IO.Csv.Resources.ExceptionMessage.ReaderClosed">
            <summary>
              Looks up a localized string similar to This operation is invalid when the reader is closed..
            </summary>
        </member>
        <member name="P:CommonTools.IO.Csv.Resources.ExceptionMessage.RecordIndexLessThanZero">
            <summary>
              Looks up a localized string similar to Record index must be 0 or more..
            </summary>
        </member>
        <member name="T:CommonTools.IO.Csv.CsvReader">
            <summary>
            Represents a reader that provides fast, non-cached, forward-only access to CSV data.  
            </summary>
        </member>
        <member name="F:CommonTools.IO.Csv.CsvReader.DefaultBufferSize">
            <summary>
            Defines the default buffer size.
            </summary>
        </member>
        <member name="F:CommonTools.IO.Csv.CsvReader.DefaultDelimiter">
            <summary>
            Defines the default delimiter character separating each field.
            </summary>
        </member>
        <member name="F:CommonTools.IO.Csv.CsvReader.DefaultQuote">
            <summary>
            Defines the default quote character wrapping every field.
            </summary>
        </member>
        <member name="F:CommonTools.IO.Csv.CsvReader.DefaultEscape">
            <summary>
            Defines the default escape character letting insert quotation characters inside a quoted field.
            </summary>
        </member>
        <member name="F:CommonTools.IO.Csv.CsvReader.DefaultComment">
            <summary>
            Defines the default comment character indicating that a line is commented out.
            </summary>
        </member>
        <member name="F:CommonTools.IO.Csv.CsvReader._fieldHeaderComparer">
            <summary>
            Contains the field header comparer.
            </summary>
        </member>
        <member name="F:CommonTools.IO.Csv.CsvReader._reader">
            <summary>
            Contains the <see cref="T:TextReader"/> pointing to the CSV file.
            </summary>
        </member>
        <member name="F:CommonTools.IO.Csv.CsvReader._bufferSize">
            <summary>
            Contains the buffer size.
            </summary>
        </member>
        <member name="F:CommonTools.IO.Csv.CsvReader._comment">
            <summary>
            Contains the comment character indicating that a line is commented out.
            </summary>
        </member>
        <member name="F:CommonTools.IO.Csv.CsvReader._escape">
            <summary>
            Contains the escape character letting insert quotation characters inside a quoted field.
            </summary>
        </member>
        <member name="F:CommonTools.IO.Csv.CsvReader._delimiter">
            <summary>
            Contains the delimiter character separating each field.
            </summary>
        </member>
        <member name="F:CommonTools.IO.Csv.CsvReader._quote">
            <summary>
            Contains the quotation character wrapping every field.
            </summary>
        </member>
        <member name="F:CommonTools.IO.Csv.CsvReader._trimmingOptions">
            <summary>
            Determines which values should be trimmed.
            </summary>
        </member>
        <member name="F:CommonTools.IO.Csv.CsvReader._hasHeaders">
            <summary>
            Indicates if field names are located on the first non commented line.
            </summary>
        </member>
        <member name="F:CommonTools.IO.Csv.CsvReader._defaultParseErrorAction">
            <summary>
            Contains the default action to take when a parsing error has occured.
            </summary>
        </member>
        <member name="F:CommonTools.IO.Csv.CsvReader._missingFieldAction">
            <summary>
            Contains the action to take when a field is missing.
            </summary>
        </member>
        <member name="F:CommonTools.IO.Csv.CsvReader._supportsMultiline">
            <summary>
            Indicates if the reader supports multiline.
            </summary>
        </member>
        <member name="F:CommonTools.IO.Csv.CsvReader._skipEmptyLines">
            <summary>
            Indicates if the reader will skip empty lines.
            </summary>
        </member>
        <member name="F:CommonTools.IO.Csv.CsvReader._initialized">
            <summary>
            Indicates if the class is initialized.
            </summary>
        </member>
        <member name="F:CommonTools.IO.Csv.CsvReader._fieldHeaders">
            <summary>
            Contains the field headers.
            </summary>
        </member>
        <member name="F:CommonTools.IO.Csv.CsvReader._fieldHeaderIndexes">
            <summary>
            Contains the dictionary of field indexes by header. The key is the field name and the value is its index.
            </summary>
        </member>
        <member name="F:CommonTools.IO.Csv.CsvReader._currentRecordIndex">
            <summary>
            Contains the current record index in the CSV file.
            A value of <see cref="M:Int32.MinValue"/> means that the reader has not been initialized yet.
            Otherwise, a negative value means that no record has been read yet.
            </summary>
        </member>
        <member name="F:CommonTools.IO.Csv.CsvReader._nextFieldStart">
            <summary>
            Contains the starting position of the next unread field.
            </summary>
        </member>
        <member name="F:CommonTools.IO.Csv.CsvReader._nextFieldIndex">
            <summary>
            Contains the index of the next unread field.
            </summary>
        </member>
        <member name="F:CommonTools.IO.Csv.CsvReader._fields">
            <summary>
            Contains the array of the field values for the current record.
            A null value indicates that the field have not been parsed.
            </summary>
        </member>
        <member name="F:CommonTools.IO.Csv.CsvReader._fieldCount">
            <summary>
            Contains the maximum number of fields to retrieve for each record.
            </summary>
        </member>
        <member name="F:CommonTools.IO.Csv.CsvReader._buffer">
            <summary>
            Contains the read buffer.
            </summary>
        </member>
        <member name="F:CommonTools.IO.Csv.CsvReader._bufferLength">
            <summary>
            Contains the current read buffer length.
            </summary>
        </member>
        <member name="F:CommonTools.IO.Csv.CsvReader._eof">
            <summary>
            Indicates if the end of the reader has been reached.
            </summary>
        </member>
        <member name="F:CommonTools.IO.Csv.CsvReader._eol">
            <summary>
            Indicates if the last read operation reached an EOL character.
            </summary>
        </member>
        <member name="F:CommonTools.IO.Csv.CsvReader._firstRecordInCache">
            <summary>
            Indicates if the first record is in cache.
            This can happen when initializing a reader with no headers
            because one record must be read to get the field count automatically
            </summary>
        </member>
        <member name="F:CommonTools.IO.Csv.CsvReader._missingFieldFlag">
            <summary>
            Indicates if one or more field are missing for the current record.
            Resets after each successful record read.
            </summary>
        </member>
        <member name="F:CommonTools.IO.Csv.CsvReader._parseErrorFlag">
            <summary>
            Indicates if a parse error occured for the current record.
            Resets after each successful record read.
            </summary>
        </member>
        <member name="M:CommonTools.IO.Csv.CsvReader.#ctor(System.IO.TextReader,System.Boolean)">
            <summary>
            Initializes a new instance of the CsvReader class.
            </summary>
            <param name="reader">A <see cref="T:TextReader"/> pointing to the CSV file.</param>
            <param name="hasHeaders"><see langword="true"/> if field names are located on the first non commented line, otherwise, <see langword="false"/>.</param>
            <exception cref="T:ArgumentNullException">
            	<paramref name="reader"/> is a <see langword="null"/>.
            </exception>
            <exception cref="T:ArgumentException">
            	Cannot read from <paramref name="reader"/>.
            </exception>
        </member>
        <member name="M:CommonTools.IO.Csv.CsvReader.#ctor(System.IO.TextReader,System.Boolean,System.Int32)">
            <summary>
            Initializes a new instance of the CsvReader class.
            </summary>
            <param name="reader">A <see cref="T:TextReader"/> pointing to the CSV file.</param>
            <param name="hasHeaders"><see langword="true"/> if field names are located on the first non commented line, otherwise, <see langword="false"/>.</param>
            <param name="bufferSize">The buffer size in bytes.</param>
            <exception cref="T:ArgumentNullException">
            	<paramref name="reader"/> is a <see langword="null"/>.
            </exception>
            <exception cref="T:ArgumentException">
            	Cannot read from <paramref name="reader"/>.
            </exception>
        </member>
        <member name="M:CommonTools.IO.Csv.CsvReader.#ctor(System.IO.TextReader,System.Boolean,System.Char)">
            <summary>
            Initializes a new instance of the CsvReader class.
            </summary>
            <param name="reader">A <see cref="T:TextReader"/> pointing to the CSV file.</param>
            <param name="hasHeaders"><see langword="true"/> if field names are located on the first non commented line, otherwise, <see langword="false"/>.</param>
            <param name="delimiter">The delimiter character separating each field (default is ',').</param>
            <exception cref="T:ArgumentNullException">
            	<paramref name="reader"/> is a <see langword="null"/>.
            </exception>
            <exception cref="T:ArgumentException">
            	Cannot read from <paramref name="reader"/>.
            </exception>
        </member>
        <member name="M:CommonTools.IO.Csv.CsvReader.#ctor(System.IO.TextReader,System.Boolean,System.Char,System.Int32)">
            <summary>
            Initializes a new instance of the CsvReader class.
            </summary>
            <param name="reader">A <see cref="T:TextReader"/> pointing to the CSV file.</param>
            <param name="hasHeaders"><see langword="true"/> if field names are located on the first non commented line, otherwise, <see langword="false"/>.</param>
            <param name="delimiter">The delimiter character separating each field (default is ',').</param>
            <param name="bufferSize">The buffer size in bytes.</param>
            <exception cref="T:ArgumentNullException">
            	<paramref name="reader"/> is a <see langword="null"/>.
            </exception>
            <exception cref="T:ArgumentException">
            	Cannot read from <paramref name="reader"/>.
            </exception>
        </member>
        <member name="M:CommonTools.IO.Csv.CsvReader.#ctor(System.IO.TextReader,System.Boolean,System.Char,System.Char,System.Char,System.Char,CommonTools.IO.Csv.ValueTrimmingOptions)">
            <summary>
            Initializes a new instance of the CsvReader class.
            </summary>
            <param name="reader">A <see cref="T:TextReader"/> pointing to the CSV file.</param>
            <param name="hasHeaders"><see langword="true"/> if field names are located on the first non commented line, otherwise, <see langword="false"/>.</param>
            <param name="delimiter">The delimiter character separating each field (default is ',').</param>
            <param name="quote">The quotation character wrapping every field (default is ''').</param>
            <param name="escape">
            The escape character letting insert quotation characters inside a quoted field (default is '\').
            If no escape character, set to '\0' to gain some performance.
            </param>
            <param name="comment">The comment character indicating that a line is commented out (default is '#').</param>
            <param name="trimmingOptions">Determines which values should be trimmed.</param>
            <exception cref="T:ArgumentNullException">
            	<paramref name="reader"/> is a <see langword="null"/>.
            </exception>
            <exception cref="T:ArgumentException">
            	Cannot read from <paramref name="reader"/>.
            </exception>
        </member>
        <member name="M:CommonTools.IO.Csv.CsvReader.#ctor(System.IO.TextReader,System.Boolean,System.Char,System.Char,System.Char,System.Char,CommonTools.IO.Csv.ValueTrimmingOptions,System.Int32)">
            <summary>
            Initializes a new instance of the CsvReader class.
            </summary>
            <param name="reader">A <see cref="T:TextReader"/> pointing to the CSV file.</param>
            <param name="hasHeaders"><see langword="true"/> if field names are located on the first non commented line, otherwise, <see langword="false"/>.</param>
            <param name="delimiter">The delimiter character separating each field (default is ',').</param>
            <param name="quote">The quotation character wrapping every field (default is ''').</param>
            <param name="escape">
            The escape character letting insert quotation characters inside a quoted field (default is '\').
            If no escape character, set to '\0' to gain some performance.
            </param>
            <param name="comment">The comment character indicating that a line is commented out (default is '#').</param>
            <param name="trimmingOptions">Determines which values should be trimmed.</param>
            <param name="bufferSize">The buffer size in bytes.</param>
            <exception cref="T:ArgumentNullException">
            	<paramref name="reader"/> is a <see langword="null"/>.
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            	<paramref name="bufferSize"/> must be 1 or more.
            </exception>
        </member>
        <member name="M:CommonTools.IO.Csv.CsvReader.OnParseError(CommonTools.IO.Csv.ParseErrorEventArgs)">
            <summary>
            Raises the <see cref="M:ParseError"/> event.
            </summary>
            <param name="e">The <see cref="T:CommonTools.IO.Csv.ParseErrorEventArgs"/> that contains the event data.</param>
        </member>
        <member name="M:CommonTools.IO.Csv.CsvReader.GetFieldHeaders">
            <summary>
            Gets the field headers.
            </summary>
            <returns>The field headers or an empty array if headers are not supported.</returns>
            <exception cref="T:System.ComponentModel.ObjectDisposedException">
            The instance has been disposed of.
            </exception>
        </member>
        <member name="M:CommonTools.IO.Csv.CsvReader.EnsureInitialize">
            <summary>
            Ensures that the reader is initialized.
            </summary>
        </member>
        <member name="M:CommonTools.IO.Csv.CsvReader.GetFieldIndex(System.String)">
            <summary>
            Gets the field index for the provided header.
            </summary>
            <param name="header">The header to look for.</param>
            <returns>The field index for the provided header. -1 if not found.</returns>
            <exception cref="T:System.ComponentModel.ObjectDisposedException">
            The instance has been disposed of.
            </exception>
        </member>
        <member name="M:CommonTools.IO.Csv.CsvReader.CopyCurrentRecordTo(System.String[])">
            <summary>
            Copies the field array of the current record to a one-dimensional array, starting at the beginning of the target array.
            </summary>
            <param name="array">The one-dimensional <see cref="T:Array"/> that is the destination of the fields of the current record.</param>
            <exception cref="T:ArgumentNullException">
              <paramref name="array"/> is <see langword="null"/>.
              </exception>
              
            <exception cref="T:System.ArgumentException">
            The number of fields in the record is greater than the available space from index to the end of <paramref name="array"/>.
              </exception>
        </member>
        <member name="M:CommonTools.IO.Csv.CsvReader.CopyCurrentRecordTo(System.String[],System.Int32)">
            <summary>
            Copies the field array of the current record to a one-dimensional array, starting at the beginning of the target array.
            </summary>
            <param name="array"> The one-dimensional <see cref="T:Array"/> that is the destination of the fields of the current record.</param>
            <param name="index">The zero-based index in <paramref name="array"/> at which copying begins.</param>
            <exception cref="T:ArgumentNullException">
            	<paramref name="array"/> is <see langword="null"/>.
            </exception>
            <exception cref="T:ArgumentOutOfRangeException">
            	<paramref name="index"/> is les than zero or is equal to or greater than the length <paramref name="array"/>. 
            </exception>
            <exception cref="T:System.InvalidOperationException">
            No current record.
            </exception>
            <exception cref="T:System.ArgumentException">
            	The number of fields in the record is greater than the available space from <paramref name="index"/> to the end of <paramref name="array"/>.
            </exception>
        </member>
        <member name="M:CommonTools.IO.Csv.CsvReader.GetCurrentRawData">
            <summary>
            Gets the current raw CSV data.
            </summary>
            <remarks>Used for exception handling purpose.</remarks>
            <returns>The current raw CSV data.</returns>
        </member>
        <member name="M:CommonTools.IO.Csv.CsvReader.IsWhiteSpace(System.Char)">
            <summary>
            Indicates whether the specified Unicode character is categorized as white space.
            </summary>
            <param name="c">A Unicode character.</param>
            <returns><see langword="true"/> if <paramref name="c"/> is white space; otherwise, <see langword="false"/>.</returns>
        </member>
        <member name="M:CommonTools.IO.Csv.CsvReader.MoveTo(System.Int64)">
            <summary>
            Moves to the specified record index.
            </summary>
            <param name="record">The record index.</param>
            <returns><c>true</c> if the operation was successful; otherwise, <c>false</c>.</returns>
            <exception cref="T:System.ComponentModel.ObjectDisposedException">
            The instance has been disposed of.
            </exception>
        </member>
        <member name="M:CommonTools.IO.Csv.CsvReader.ParseNewLine(System.Int32@)">
            <summary>
            Parses a new line delimiter.
            </summary>
            <param name="pos">The starting position of the parsing. Will contain the resulting end position.</param>
            <returns><see langword="true"/> if a new line delimiter was found; otherwise, <see langword="false"/>.</returns>
            <exception cref="T:System.ComponentModel.ObjectDisposedException">
            The instance has been disposed of.
            </exception>
        </member>
        <member name="M:CommonTools.IO.Csv.CsvReader.IsNewLine(System.Int32)">
            <summary>
            Determines whether the character at the specified position is a new line delimiter.
            </summary>
            <param name="pos">The position of the character to verify.</param>
            <returns>
            	<see langword="true"/> if the character at the specified position is a new line delimiter; otherwise, <see langword="false"/>.
            </returns>
        </member>
        <member name="M:CommonTools.IO.Csv.CsvReader.ReadBuffer">
            <summary>
            Fills the buffer with data from the reader.
            </summary>
            <returns><see langword="true"/> if data was successfully read; otherwise, <see langword="false"/>.</returns>
            <exception cref="T:System.ComponentModel.ObjectDisposedException">
            The instance has been disposed of.
            </exception>
        </member>
        <member name="M:CommonTools.IO.Csv.CsvReader.ReadField(System.Int32,System.Boolean,System.Boolean)">
            <summary>
            Reads the field at the specified index.
            Any unread fields with an inferior index will also be read as part of the required parsing.
            </summary>
            <param name="field">The field index.</param>
            <param name="initializing">Indicates if the reader is currently initializing.</param>
            <param name="discardValue">Indicates if the value(s) are discarded.</param>
            <returns>
            The field at the specified index. 
            A <see langword="null"/> indicates that an error occured or that the last field has been reached during initialization.
            </returns>
            <exception cref="T:System.ArgumentOutOfRangeException">
            	<paramref name="field"/> is out of range.
            </exception>
            <exception cref="T:System.InvalidOperationException">
            	There is no current record.
            </exception>
            <exception cref="T:CommonTools.IO.Csv.MissingFieldCsvException">
            	The CSV data appears to be missing a field.
            </exception>
            <exception cref="T:CommonTools.IO.Csv.MalformedCsvException">
            	The CSV data appears to be malformed.
            </exception>
            <exception cref="T:System.ComponentModel.ObjectDisposedException">
            The instance has been disposed of.
            </exception>
        </member>
        <member name="M:CommonTools.IO.Csv.CsvReader.ReadNextRecord">
            <summary>
            Reads the next record.
            </summary>
            <returns><see langword="true"/> if a record has been successfully reads; otherwise, <see langword="false"/>.</returns>
            <exception cref="T:System.ComponentModel.ObjectDisposedException">
            The instance has been disposed of.
            </exception>
        </member>
        <member name="M:CommonTools.IO.Csv.CsvReader.ReadNextRecord(System.Boolean,System.Boolean)">
            <summary>
            Reads the next record.
            </summary>
            <param name="onlyReadHeaders">
            Indicates if the reader will proceed to the next record after having read headers.
            <see langword="true"/> if it stops after having read headers; otherwise, <see langword="false"/>.
            </param>
            <param name="skipToNextLine">
            Indicates if the reader will skip directly to the next line without parsing the current one. 
            To be used when an error occurs.
            </param>
            <returns><see langword="true"/> if a record has been successfully reads; otherwise, <see langword="false"/>.</returns>
            <exception cref="T:System.ComponentModel.ObjectDisposedException">
            The instance has been disposed of.
            </exception>
        </member>
        <member name="M:CommonTools.IO.Csv.CsvReader.SkipEmptyAndCommentedLines(System.Int32@)">
            <summary>
            Skips empty and commented lines.
            If the end of the buffer is reached, its content be discarded and filled again from the reader.
            </summary>
            <param name="pos">
            The position in the buffer where to start parsing. 
            Will contains the resulting position after the operation.
            </param>
            <returns><see langword="true"/> if the end of the reader has not been reached; otherwise, <see langword="false"/>.</returns>
            <exception cref="T:System.ComponentModel.ObjectDisposedException">
            The instance has been disposed of.
            </exception>
        </member>
        <member name="M:CommonTools.IO.Csv.CsvReader.DoSkipEmptyAndCommentedLines(System.Int32@)">
            <summary>
            <para>Worker method.</para>
            <para>Skips empty and commented lines.</para>
            </summary>
            <param name="pos">
            The position in the buffer where to start parsing. 
            Will contains the resulting position after the operation.
            </param>
            <exception cref="T:System.ComponentModel.ObjectDisposedException">
            The instance has been disposed of.
            </exception>
        </member>
        <member name="M:CommonTools.IO.Csv.CsvReader.SkipWhiteSpaces(System.Int32@)">
            <summary>
            Skips whitespace characters.
            </summary>
            <param name="pos">The starting position of the parsing. Will contain the resulting end position.</param>
            <returns><see langword="true"/> if the end of the reader has not been reached; otherwise, <see langword="false"/>.</returns>
            <exception cref="T:System.ComponentModel.ObjectDisposedException">
            The instance has been disposed of.
            </exception>
        </member>
        <member name="M:CommonTools.IO.Csv.CsvReader.SkipToNextLine(System.Int32@)">
            <summary>
            Skips ahead to the next NewLine character.
            If the end of the buffer is reached, its content be discarded and filled again from the reader.
            </summary>
            <param name="pos">
            The position in the buffer where to start parsing. 
            Will contains the resulting position after the operation.
            </param>
            <returns><see langword="true"/> if the end of the reader has not been reached; otherwise, <see langword="false"/>.</returns>
            <exception cref="T:System.ComponentModel.ObjectDisposedException">
            The instance has been disposed of.
            </exception>
        </member>
        <member name="M:CommonTools.IO.Csv.CsvReader.HandleParseError(CommonTools.IO.Csv.MalformedCsvException,System.Int32@)">
            <summary>
            Handles a parsing error.
            </summary>
            <param name="error">The parsing error that occured.</param>
            <param name="pos">The current position in the buffer.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="error"/> is <see langword="null"/>.
            </exception>
        </member>
        <member name="M:CommonTools.IO.Csv.CsvReader.HandleMissingField(System.String,System.Int32,System.Int32@)">
            <summary>
            Handles a missing field error.
            </summary>
            <param name="value">The partially parsed value, if available.</param>
            <param name="fieldIndex">The missing field index.</param>
            <param name="currentPosition">The current position in the raw data.</param>
            <returns>
            The resulting value according to <see cref="M:MissingFieldAction"/>.
            If the action is set to <see cref="T:MissingFieldAction.TreatAsParseError"/>,
            then the parse error will be handled according to <see cref="P:CommonTools.IO.Csv.CsvReader.DefaultParseErrorAction"/>.
            </returns>
        </member>
        <member name="M:CommonTools.IO.Csv.CsvReader.ValidateDataReader(CommonTools.IO.Csv.CsvReader.DataReaderValidations)">
            <summary>
            Validates the state of the data reader.
            </summary>
            <param name="validations">The validations to accomplish.</param>
            <exception cref="T:System.InvalidOperationException">
            No current record.
            </exception>
            <exception cref="T:System.InvalidOperationException">
            This operation is invalid when the reader is closed.
            </exception>
        </member>
        <member name="M:CommonTools.IO.Csv.CsvReader.CopyFieldToArray(System.Int32,System.Int64,System.Array,System.Int32,System.Int32)">
            <summary>
            Copy the value of the specified field to an array.
            </summary>
            <param name="field">The index of the field.</param>
            <param name="fieldOffset">The offset in the field value.</param>
            <param name="destinationArray">The destination array where the field value will be copied.</param>
            <param name="destinationOffset">The destination array offset.</param>
            <param name="length">The number of characters to copy from the field value.</param>
            <returns></returns>
        </member>
        <member name="M:CommonTools.IO.Csv.CsvReader.GetEnumerator">
            <summary>
            Returns an <see cref="T:RecordEnumerator"/>  that can iterate through CSV records.
            </summary>
            <returns>An <see cref="T:RecordEnumerator"/>  that can iterate through CSV records.</returns>
            <exception cref="T:System.ComponentModel.ObjectDisposedException">
            The instance has been disposed of.
            </exception>
        </member>
        <member name="M:CommonTools.IO.Csv.CsvReader.System#Collections#Generic#IEnumerable{System#String[]}#GetEnumerator">
            <summary>
            Returns an <see cref="T:System.Collections.Generics.IEnumerator"/>  that can iterate through CSV records.
            </summary>
            <returns>An <see cref="T:System.Collections.Generics.IEnumerator"/>  that can iterate through CSV records.</returns>
            <exception cref="T:System.ComponentModel.ObjectDisposedException">
            The instance has been disposed of.
            </exception>
        </member>
        <member name="M:CommonTools.IO.Csv.CsvReader.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Returns an <see cref="T:System.Collections.IEnumerator"/>  that can iterate through CSV records.
            </summary>
            <returns>An <see cref="T:System.Collections.IEnumerator"/>  that can iterate through CSV records.</returns>
            <exception cref="T:System.ComponentModel.ObjectDisposedException">
            The instance has been disposed of.
            </exception>
        </member>
        <member name="F:CommonTools.IO.Csv.CsvReader._allocStack">
            <summary>
            Contains the stack when the object was allocated.
            </summary>
        </member>
        <member name="F:CommonTools.IO.Csv.CsvReader._isDisposed">
            <summary>
            Contains the disposed status flag.
            </summary>
        </member>
        <member name="F:CommonTools.IO.Csv.CsvReader._lock">
            <summary>
            Contains the locking object for multi-threading purpose.
            </summary>
        </member>
        <member name="M:CommonTools.IO.Csv.CsvReader.OnDisposed(System.EventArgs)">
            <summary>
            Raises the <see cref="M:Disposed"/> event.
            </summary>
            <param name="e">A <see cref="T:System.EventArgs"/> that contains the event data.</param>
        </member>
        <member name="M:CommonTools.IO.Csv.CsvReader.CheckDisposed">
            <summary>
            Checks if the instance has been disposed of, and if it has, throws an <see cref="T:System.ComponentModel.ObjectDisposedException"/>; otherwise, does nothing.
            </summary>
            <exception cref="T:System.ComponentModel.ObjectDisposedException">
            	The instance has been disposed of.
            </exception>
            <remarks>
            	Derived classes should call this method at the start of all methods and properties that should not be accessed after a call to <see cref="M:Dispose()"/>.
            </remarks>
        </member>
        <member name="M:CommonTools.IO.Csv.CsvReader.Dispose">
            <summary>
            Releases all resources used by the instance.
            </summary>
            <remarks>
            	Calls <see cref="M:Dispose(Boolean)"/> with the disposing parameter set to <see langword="true"/> to free unmanaged and managed resources.
            </remarks>
        </member>
        <member name="M:CommonTools.IO.Csv.CsvReader.Dispose(System.Boolean)">
            <summary>
            Releases the unmanaged resources used by this instance and optionally releases the managed resources.
            </summary>
            <param name="disposing">
            	<see langword="true"/> to release both managed and unmanaged resources; <see langword="false"/> to release only unmanaged resources.
            </param>
        </member>
        <member name="M:CommonTools.IO.Csv.CsvReader.Finalize">
            <summary>
            Releases unmanaged resources and performs other cleanup operations before the instance is reclaimed by garbage collection.
            </summary>
        </member>
        <member name="E:CommonTools.IO.Csv.CsvReader.ParseError">
            <summary>
            Occurs when there is an error while parsing the CSV stream.
            </summary>
        </member>
        <member name="P:CommonTools.IO.Csv.CsvReader.Comment">
            <summary>
            Gets the comment character indicating that a line is commented out.
            </summary>
            <value>The comment character indicating that a line is commented out.</value>
        </member>
        <member name="P:CommonTools.IO.Csv.CsvReader.Escape">
            <summary>
            Gets the escape character letting insert quotation characters inside a quoted field.
            </summary>
            <value>The escape character letting insert quotation characters inside a quoted field.</value>
        </member>
        <member name="P:CommonTools.IO.Csv.CsvReader.Delimiter">
            <summary>
            Gets the delimiter character separating each field.
            </summary>
            <value>The delimiter character separating each field.</value>
        </member>
        <member name="P:CommonTools.IO.Csv.CsvReader.Quote">
            <summary>
            Gets the quotation character wrapping every field.
            </summary>
            <value>The quotation character wrapping every field.</value>
        </member>
        <member name="P:CommonTools.IO.Csv.CsvReader.HasHeaders">
            <summary>
            Indicates if field names are located on the first non commented line.
            </summary>
            <value><see langword="true"/> if field names are located on the first non commented line, otherwise, <see langword="false"/>.</value>
        </member>
        <member name="P:CommonTools.IO.Csv.CsvReader.TrimmingOption">
            <summary>
            Indicates if spaces at the start and end of a field are trimmed.
            </summary>
            <value><see langword="true"/> if spaces at the start and end of a field are trimmed, otherwise, <see langword="false"/>.</value>
        </member>
        <member name="P:CommonTools.IO.Csv.CsvReader.BufferSize">
            <summary>
            Gets the buffer size.
            </summary>
        </member>
        <member name="P:CommonTools.IO.Csv.CsvReader.DefaultParseErrorAction">
            <summary>
            Gets or sets the default action to take when a parsing error has occured.
            </summary>
            <value>The default action to take when a parsing error has occured.</value>
        </member>
        <member name="P:CommonTools.IO.Csv.CsvReader.MissingFieldAction">
            <summary>
            Gets or sets the action to take when a field is missing.
            </summary>
            <value>The action to take when a field is missing.</value>
        </member>
        <member name="P:CommonTools.IO.Csv.CsvReader.SupportsMultiline">
            <summary>
            Gets or sets a value indicating if the reader supports multiline fields.
            </summary>
            <value>A value indicating if the reader supports multiline field.</value>
        </member>
        <member name="P:CommonTools.IO.Csv.CsvReader.SkipEmptyLines">
            <summary>
            Gets or sets a value indicating if the reader will skip empty lines.
            </summary>
            <value>A value indicating if the reader will skip empty lines.</value>
        </member>
        <member name="P:CommonTools.IO.Csv.CsvReader.FieldCount">
            <summary>
            Gets the maximum number of fields to retrieve for each record.
            </summary>
            <value>The maximum number of fields to retrieve for each record.</value>
            <exception cref="T:System.ComponentModel.ObjectDisposedException">
            The instance has been disposed of.
            </exception>
        </member>
        <member name="P:CommonTools.IO.Csv.CsvReader.EndOfStream">
            <summary>
            Gets a value that indicates whether the current stream position is at the end of the stream.
            </summary>
            <value><see langword="true"/> if the current stream position is at the end of the stream; otherwise <see langword="false"/>.</value>
        </member>
        <member name="P:CommonTools.IO.Csv.CsvReader.CurrentRecordIndex">
            <summary>
            Gets the current record index in the CSV file.
            </summary>
            <value>The current record index in the CSV file.</value>
        </member>
        <member name="P:CommonTools.IO.Csv.CsvReader.MissingFieldFlag">
            <summary>
            Indicates if one or more field are missing for the current record.
            Resets after each successful record read.
            </summary>
        </member>
        <member name="P:CommonTools.IO.Csv.CsvReader.ParseErrorFlag">
            <summary>
            Indicates if a parse error occured for the current record.
            Resets after each successful record read.
            </summary>
        </member>
        <member name="P:CommonTools.IO.Csv.CsvReader.Item(System.Int32,System.String)">
            <summary>
            Gets the field with the specified name and record position. <see cref="M:hasHeaders"/> must be <see langword="true"/>.
            </summary>
            <value>
            The field with the specified name and record position.
            </value>
            <exception cref="T:ArgumentNullException">
            	<paramref name="field"/> is <see langword="null"/> or an empty string.
            </exception>
            <exception cref="T:InvalidOperationException">
            The CSV does not have headers (<see cref="M:HasHeaders"/> property is <see langword="false"/>).
            </exception>
            <exception cref="T:ArgumentException">
            	<paramref name="field"/> not found.
            </exception>
            <exception cref="T:ArgumentOutOfRangeException">
            	Record index must be > 0.
            </exception>
            <exception cref="T:InvalidOperationException">
            	Cannot move to a previous record in forward-only mode.
            </exception>
            <exception cref="T:EndOfStreamException">
            	Cannot read record at <paramref name="record"/>.
            </exception>
            <exception cref="T:MalformedCsvException">
            	The CSV appears to be corrupt at the current position.
            </exception>
            <exception cref="T:System.ComponentModel.ObjectDisposedException">
            The instance has been disposed of.
            </exception>
        </member>
        <member name="P:CommonTools.IO.Csv.CsvReader.Item(System.Int32,System.Int32)">
            <summary>
            Gets the field at the specified index and record position.
            </summary>
            <value>
            The field at the specified index and record position.
            A <see langword="null"/> is returned if the field cannot be found for the record.
            </value>
            <exception cref="T:ArgumentOutOfRangeException">
            	<paramref name="field"/> must be included in [0, <see cref="M:FieldCount"/>[.
            </exception>
            <exception cref="T:ArgumentOutOfRangeException">
            	Record index must be > 0.
            </exception>
            <exception cref="T:InvalidOperationException">
            	Cannot move to a previous record in forward-only mode.
            </exception>
            <exception cref="T:EndOfStreamException">
            	Cannot read record at <paramref name="record"/>.
            </exception>
            <exception cref="T:MalformedCsvException">
            	The CSV appears to be corrupt at the current position.
            </exception>
            <exception cref="T:System.ComponentModel.ObjectDisposedException">
            The instance has been disposed of.
            </exception>
        </member>
        <member name="P:CommonTools.IO.Csv.CsvReader.Item(System.String)">
            <summary>
            Gets the field with the specified name. <see cref="M:hasHeaders"/> must be <see langword="true"/>.
            </summary>
            <value>
            The field with the specified name.
            </value>
            <exception cref="T:ArgumentNullException">
            	<paramref name="field"/> is <see langword="null"/> or an empty string.
            </exception>
            <exception cref="T:InvalidOperationException">
            The CSV does not have headers (<see cref="M:HasHeaders"/> property is <see langword="false"/>).
            </exception>
            <exception cref="T:ArgumentException">
            	<paramref name="field"/> not found.
            </exception>
            <exception cref="T:MalformedCsvException">
            	The CSV appears to be corrupt at the current position.
            </exception>
            <exception cref="T:System.ComponentModel.ObjectDisposedException">
            The instance has been disposed of.
            </exception>
        </member>
        <member name="P:CommonTools.IO.Csv.CsvReader.Item(System.Int32)">
            <summary>
            Gets the field at the specified index.
            </summary>
            <value>The field at the specified index.</value>
            <exception cref="T:ArgumentOutOfRangeException">
            	<paramref name="field"/> must be included in [0, <see cref="M:FieldCount"/>[.
            </exception>
            <exception cref="T:InvalidOperationException">
            	No record read yet. Call ReadLine() first.
            </exception>
            <exception cref="T:MalformedCsvException">
            	The CSV appears to be corrupt at the current position.
            </exception>
            <exception cref="T:System.ComponentModel.ObjectDisposedException">
            The instance has been disposed of.
            </exception>
        </member>
        <member name="E:CommonTools.IO.Csv.CsvReader.Disposed">
            <summary>
            Occurs when the instance is disposed of.
            </summary>
        </member>
        <member name="P:CommonTools.IO.Csv.CsvReader.IsDisposed">
            <summary>
            Gets a value indicating whether the instance has been disposed of.
            </summary>
            <value>
            	<see langword="true"/> if the instance has been disposed of; otherwise, <see langword="false"/>.
            </value>
        </member>
        <member name="T:CommonTools.IO.Csv.CsvReader.RecordEnumerator">
            <summary>
            Supports a simple iteration over the records of a <see cref="T:CsvReader"/>.
            </summary>
        </member>
        <member name="F:CommonTools.IO.Csv.CsvReader.RecordEnumerator._reader">
            <summary>
            Contains the enumerated <see cref="T:CsvReader"/>.
            </summary>
        </member>
        <member name="F:CommonTools.IO.Csv.CsvReader.RecordEnumerator._current">
            <summary>
            Contains the current record.
            </summary>
        </member>
        <member name="F:CommonTools.IO.Csv.CsvReader.RecordEnumerator._currentRecordIndex">
            <summary>
            Contains the current record index.
            </summary>
        </member>
        <member name="M:CommonTools.IO.Csv.CsvReader.RecordEnumerator.#ctor(CommonTools.IO.Csv.CsvReader)">
            <summary>
            Initializes a new instance of the <see cref="T:RecordEnumerator"/> class.
            </summary>
            <param name="reader">The <see cref="T:CsvReader"/> to iterate over.</param>
            <exception cref="T:ArgumentNullException">
            	<paramref name="reader"/> is a <see langword="null"/>.
            </exception>
        </member>
        <member name="M:CommonTools.IO.Csv.CsvReader.RecordEnumerator.MoveNext">
            <summary>
            Advances the enumerator to the next record of the CSV.
            </summary>
            <returns><see langword="true"/> if the enumerator was successfully advanced to the next record, <see langword="false"/> if the enumerator has passed the end of the CSV.</returns>
        </member>
        <member name="M:CommonTools.IO.Csv.CsvReader.RecordEnumerator.Reset">
            <summary>
            Sets the enumerator to its initial position, which is before the first record in the CSV.
            </summary>
        </member>
        <member name="M:CommonTools.IO.Csv.CsvReader.RecordEnumerator.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
        </member>
        <member name="P:CommonTools.IO.Csv.CsvReader.RecordEnumerator.Current">
            <summary>
            Gets the current record.
            </summary>
        </member>
        <member name="P:CommonTools.IO.Csv.CsvReader.RecordEnumerator.System#Collections#IEnumerator#Current">
            <summary>
            Gets the current record.
            </summary>
        </member>
        <member name="T:CommonTools.IO.Csv.CsvReader.DataReaderValidations">
            <summary>
            Defines the data reader validations.
            </summary>
        </member>
        <member name="F:CommonTools.IO.Csv.CsvReader.DataReaderValidations.None">
            <summary>
            No validation.
            </summary>
        </member>
        <member name="F:CommonTools.IO.Csv.CsvReader.DataReaderValidations.IsInitialized">
            <summary>
            Validate that the data reader is initialized.
            </summary>
        </member>
        <member name="F:CommonTools.IO.Csv.CsvReader.DataReaderValidations.IsNotClosed">
            <summary>
            Validate that the data reader is not closed.
            </summary>
        </member>
        <member name="T:CommonTools.IO.ApplicationDataStorageManager`1">
            <summary>
            This class handles application data storage
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="T:CommonTools.IO.IApplicationDataStorageManager`1">
            <summary>
            
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:CommonTools.IO.IApplicationDataStorageManager`1.DoesStoreExist">
            <summary>
            Determines whether the underlying store exists
            </summary>
            <returns></returns>
        </member>
        <member name="M:CommonTools.IO.IApplicationDataStorageManager`1.Load">
            <summary>
            Loads a data object from this instance's store
            </summary>
            <returns></returns>
        </member>
        <member name="M:CommonTools.IO.IApplicationDataStorageManager`1.Save(`0)">
            <summary>
            Saves a data object to this instance's store
            </summary>
            <param name="obj">The object.</param>
            <returns></returns>
        </member>
        <member name="M:CommonTools.IO.IApplicationDataStorageManager`1.TryLoad(`0@,System.String@)">
            <summary>
            Tries the load a data object from this instance's store
            </summary>
            <param name="obj">The obj.</param>
            <param name="errorMessage">The error message.</param>
            <returns>true if successful, otherwise false</returns>
        </member>
        <member name="M:CommonTools.IO.IApplicationDataStorageManager`1.TrySave(`0,System.String@)">
            <summary>
            Tries the save a data object to this instance's store
            </summary>
            <param name="obj">The object.</param>
            <param name="errorMessage">The error message.</param>
            <returns>true if successful, otherwise false</returns>
        </member>
        <member name="M:CommonTools.IO.ApplicationDataStorageManager`1.DoesStoreExist">
            <summary>
            Determines whether the underlying store exists
            </summary>
            <returns></returns>
        </member>
        <member name="M:CommonTools.IO.ApplicationDataStorageManager`1.Load">
            <summary>
            Loads a data object from this instance's store
            </summary>
            <returns></returns>
        </member>
        <member name="M:CommonTools.IO.ApplicationDataStorageManager`1.TryLoad(`0@,System.String@)">
            <summary>
            Tries the load a data object from this instance's store
            </summary>
            <param name="obj">The obj.</param>
            <param name="errorMessage">The error message.</param>
            <returns>true if successful, otherwise false</returns>
        </member>
        <member name="M:CommonTools.IO.ApplicationDataStorageManager`1.Save(`0)">
            <summary>
            Saves a data object to this instance's store
            </summary>
            <param name="obj">The object.</param>
            <returns></returns>
        </member>
        <member name="M:CommonTools.IO.ApplicationDataStorageManager`1.TrySave(`0,System.String@)">
            <summary>
            Tries the save a data object to this instance's store
            </summary>
            <param name="obj">The object.</param>
            <param name="errorMessage">The error message.</param>
            <returns>true if successful, otherwise false</returns>
        </member>
        <member name="M:CommonTools.IO.ApplicationDataStorageManager`1.#ctor(System.String,System.String,CommonTools.IO.ApplicationDataStorageMode)">
            <summary>
            Initializes a new instance of the <see cref="T:CommonTools.IO.ApplicationDataStorageManager`1"/> class.
            </summary>
            <param name="applicationPath">The application path (eg.: "CompanyName\ApplicationName\Version")</param>
            <param name="fileName">Name of the data storage file.</param>
            <param name="applicationDataStorageMode">The application data storage mode.</param>
        </member>
        <member name="T:CommonTools.Components.Caching.ICacheController">
            <summary>
            The ICacheController provides a collection of ICacheItems.
            </summary>
        </member>
        <member name="M:CommonTools.Components.Caching.ICacheController.CreateCacheControllerInstance">
            <summary>
            Creates an instance of this object's default controller.
            </summary>
            <returns></returns>
        </member>
        <member name="M:CommonTools.Components.Caching.ICacheController.GetCacheItem(System.String)">
            <summary>
            Gets an ICacheItem from the ICacheItem collection by name
            </summary>
            <param name="name">The name</param>
            <returns></returns>
        </member>
        <member name="P:CommonTools.Components.Caching.ICacheController.ContinuousAccessStaleKeySuffixForMemcached">
            <summary>
            Gets the continuous access stale key suffix for memcached.
            </summary>
            <value>The continuous access stale key suffix for memcached.</value>
        </member>
        <member name="P:CommonTools.Components.Caching.ICacheController.Minutes">
            <summary>
            Gets the amount of minutes to cache all ICacheItems at this object's ICacheItem collection. This value can be overwritten
            by the ICacheItem itself.
            </summary>
            <value>The minutes.</value>
        </member>
        <member name="P:CommonTools.Components.Caching.ICacheController.Enabled">
            <summary>
            Gets a value indicating whether to enable caching or not. If this is set to false, no ICacheItem at the ICacheItem collection
            can use the HttpRuntime cache.
            </summary>
            <value><c>true</c> if enabled; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:CommonTools.Components.Caching.ICacheController.CacheItems">
            <summary>
            Gets the ICacheItem collection associated with this ICacheController.
            </summary>
            <value>The cache items.</value>
        </member>
        <member name="T:CommonTools.Components.Logging.ILogController">
            <summary>
            
            </summary>
        </member>
        <member name="M:CommonTools.Components.Logging.ILogController.CreateLogControllerInstance">
            <summary>
            Creates a log controller instance.
            </summary>
            <returns></returns>
        </member>
        <member name="P:CommonTools.Components.Logging.ILogController.ConnectionStringName">
            <summary>
            Gets or sets the name of the connection string.
            </summary>
            <value>The name of the connection string.</value>
        </member>
        <member name="P:CommonTools.Components.Logging.ILogController.StoredProcedurePrefix">
            <summary>
            Gets or sets the stored procedure prefix.
            </summary>
            <value>The stored procedure prefix.</value>
        </member>
        <member name="P:CommonTools.Components.Logging.ILogController.LogSectionProviderType">
            <summary>
            Gets or sets the type of the log section provider.
            </summary>
            <value>The type of the log section provider.</value>
        </member>
        <member name="P:CommonTools.Components.Logging.ILogController.AsynchronousBatchSize">
            <summary>
            Gets or sets the size of the asynchronous batch.
            </summary>
            <value>The size of the asynchronous batch.</value>
        </member>
        <member name="P:CommonTools.Components.Logging.ILogController.ApplicationId">
            <summary>
            Gets or sets the application id. This value can be set either via the defaultApplicationId attribute or an
            ApplicationId appsettings key/value pair.
            </summary>
            <value>The application id.</value>
        </member>
        <member name="P:CommonTools.Components.Logging.ILogController.LogLevel">
            <summary>
            Gets or sets the log level if you use a hirarchic eventlogtype mechanism. For example, if you define the eventlogtypes to
            be Error = 1, Warning = 2, Info = 3, then you can use this property to determine that all messages lower than 2 (Warning)
            should be logged to the database while Infos (3) will be ignored.
            </summary>
            <value>The log level.</value>
        </member>
        <member name="P:CommonTools.Components.Logging.ILogController.LogBackupFilePath">
            <summary>
            Gets or sets the log backup file path. This path is used if for some reason the log manager class can't connect to the
            specified database and therefore logs to a file.
            </summary>
            <remarks>The file log mechanism is not optimized for performance so it should not be used for normal log records. It is
            a mere backup mechanism in case the database crashes or the network connection fails.</remarks>
            <value>The log backup file path.</value>
        </member>
        <member name="T:CommonTools.Components.Flash.OpenFlashChart.Chart">
            <summary>
            
            </summary>
        </member>
        <member name="M:CommonTools.Components.Flash.OpenFlashChart.Chart.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents the current <see cref="T:System.Object"/>.
            </summary>
            <returns>
            A <see cref="T:System.String"/> that represents the current <see cref="T:System.Object"/>.
            </returns>
        </member>
        <member name="M:CommonTools.Components.Flash.OpenFlashChart.Chart.ToDebugString">
            <summary>
            Toes the debug string.
            </summary>
            <returns></returns>
        </member>
        <member name="M:CommonTools.Components.Flash.OpenFlashChart.Chart.SetXAxisLabels(System.Collections.Generic.List{CommonTools.Components.Flash.OpenFlashChart.AxisLabel})">
            <summary>
            Sets the X axis labels.
            </summary>
            <param name="labels">The labels.</param>
        </member>
        <member name="M:CommonTools.Components.Flash.OpenFlashChart.Chart.SetYAxisLabels(System.Collections.Generic.List{System.String})">
            <summary>
            Sets the Y axis labels.
            </summary>
            <param name="labels">The labels.</param>
        </member>
        <member name="M:CommonTools.Components.Flash.OpenFlashChart.Chart.SetColumnsX(System.Int32)">
            <summary>
            Sets the columns X.
            </summary>
            <param name="totalColumns">The total columns.</param>
        </member>
        <member name="M:CommonTools.Components.Flash.OpenFlashChart.Chart.SetColumnsY(System.Int32)">
            <summary>
            Sets the columns Y.
            </summary>
            <param name="totalColumns">The total columns.</param>
        </member>
        <member name="M:CommonTools.Components.Flash.OpenFlashChart.Chart.#ctor(CommonTools.Components.Flash.OpenFlashChart.ChartStylableTextElement,System.String,CommonTools.Components.Flash.OpenFlashChart.ChartBase)">
            <summary>
            Initializes a new instance of the <see cref="T:CommonTools.Components.Flash.OpenFlashChart.Chart"/> class.
            </summary>
            <param name="title">The title.</param>
            <param name="toolTip">The tool tip.</param>
            <param name="chart">The chart.</param>
        </member>
        <member name="M:CommonTools.Components.Flash.OpenFlashChart.Chart.#ctor(CommonTools.Components.Flash.OpenFlashChart.ChartStylableTextElement,System.String,System.Collections.Generic.List{CommonTools.Components.Flash.OpenFlashChart.ChartBase})">
            <summary>
            Initializes a new instance of the <see cref="T:CommonTools.Components.Flash.OpenFlashChart.Chart"/> class.
            </summary>
            <param name="title">The title.</param>
            <param name="toolTip">The tool tip.</param>
            <param name="charts">The charts.</param>
        </member>
        <member name="M:CommonTools.Components.Flash.OpenFlashChart.Chart.#ctor(CommonTools.Components.Flash.OpenFlashChart.ChartStylableTextElement,CommonTools.Components.Flash.OpenFlashChart.ChartStylableTextElement,CommonTools.Components.Flash.OpenFlashChart.ChartStylableTextElement,System.String,CommonTools.Components.Flash.OpenFlashChart.ChartBase)">
            <summary>
            Initializes a new instance of the <see cref="T:CommonTools.Components.Flash.OpenFlashChart.Chart"/> class.
            </summary>
            <param name="title">The title.</param>
            <param name="legendX">The legend X.</param>
            <param name="legendY">The legend Y.</param>
            <param name="toolTip">The tool tip.</param>
            <param name="chart">The chart.</param>
        </member>
        <member name="M:CommonTools.Components.Flash.OpenFlashChart.Chart.#ctor(CommonTools.Components.Flash.OpenFlashChart.ChartStylableTextElement,CommonTools.Components.Flash.OpenFlashChart.ChartStylableTextElement,CommonTools.Components.Flash.OpenFlashChart.ChartStylableTextElement,System.String,System.Collections.Generic.List{CommonTools.Components.Flash.OpenFlashChart.ChartBase},System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:CommonTools.Components.Flash.OpenFlashChart.Chart"/> class.
            </summary>
            <param name="title">The title.</param>
            <param name="legendX">The legend X.</param>
            <param name="legendY">The legend Y.</param>
            <param name="toolTip">The tool tip.</param>
            <param name="charts">The charts.</param>
            <param name="xAxisColumns">The x axis columns.</param>
            <param name="yAxisColumns">The y axis columns.</param>
        </member>
        <member name="P:CommonTools.Components.Flash.OpenFlashChart.Chart.ChartBase">
            <summary>
            Gets or sets the chart base.
            </summary>
            <value>The chart base.</value>
        </member>
        <member name="P:CommonTools.Components.Flash.OpenFlashChart.Chart.Title">
            <summary>
            Gets or sets the title.
            </summary>
            <value>The title.</value>
        </member>
        <member name="P:CommonTools.Components.Flash.OpenFlashChart.Chart.X_Axis">
            <summary>
            Gets or sets the x_ axis.
            </summary>
            <value>The x_ axis.</value>
        </member>
        <member name="P:CommonTools.Components.Flash.OpenFlashChart.Chart.Y_Axis">
            <summary>
            Gets or sets the y_ axis.
            </summary>
            <value>The y_ axis.</value>
        </member>
        <member name="P:CommonTools.Components.Flash.OpenFlashChart.Chart.Y_Axis_Right">
            <summary>
            Gets or sets the y_ axis_ right.
            </summary>
            <value>The y_ axis_ right.</value>
        </member>
        <member name="P:CommonTools.Components.Flash.OpenFlashChart.Chart.LegendX">
            <summary>
            Gets or sets the legend X.
            </summary>
            <value>The legend X.</value>
        </member>
        <member name="P:CommonTools.Components.Flash.OpenFlashChart.Chart.LegendY">
            <summary>
            Gets or sets the legend Y.
            </summary>
            <value>The legend Y.</value>
        </member>
        <member name="P:CommonTools.Components.Flash.OpenFlashChart.Chart.Bgcolor">
            <summary>
            Gets or sets the bgcolor.
            </summary>
            <value>The bgcolor.</value>
        </member>
        <member name="P:CommonTools.Components.Flash.OpenFlashChart.Chart.ToolTip">
            <summary>
            Gets or sets the tool tip.
            </summary>
            <value>The tool tip.</value>
        </member>
        <member name="T:CommonTools.Components.Combinatorics.SmallPrimeUtility">
            <summary>
            Utility class that maintains a small table of prime numbers and provides
            simple implementations of Prime Factorization algorithms.  
            This is a quick and dirty utility class to support calculations of permutation
            sets with indexes under 2^31.
            The prime table contains all primes up to Sqrt(2^31) which are all of the primes
            requires to factorize any Int32 positive integer.
            </summary>
        </member>
        <member name="M:CommonTools.Components.Combinatorics.SmallPrimeUtility.#ctor">
            <summary>
            Utility class, no instances allowed.
            </summary>
        </member>
        <member name="M:CommonTools.Components.Combinatorics.SmallPrimeUtility.Factor(System.Int32)">
            <summary>
            Performs a prime factorization of a given integer using the table of primes in PrimeTable.
            Since this will only factor Int32 sized integers, a simple list of factors is returned instead
            of the more scalable, but more difficult to consume, list of primes and associated exponents.
            </summary>
            <param name="i">The number to factorize, must be positive.</param>
            <returns>A simple list of factors.</returns>
        </member>
        <member name="M:CommonTools.Components.Combinatorics.SmallPrimeUtility.MultiplyPrimeFactors(System.Collections.Generic.IList{System.Int32},System.Collections.Generic.IList{System.Int32})">
            <summary>
            Given two integers expressed as a list of prime factors, multiplies these numbers
            together and returns an integer also expressed as a set of prime factors.
            This allows multiplication to overflow well beyond a Int64 if necessary.  
            </summary>
            <param name="lhs">Left Hand Side argument, expressed as list of prime factors.</param>
            <param name="rhs">Right Hand Side argument, expressed as list of prime factors.</param>
            <returns>Product, expressed as list of prime factors.</returns>
        </member>
        <member name="M:CommonTools.Components.Combinatorics.SmallPrimeUtility.DividePrimeFactors(System.Collections.Generic.IList{System.Int32},System.Collections.Generic.IList{System.Int32})">
            <summary>
            Given two integers expressed as a list of prime factors, divides these numbers
            and returns an integer also expressed as a set of prime factors.
            If the result is not a integer, then the result is undefined.  That is, 11 / 5
            when divided by this function will not yield a correct result.
            As such, this function is ONLY useful for division with combinatorial results where 
            the result is known to be an integer AND the division occurs as the last operation(s).
            </summary>
            <param name="numerator">Numerator argument, expressed as list of prime factors.</param>
            <param name="denominator">Denominator argument, expressed as list of prime factors.</param>
            <returns>Resultant, expressed as list of prime factors.</returns>
        </member>
        <member name="M:CommonTools.Components.Combinatorics.SmallPrimeUtility.EvaluatePrimeFactors(System.Collections.Generic.IList{System.Int32})">
            <summary>
            Given a list of prime factors returns the long representation.
            </summary>
            <param name="value">Integer, expressed as list of prime factors.</param>
            <returns>Standard long representation.</returns>
        </member>
        <member name="M:CommonTools.Components.Combinatorics.SmallPrimeUtility.#cctor">
            <summary>
            Static initializer, set up prime table.
            </summary>
        </member>
        <member name="M:CommonTools.Components.Combinatorics.SmallPrimeUtility.CalculatePrimes">
            <summary>
            Calculate all primes up to Sqrt(2^32) = 2^16.  
            This table will be large enough for all factorizations for Int32's.
            Small tables are best built using the Sieve Of Eratosthenes,
            Reference: http://primes.utm.edu/glossary/page.php?sort=SieveOfEratosthenes
            </summary>
        </member>
        <member name="P:CommonTools.Components.Combinatorics.SmallPrimeUtility.PrimeTable">
            <summary>
            A List of all primes from 2 to 2^16.
            </summary>
        </member>
        <member name="T:CommonTools.Components.Combinatorics.GenerateOption">
            <summary>
            Indicates whether a Permutation, Combination or Variation meta-collections
            generate repetition sets.  
            </summary>
        </member>
        <member name="F:CommonTools.Components.Combinatorics.GenerateOption.WithoutRepetition">
            <summary>
            Do not generate additional sets, typical implementation.
            </summary>
        </member>
        <member name="F:CommonTools.Components.Combinatorics.GenerateOption.WithRepetition">
            <summary>
            Generate additional sets even if repetition is required.
            </summary>
        </member>
        <member name="T:CommonTools.Xml.XmlExtraInfoAttribute">
            <summary>
            This class contains all XML extra info attribute related data
            </summary>
        </member>
        <member name="M:CommonTools.Xml.XmlExtraInfoAttribute.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:CommonTools.Xml.XmlExtraInfoAttribute"/> class.
            </summary>
        </member>
        <member name="P:CommonTools.Xml.XmlExtraInfoAttribute.TagName">
            <summary>
            Gets or sets the name of the tag.
            </summary>
            <value>The name of the tag.</value>
        </member>
        <member name="P:CommonTools.Xml.XmlExtraInfoAttribute.ValidatorInstance">
            <summary>
            Gets the validator attribute instance.
            </summary>
            <value></value>
            <returns>
            The current <see cref="T:System.Configuration.ConfigurationValidatorBase"/>.
            </returns>
        </member>
        <member name="T:CommonTools.WPF.HotkeyPressedEventArgs">
            <summary>
            
            </summary>
        </member>
        <member name="M:CommonTools.WPF.HotkeyPressedEventArgs.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:CommonTools.WPF.HotkeyPressedEventArgs"/> class.
            </summary>
            <param name="identifier">The identifier.</param>
        </member>
        <member name="P:CommonTools.WPF.HotkeyPressedEventArgs.Identifier">
            <summary>
            Gets or sets the identifier.
            </summary>
            <value>The identifier.</value>
        </member>
        <member name="T:CommonTools.WPF.HotkeyMappingManager">
            <summary>
            This class simplifies hotkey mappings
            </summary>
        </member>
        <member name="M:CommonTools.WPF.HotkeyMappingManager.RegisterCommandBinding(System.Windows.Input.KeyGesture,System.String)">
            <summary>
            Registers the command binding for a specified key gesture. This method will override any preexisting commandbindings for this key gesture.
            </summary>
            <param name="keyGesture">The key gesture.</param>
            <param name="identifier">The identifier.</param>
        </member>
        <member name="M:CommonTools.WPF.HotkeyMappingManager.RegisterCommandBinding(System.Windows.Input.KeyGesture,System.Windows.Input.ExecutedRoutedEventHandler)">
            <summary>
            Registers the command binding for a specified key gesture. This method will override any preexisting commandbindings for this key gesture.
            </summary>
            <param name="keyGesture">The key gesture.</param>
            <param name="executedRoutedEventHandler">The event handler which is called when the hotkey is pressed</param>
        </member>
        <member name="M:CommonTools.WPF.HotkeyMappingManager.RegisterCommandBinding(System.Windows.Input.KeyGesture,System.Object,System.Windows.Input.ExecutedRoutedEventHandler)">
            <summary>
            Registers the command binding for a specified key gesture. This method will override any preexisting commandbindings for this key gesture.
            </summary>
            <param name="keyGesture">The key gesture.</param>
            <param name="parameter">The parameter.</param>
            <param name="executedRoutedEventHandler">The event handler which is called when the hotkey is pressed</param>
        </member>
        <member name="M:CommonTools.WPF.HotkeyMappingManager.#ctor(System.Windows.UIElement)">
            <summary>
            Initializes a new instance of the <see cref="T:CommonTools.WPF.HotkeyMappingManager"/> class.
            </summary>
            <param name="owner">The owner.</param>
        </member>
        <member name="M:CommonTools.WPF.HotkeyMappingManager.#ctor(System.Windows.UIElement,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:CommonTools.WPF.HotkeyMappingManager"/> class.
            </summary>
            <param name="owner">The owner.</param>
            <param name="overrideSystemHotkeys">if set to <c>true</c> the keyboard mapping manager will override system control hotkeys when focused on a control
            , e.g. CTRL+C when focus is on a textbox. Use this feature with care.</param>
        </member>
        <member name="E:CommonTools.WPF.HotkeyMappingManager.HotkeyPressed">
            <summary>
            Occurs when a registered hotkey is pressed.
            </summary>
        </member>
        <member name="T:CommonTools.Components.BusinessTier.ActionType">
            <summary>
            The database action type.
            </summary>
        </member>
        <member name="F:CommonTools.Components.BusinessTier.ActionType.Create">
            <summary>
            Create
            </summary>
        </member>
        <member name="F:CommonTools.Components.BusinessTier.ActionType.Update">
            <summary>
            Update
            </summary>
        </member>
        <member name="F:CommonTools.Components.BusinessTier.ActionType.Delete">
            <summary>
            Delete
            </summary>
        </member>
        <member name="T:CommonTools.IO.FilenameFormatOptions">
            <summary>
            
            </summary>
        </member>
        <member name="F:CommonTools.IO.FilenameFormatOptions.FullPath">
            <summary>
            Returns files in full path format ( c:\mypath\in\folder\myfile.txt )
            </summary>
        </member>
        <member name="F:CommonTools.IO.FilenameFormatOptions.FilenameOnly">
            <summary>
            Returns filenames only ( c:\mypath\in\folder\myfile.txt -> myfile.txt )
            </summary>
        </member>
        <member name="F:CommonTools.IO.FilenameFormatOptions.FilenameWithoutExtension">
            <summary>
            Returns filenames without extensions ( c:\mypath\in\folder\myfile.txt -> myfile )
            </summary>
        </member>
        <member name="T:CommonTools.Components.Threading.IJob">
            <summary>
            Provides the base interface for the job configuration section.
            </summary>
        </member>
        <member name="M:CommonTools.Components.Threading.IJob.Execute(System.Collections.Generic.Dictionary{System.String,System.String})">
            <summary>
            Runs all jobs in the Configuration collection.
            </summary>
            <param name="node">The system.web.jobs config
            section that contains the list of jobs to run.</param>
        </member>
        <member name="T:CommonTools.Web.UI.EventLogView">
            <summary>
            
            </summary>
        </member>
        <member name="M:CommonTools.Web.UI.EventLogView.RecreateChildControls">
            <see cref="M:CommonTools.Web.UI.JobView.RecreateChildControls"/>
        </member>
        <member name="M:CommonTools.Web.UI.EventLogView.CreateChildControls">
            <see cref="M:CommonTools.Web.UI.JobView.CreateChildControls"/>
        </member>
        <member name="M:CommonTools.Web.UI.EventLogView.OnPreRender(System.EventArgs)">
            <summary>
            Raises the <see cref="E:System.Web.UI.Control.PreRender"></see> event.
            </summary>
            <param name="e">An <see cref="T:System.EventArgs"></see> object that contains the event data.</param>
        </member>
        <member name="M:CommonTools.Web.UI.EventLogView.Render(System.Web.UI.HtmlTextWriter)">
            <see cref="M:CommonTools.Web.UI.JobView.Render(System.Web.UI.HtmlTextWriter)"/>
        </member>
        <member name="M:CommonTools.Web.UI.EventLogView.RaisePostBackEvent(System.String)">
            <summary>
            When implemented by a class, enables a server control to process an event raised when a form is posted to the server.
            </summary>
            <param name="eventArgument">A <see cref="T:System.String"></see> that represents an optional event argument to be passed to the event handler.</param>
        </member>
        <member name="P:CommonTools.Web.UI.EventLogView.EventIDCellCssClass">
            <see cref="P:CommonTools.Web.UI.JobView.TableCssClass"/>
        </member>
        <member name="P:CommonTools.Web.UI.EventLogView.AppLocationCellCssClass">
            <see cref="P:CommonTools.Web.UI.JobView.TableCssClass"/>
        </member>
        <member name="P:CommonTools.Web.UI.EventLogView.MessageCellCssClass">
            <see cref="P:CommonTools.Web.UI.JobView.TableCssClass"/>
        </member>
        <member name="P:CommonTools.Web.UI.EventLogView.EventTypeCellCssClass">
            <see cref="P:CommonTools.Web.UI.JobView.TableCssClass"/>
        </member>
        <member name="P:CommonTools.Web.UI.EventLogView.EventDateCellCssClass">
            <see cref="P:CommonTools.Web.UI.JobView.TableCssClass"/>
        </member>
        <member name="P:CommonTools.Web.UI.EventLogView.MachineNameCellCssClass">
            <see cref="P:CommonTools.Web.UI.JobView.TableCssClass"/>
        </member>
        <member name="P:CommonTools.Web.UI.EventLogView.FilterCssClass">
            <see cref="P:CommonTools.Web.UI.JobView.TableCssClass"/>
        </member>
        <member name="P:CommonTools.Web.UI.EventLogView.DeleteCellCssClass">
            <see cref="P:CommonTools.Web.UI.JobView.TableCssClass"/>
        </member>
        <member name="P:CommonTools.Web.UI.EventLogView.ShowEventID">
            <see cref="P:CommonTools.Web.UI.JobView.TableCssClass"/>
        </member>
        <member name="P:CommonTools.Web.UI.EventLogView.ShowAppLocation">
            <see cref="P:CommonTools.Web.UI.JobView.TableCssClass"/>
        </member>
        <member name="P:CommonTools.Web.UI.EventLogView.ShowEventType">
            <see cref="P:CommonTools.Web.UI.JobView.TableCssClass"/>
        </member>
        <member name="P:CommonTools.Web.UI.EventLogView.ShowMachineName">
            <see cref="P:CommonTools.Web.UI.JobView.TableCssClass"/>
        </member>
        <member name="P:CommonTools.Web.UI.EventLogView.UseDefaultStyling">
            <see cref="P:CommonTools.Web.UI.JobView.TableCssClass"/>
        </member>
        <member name="P:CommonTools.Web.UI.EventLogView.PagerCssClass">
            <see cref="P:CommonTools.Web.UI.JobView.TableCellCssClass"/>
        </member>
        <member name="P:CommonTools.Web.UI.EventLogView.PagerCellCssClass">
            <see cref="P:CommonTools.Web.UI.JobView.TableCellCssClass"/>
        </member>
        <member name="P:CommonTools.Web.UI.EventLogView.PagerSelectedCellCssClass">
            <see cref="P:CommonTools.Web.UI.JobView.TableCellCssClass"/>
        </member>
        <member name="P:CommonTools.Web.UI.EventLogView.MaxPagerItemsPerRow">
            <see cref="P:CommonTools.Web.UI.JobView.TableCellCssClass"/>
        </member>
        <member name="P:CommonTools.Web.UI.EventLogView.PageIndex">
            <summary>
            Gets or sets the index of the page.
            </summary>
            <value>The index of the page.</value>
        </member>
        <member name="P:CommonTools.Web.UI.EventLogView.EventTypesEnumType">
            <summary>
            Gets or sets the event types.
            </summary>
            <value>The event types.</value>
        </member>
        <member name="P:CommonTools.Web.UI.EventLogView.ApplicationLocationEnumType">
            <summary>
            Gets or sets the event types.
            </summary>
            <value>The event types.</value>
        </member>
        <member name="T:CommonTools.Web.UI.MultipleFormsSubmitBehaviourControl">
            <summary>
            This Control enables the programmer to simulate multiple form submit-button behaviours on a single asp.net form.
            Currently, only textboxes are allowed as identifiying controls.
            </summary>
            <remarks>
            In order to make this work, all buttons on the page have to set their UseSubmitBehavior property to false.
            </remarks>
        </member>
        <member name="M:CommonTools.Web.UI.MultipleFormsSubmitBehaviourControl.RegisterHandleKeyDownScript(System.Web.UI.Page)">
            <summary>
            Registers the handle key down script.
            </summary>
            <param name="page">The page.</param>
        </member>
        <member name="M:CommonTools.Web.UI.MultipleFormsSubmitBehaviourControl.RegisterHandleKeyDownScript(System.Web.UI.Page,System.Boolean)">
            <summary>
            Registers the handle key down script.
            </summary>
            <param name="page">The page.</param>
            <param name="optimized">if set to <c>true</c> [optimized].</param>
        </member>
        <member name="M:CommonTools.Web.UI.MultipleFormsSubmitBehaviourControl.AddItem(System.Web.UI.WebControls.IButtonControl,System.Web.UI.WebControls.WebControl[])">
            <summary>
            Adds an item that simulates a form's submit behaviour.
            </summary>
            <param name="button">The button which onclick event should fire when the user clicks the enter button</param>
            <param name="focusingControls">an array of controls that are associated with this button's onclick event when the 
            user presses the enter button</param>
        </member>
        <member name="M:CommonTools.Web.UI.MultipleFormsSubmitBehaviourControl.OnPreRender(System.EventArgs)">
            <summary>
            Raises the <see cref="E:System.Web.UI.Control.PreRender"/> event.
            </summary>
            <param name="e">An <see cref="T:System.EventArgs"/> object that contains the event data.</param>
        </member>
        <member name="P:CommonTools.Web.UI.MultipleFormsSubmitBehaviourControl.Optimized">
            <summary>
            Gets or sets a value indicating whether this <see cref="T:CommonTools.Web.UI.MultipleFormsSubmitBehaviourControl"/> javascript code
            should be rendered space-optimized or not
            </summary>
            <value><c>true</c> if optimized; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:CommonTools.Web.UI.MultipleFormsSubmitBehaviourControl.ScriptKey">
            <summary>
            Gets or sets the Page.ClientScript ScriptBlock registration key.
            </summary>
            <value>The script key.</value>
        </member>
        <member name="T:CommonTools.Web.Navigation.UrlRewriteSectionManager">
            <summary>
            This is the class that's capable of enumerating the UrlRewrite section of your app.config.
            </summary>
        </member>
        <member name="P:CommonTools.Web.Navigation.UrlRewriteSectionManager.UrlRewriteSection">
            <summary>
            Gets the UrlRewrite section settings of the app.config or web.config
            </summary>
        </member>
        <member name="T:CommonTools.Web.Navigation.NavigationUtility">
            <summary>
            This is a general helper class for manipulating navigation items.
            </summary>
        </member>
        <member name="M:CommonTools.Web.Navigation.NavigationUtility.InsertOrUpdateQueryStringParamter(System.String,System.String,System.String)">
            <summary>
            Inserts or updates the query string of a specified path with a new value.
            </summary>
            <param name="path">The path.</param>
            <param name="queryStringKey">The query string key.</param>
            <param name="value">The value.</param>
            <returns></returns>
        </member>
        <member name="M:CommonTools.Web.Navigation.NavigationUtility.GetSubstitutedQueryString(System.Collections.Specialized.NameValueCollection,System.String,System.String)">
            <summary>
            Gets the current query string with the specified substitutions/additions. For example, a query string NameValueCollection
            that looks [A] with substitutions [B] will result in the returning string [C]:
            [A] -&gt; { {a,1}, {b,2}, {c,3} }
            [B] -&gt; key=a, value=9
            [C] -&gt; "?a=9&amp;b=2&amp;c=3"
            </summary>
            <param name="queryString">The query string.</param>
            <param name="key">The key.</param>
            <param name="value">The value.</param>
            <returns></returns>
        </member>
        <member name="M:CommonTools.Web.Navigation.NavigationUtility.GetSubstitutedQueryString(System.Collections.Specialized.NameValueCollection,System.Collections.Generic.Dictionary{System.String,System.String})">
            <summary>
            Gets the current query string with the specified substitutions/additions. For example, a query string NameValueCollection
            that looks [A] with substitutions [B] will result in the returning string [C]:
            
                [A] -> { {a,1}, {b,2}, {c,3} }
                [B] -> { {a,5}, {b,1}, {xyz,99} }
                [C] -> "?a=5&amp;b=1&amp;c=3&amp;xyz=99"
                
            </summary>
            <param name="queryString">The query string.</param>
            <param name="substitutes">The substitutes.</param>
            <returns></returns>
        </member>
        <member name="M:CommonTools.Web.Navigation.NavigationUtility.GetSubstitutedQueryString(System.Collections.Specialized.NameValueCollection,System.Collections.Generic.Dictionary{System.String,System.String},System.Collections.Generic.List{System.String})">
            <summary>
            Gets the current query string with the specified substitutions/additions. For example, a query string NameValueCollection
            that looks [A] with substitutions [B] will result in the returning string [C]:
            [A] -&gt; { {a,1}, {b,2}, {c,3} }
            [B] -&gt; { {a,5}, {b,1}, {xyz,99} }
            [C] -&gt; "?a=5&amp;b=1&amp;c=3&amp;xyz=99"
            </summary>
            <param name="queryString">The query string.</param>
            <param name="substitutes">The substitutes.</param>
            <param name="parametersToRemove">The parameters to remove from the original querystring.</param>
            <returns></returns>
        </member>
        <member name="M:CommonTools.Web.Navigation.NavigationUtility.GetMappedApplicationPath(System.String,System.String)">
            <summary>
            Gets the mapped application path.
            </summary>
            <param name="absoluteApplicationPath">The absolute application path.</param>
            <param name="virtualPath">The virtual path.</param>
            <returns></returns>
        </member>
        <member name="M:CommonTools.Web.Navigation.NavigationUtility.GetAbsolutePath(System.String,System.String)">
            <summary>
            Gets the absolute path.
            </summary>
            <param name="applicationPath">The application path.</param>
            <param name="virtualPath">The virtual path.</param>
            <returns></returns>
        </member>
        <member name="T:CommonTools.Web.Navigation.ISiteMapMenuController">
            <summary>
            The ISiteMapMenuController provides a collection of ISiteMapMenuItems.
            </summary>
        </member>
        <member name="M:CommonTools.Web.Navigation.ISiteMapMenuController.CreateSiteMapMenuControllerInstance(CommonTools.Web.Navigation.IUrlRewriteController)">
            <summary>
            Creates an instance of this object's default controller.
            </summary>
            <param name="urlRewriteController">The URL rewrite controller.</param>
            <returns></returns>
        </member>
        <member name="M:CommonTools.Web.Navigation.ISiteMapMenuController.GetSiteMapMenu(System.String)">
            <summary>
            Gets an ISiteMapMenuItem from the ISiteMapMenuItem collection by name
            </summary>
            <param name="name">The name</param>
            <returns></returns>
        </member>
        <member name="P:CommonTools.Web.Navigation.ISiteMapMenuController.SiteMapMenus">
            <summary>
            Gets the site map menus. Format: Key -&gt; name of the menu, Value -&gt; the menu
            </summary>
            <value>The site map menus.</value>
        </member>
        <member name="P:CommonTools.Web.Navigation.ISiteMapMenuController.UrlRewriteController">
            <summary>
            Gets the URL rewrite controller.
            </summary>
            <value>The URL rewrite controller.</value>
        </member>
        <member name="T:CommonTools.Web.Navigation.SiteMapMenuPropertyAttribute">
            <summary>
            
            </summary>
        </member>
        <member name="M:CommonTools.Web.Navigation.SiteMapMenuPropertyAttribute.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:CommonTools.Web.Navigation.SiteMapMenuPropertyAttribute"/> class.
            </summary>
            <param name="propertyName">Name of the property.</param>
        </member>
        <member name="P:CommonTools.Web.Navigation.SiteMapMenuPropertyAttribute.PropertyName">
            <summary>
            Gets or sets the name of the attribute.
            </summary>
            <value>The name of the attribute.</value>
        </member>
        <member name="T:CommonTools.Components.Caching.ICacheItem">
            <summary>
            This interface enforces all properties needed for 
            </summary>
        </member>
        <member name="P:CommonTools.Components.Caching.ICacheItem.UseProtocolBufferSerialization">
            <summary>
            Gets a value indicating whether to use protocol buffer serialization for memcached objects. This serialization technique
            has an average performance increase of about 20%, but the specified object must be decorated with ProtoContract attricutes.
            </summary>
            <value>
            	<c>true</c> if [use protocol buffer serialization]; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:CommonTools.Components.Caching.ICacheItem.IsMemcached">
            <summary>
            Gets a value indicating whether this instance is memcached.
            </summary>
            <value>
            	<c>true</c> if this instance is memcached; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:CommonTools.Components.Caching.ICacheItem.ContinuousAccessExtendedLifeSpan">
            <summary>
            Gets the time indicating for how long an object should linger in cache until the next call comes in which reloads the object
            on a separate thread. If an object has a lifespan of 10 minutes and the UseContinuousAccess flag is used, this property defines
            that the object should actually be cached for 10 minutes + ContinuousAccessExtendedLifeSpan. If a request comes in after the
            official expiry date (10 min), the object will be reloaded on a separate thread and then inserted into cache.
            While loading, the old object which is still on its "extended lifespan" will be returned so the reload thread doesn't block
            all other requests for that object.
            </summary>
            <value>The continuous access extended life span.</value>
        </member>
        <member name="P:CommonTools.Components.Caching.ICacheItem.UseContinuousAccess">
            <summary>
            Gets a value indicating whether to use continuous access to this cached item. Continuous access means that a cached item gets reloaded
            on a background thread after it "officially" expires and gracefully switches to the new object once it is instanziated. While the new object
            is loading, the old object will be returned. This mechanism should be used if generating an object takes a long time and threads
            must not wait/lock during its initialization.
            </summary>
            <value><c>true</c> if [use continuous access]; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:CommonTools.Components.Caching.ICacheItem.LifeSpan">
            <summary>
            Gets the life span.
            </summary>
            <value>The life span.</value>
        </member>
        <member name="P:CommonTools.Components.Caching.ICacheItem.Enabled">
            <summary>
            Gets a value indicating whether caching is enabled for this <see cref="T:CommonTools.Components.Caching.ICacheItem"/>.
            </summary>
            <value><c>true</c> if enabled; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:CommonTools.Components.Caching.ICacheItem.Minutes">
            <summary>
            Gets or sets the minutes the <see cref="T:CommonTools.Components.Caching.ICacheItem"/> should be cached.
            </summary>
            <value>The minutes.</value>
        </member>
        <member name="P:CommonTools.Components.Caching.ICacheItem.Seconds">
            <summary>
            Gets or sets the seconds the <see cref="T:CommonTools.Components.Caching.ICacheItem"/> should be cached.
            </summary>
            <value>The minutes.</value>
        </member>
        <member name="P:CommonTools.Components.Caching.ICacheItem.Suffix">
            <summary>
            Gets the suffix if this <see cref="T:CommonTools.Components.Caching.ICacheItem"/> is in iterating format {CacheKey}{Suffix}.
            </summary>
            <value>The suffix, can be null.</value>
        </member>
        <member name="P:CommonTools.Components.Caching.ICacheItem.IsIterating">
            <summary>
            Gets a value indicating whether the <see cref="T:CommonTools.Components.Caching.ICacheItem"/> can iterate (object has a primary key).
            </summary>
            <value>
            	<c>true</c> if this instance is iterating; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:CommonTools.Components.Caching.ICacheItem.IsClustered">
            <summary>
            Gets a value indicating whether this instance is clustered.
            </summary>
            <value>
            	<c>true</c> if this instance is clustered; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:CommonTools.Components.Caching.ICacheItem.Name">
            <summary>
            Gets the name of the <see cref="T:CommonTools.Components.Caching.ICacheItem"/>.
            </summary>
            <value>The name.</value>
        </member>
        <member name="P:CommonTools.Components.Caching.ICacheItem.CacheKey">
            <summary>
            Gets the cache key used at HttpRuntime.Cache for this <see cref="T:CommonTools.Components.Caching.ICacheItem"/>. If this value is null, the <see cref="T:CommonTools.Components.Caching.ICacheItem"/>.Name 
            property is used as key in the HttpRuntime.Cache collection.
            </summary>
            <value>The cache key.</value>
        </member>
        <member name="P:CommonTools.Components.Caching.ICacheItem.CacheItemPriority">
            <summary>
            Gets the cache item priority of this <see cref="T:CommonTools.Components.Caching.ICacheItem"/>.
            </summary>
            <value>The cache item priority.</value>
        </member>
        <member name="T:CommonTools.Components.Threading.PreciseTimerCallbackMode">
            <summary>
            
            </summary>
        </member>
        <member name="F:CommonTools.Components.Threading.PreciseTimerCallbackMode.Synchronized">
            <summary>
            Use Synchronized if you want to make sure that a timer callback is executed before the next interval starts
            </summary>
        </member>
        <member name="F:CommonTools.Components.Threading.PreciseTimerCallbackMode.Async">
            <summary>
            Use Async if you want to fire the timer callback on a separate thread and immediately start the next interval iteration. This may result
            in concurrent callback calls so you have to make sure that the callbacks are thread-safe.
            </summary>
        </member>
        <member name="T:CommonTools.Components.TextResources.ITextResourceManager">
            <summary>
            
            </summary>
        </member>
        <member name="M:CommonTools.Components.TextResources.ITextResourceManager.GetFormattedResourceText(System.String,System.Object[])">
            <summary>
            Gets the formatted resource text.
            </summary>
            <param name="key">The key.</param>
            <param name="args">The args.</param>
            <returns></returns>
        </member>
        <member name="M:CommonTools.Components.TextResources.ITextResourceManager.GetFormattedResourceText(System.String,System.String,System.Object[])">
            <summary>
            Gets the formatted resource text.
            </summary>
            <param name="key">The key.</param>
            <param name="culture">The culture.</param>
            <param name="args">The args.</param>
            <returns></returns>
        </member>
        <member name="M:CommonTools.Components.TextResources.ITextResourceManager.GetResourceText(System.String)">
            <summary>
            Gets the resource text.
            </summary>
            <param name="key">The key.</param>
            <returns></returns>
        </member>
        <member name="M:CommonTools.Components.TextResources.ITextResourceManager.GetResourceText(System.String,System.String)">
            <summary>
            Gets the resource text.
            </summary>
            <param name="key">The key.</param>
            <param name="culture">The culture.</param>
            <returns></returns>
        </member>
        <member name="T:CommonTools.Components.Logging.LoggingException">
            <summary>
            Exception that gets thrown by the CommonTools.Components.Caching namespace
            </summary>
        </member>
        <member name="M:CommonTools.Components.Logging.LoggingException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:CommonTools.Components.Logging.LoggingException"/> class.
            </summary>
            <param name="message">The message.</param>
        </member>
        <member name="M:CommonTools.Components.Logging.LoggingException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:CommonTools.Components.Logging.LoggingException"/> class.
            </summary>
            <param name="message">The message.</param>
            <param name="inner">The inner.</param>
        </member>
        <member name="T:CommonTools.Components.Logging.LogManagerBase">
            <summary>
            This class handles event and exception logging.
            </summary>
        </member>
        <member name="F:CommonTools.Components.Logging.LogManagerBase.SP_EVENTLOG_GET">
            <summary>
            
            </summary>
        </member>
        <member name="F:CommonTools.Components.Logging.LogManagerBase.SP_EXCEPTIONS_GET">
            <summary>
            
            </summary>
        </member>
        <member name="F:CommonTools.Components.Logging.LogManagerBase.SP_EXCEPTIONS_INSERT">
            <summary>
            
            </summary>
        </member>
        <member name="F:CommonTools.Components.Logging.LogManagerBase.SP_EXCEPTIONS_DELETE">
            <summary>
            
            </summary>
        </member>
        <member name="F:CommonTools.Components.Logging.LogManagerBase.SP_EVENTLOG_INSERT">
            <summary>
            
            </summary>
        </member>
        <member name="F:CommonTools.Components.Logging.LogManagerBase.SP_EVENTLOG_UPDATE">
            <summary>
            
            </summary>
        </member>
        <member name="F:CommonTools.Components.Logging.LogManagerBase.SP_EVENTLOG_DELETE">
            <summary>
            
            </summary>
        </member>
        <member name="F:CommonTools.Components.Logging.LogManagerBase.SP_EVENTLOG_GETPAGE">
            <summary>
            
            </summary>
        </member>
        <member name="F:CommonTools.Components.Logging.LogManagerBase.SP_EVENTLOG_GETPAGE_WITHFILTERS">
            <summary>
            
            </summary>
        </member>
        <member name="F:CommonTools.Components.Logging.LogManagerBase.SP_EXCEPTIONS_UPDATE">
            <summary>
            
            </summary>
        </member>
        <member name="F:CommonTools.Components.Logging.LogManagerBase.SP_EXCEPTIONS_GETPAGE">
            <summary>
            
            </summary>
        </member>
        <member name="M:CommonTools.Components.Logging.LogManagerBase.SetConnectionString(System.String)">
            <summary>
            Sets the connection string. This method should only be used for testing.
            </summary>
            <param name="connectionString">The connection string.</param>
        </member>
        <member name="M:CommonTools.Components.Logging.LogManagerBase.SetStoredProcedurePrefix(System.String)">
            <summary>
            Sets the stored procedure prefix. This method should only be used for testing.
            </summary>
            <param name="prefix">The prefix.</param>
        </member>
        <member name="M:CommonTools.Components.Logging.LogManagerBase.GetFormattedStoredProcedureName(System.String)">
            <summary>
            Gets the name of the formatted stored procedure ( = prefix + stored procedure name).
            </summary>
            <param name="storedProcedure">The procedure</param>
            <returns></returns>
        </member>
        <member name="M:CommonTools.Components.Logging.LogManagerBase.DeleteExceptionRecords(System.Nullable{System.Int32},System.Nullable{System.Int64},System.Nullable{System.Int32})">
            <summary>
            Deletes exception records older than a specific amount of days.
            </summary>
            <param name="applicationId">The application id.</param>
            <param name="exceptionId">The ExceptionId of the exception record to delete</param>
            <param name="olderThanInDays">The amount of days.</param>
        </member>
        <member name="M:CommonTools.Components.Logging.LogManagerBase.DeleteEventRecords(System.Nullable{System.Int32},System.Nullable{System.Int64},System.Nullable{System.Int32},System.Nullable{System.Int32})">
            <summary>
            Deletes the event records.
            </summary>
            <param name="applicationId">The application id.</param>
            <param name="eventId">The EventId of the record to delete.</param>
            <param name="olderThanInDays">The amount of days.</param>
            <param name="eventTypeFilter">The event type filter.</param>
        </member>
        <member name="P:CommonTools.Components.Logging.LogManagerBase.LogController">
            <summary>
            Gets the log controller.
            </summary>
            <value>The log controller.</value>
        </member>
        <member name="P:CommonTools.Components.Logging.LogManagerBase.ConnectionString">
            <summary>
            Gets the connection string.
            </summary>
            <value>The connection string.</value>
        </member>
        <member name="P:CommonTools.Components.Logging.LogManagerBase.StoredProcedurePrefix">
            <summary>
            Gets the connection string.
            </summary>
            <value>The connection string.</value>
        </member>
        <member name="P:CommonTools.Components.Logging.LogManagerBase.LogBackupFilePath">
            <summary>
            Gets or sets the log backup file path. This path is used if for some reason the log manager class can't connect to the
            specified database and therefore logs to a file.
            </summary>
            <value>The log backup file path.</value>
            <remarks>The file log mechanism is not optimized for performance so it should not be used for normal log records. It is
            a mere backup mechanism in case the database crashes or the network connection fails.</remarks>
        </member>
        <member name="P:CommonTools.Components.Logging.LogManagerBase.LogLevel">
            <summary>
            Gets or sets the log level if you use a hirarchic eventlogtype mechanism. For example, if you define the eventlogtypes to
            be Error = 1, Warning = 2, Info = 3, then you can use this property to determine that all messages lower than 2 (Warning)
            should be logged to the database while Infos (3) will be ignored.
            </summary>
            <value>The log level.</value>
        </member>
        <member name="T:CommonTools.Components.Graphics.ImageHelper">
            <summary>
            This class contains methods for image manipulation
            </summary>
        </member>
        <member name="M:CommonTools.Components.Graphics.ImageHelper.Resize(System.Drawing.Image,System.Drawing.Size)">
            <summary>
            Resizes the specified image.
            </summary>
            <param name="image">The image.</param>
            <param name="size">The size.</param>
            <returns></returns>
        </member>
        <member name="M:CommonTools.Components.Graphics.ImageHelper.Crop(System.Drawing.Image,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Crops the specified image.
            </summary>
            <param name="image">The image.</param>
            <param name="posX">The pos X.</param>
            <param name="posY">The pos Y.</param>
            <param name="width">The width.</param>
            <param name="height">The height.</param>
            <returns></returns>
        </member>
        <member name="M:CommonTools.Components.Graphics.ImageHelper.Crop(System.Drawing.Image,CommonTools.Components.Graphics.CropPosition,System.Decimal)">
            <summary>
            Crops the specified image.
            </summary>
            <param name="image">The image.</param>
            <param name="cropMode">The crop mode.</param>
            <param name="aspectRatio">The aspect ratio.</param>
            <returns></returns>
        </member>
        <member name="M:CommonTools.Components.Graphics.ImageHelper.GetFileExtension(System.Drawing.Imaging.ImageFormat)">
            <summary>
            Gets the file extension.
            </summary>
            <param name="imageFormat">The image format.</param>
            <returns></returns>
        </member>
        <member name="M:CommonTools.Components.Graphics.ImageHelper.GetImageFormatFromMimeType(System.String)">
            <summary>
            Gets the type of the image format from MIME.
            </summary>
            <param name="mimeType">Type of the MIME.</param>
            <returns></returns>
        </member>
        <member name="M:CommonTools.Components.Graphics.ImageHelper.GetImageFormat(System.String)">
            <summary>
            Gets the image format.
            </summary>
            <param name="fileName">Name of the file.</param>
            <returns></returns>
        </member>
        <member name="M:CommonTools.Components.Graphics.ImageHelper.GetImageFormat(System.Guid)">
            <summary>
            Gets the image format from a specified guid.
            </summary>
            <param name="guid">The GUID.</param>
            <returns></returns>
        </member>
        <member name="M:CommonTools.Components.Graphics.ImageHelper.GetMimeType(System.Drawing.Imaging.ImageFormat)">
            <summary>
            Gets the type of the MIME.
            </summary>
            <param name="imageFormat">The image format.</param>
            <returns></returns>
        </member>
        <member name="M:CommonTools.Components.Graphics.ImageHelper.GetMimeType(System.String)">
            <summary>
            Gets the type of the MIME.
            </summary>
            <param name="fileName">Name of the file.</param>
            <returns></returns>
        </member>
        <member name="T:CommonTools.Components.Combinatorics.Permutations`1">
            <summary>
            Permutations defines a meta-collection, typically a list of lists, of all
            possible orderings of a set of values.  This list is enumerable and allows
            the scanning of all possible permutations using a simple foreach() loop.
            The MetaCollectionType parameter of the constructor allows for the creation of
            two types of sets,  those with and without repetition in the output set when 
            presented with repetition in the input set.
            </summary>
            <remarks>
            When given a input collect {A A B}, the following sets are generated:
            MetaCollectionType.WithRepetition =>
            {A A B}, {A B A}, {A A B}, {A B A}, {B A A}, {B A A}
            MetaCollectionType.WithoutRepetition =>
            {A A B}, {A B A}, {B A A}
            
            When generating non-repetition sets, ordering is based on the lexicographic 
            ordering of the lists based on the provided Comparer.  
            If no comparer is provided, then T must be IComparable on T.
            
            When generating repetition sets, no comparisions are performed and therefore
            no comparer is required and T does not need to be IComparable.
            </remarks>
            <typeparam name="T">The type of the values within the list.</typeparam>
        </member>
        <member name="T:CommonTools.Components.Combinatorics.IMetaCollection`1">
            <summary>
            Interface for Permutations, Combinations and any other classes that present
            a collection of collections based on an input collection.  The enumerators that 
            this class inherits defines the mechanism for enumerating through the collections.  
            </summary>
            <typeparam name="T">The of the elements in the collection, not the type of the collection.</typeparam>
        </member>
        <member name="P:CommonTools.Components.Combinatorics.IMetaCollection`1.Count">
            <summary>
            The count of items in the collection.  This is not inherited from
            ICollection since this meta-collection cannot be extended by users.
            </summary>
        </member>
        <member name="P:CommonTools.Components.Combinatorics.IMetaCollection`1.Type">
            <summary>
            The type of the meta-collection, determining how the collections are 
            determined from the inputs.
            </summary>
        </member>
        <member name="P:CommonTools.Components.Combinatorics.IMetaCollection`1.UpperIndex">
            <summary>
            The upper index of the meta-collection, which is the size of the input collection.
            </summary>
        </member>
        <member name="P:CommonTools.Components.Combinatorics.IMetaCollection`1.LowerIndex">
            <summary>
            The lower index of the meta-collection, which is the size of each output collection.
            </summary>
        </member>
        <member name="M:CommonTools.Components.Combinatorics.Permutations`1.#ctor">
            <summary>
            No default constructor, must at least provided a list of values.
            </summary>
        </member>
        <member name="M:CommonTools.Components.Combinatorics.Permutations`1.#ctor(System.Collections.Generic.IList{`0})">
            <summary>
            Create a permutation set from the provided list of values.  
            The values (T) must implement IComparable.  
            If T does not implement IComparable use a constructor with an explict IComparer.
            The repetition type defaults to MetaCollectionType.WithholdRepetitionSets
            </summary>
            <param name="values">List of values to permute.</param>
        </member>
        <member name="M:CommonTools.Components.Combinatorics.Permutations`1.#ctor(System.Collections.Generic.IList{`0},CommonTools.Components.Combinatorics.GenerateOption)">
            <summary>
            Create a permutation set from the provided list of values.  
            If type is MetaCollectionType.WithholdRepetitionSets, then values (T) must implement IComparable.  
            If T does not implement IComparable use a constructor with an explict IComparer.
            </summary>
            <param name="values">List of values to permute.</param>
            <param name="type">The type of permutation set to calculate.</param>
        </member>
        <member name="M:CommonTools.Components.Combinatorics.Permutations`1.#ctor(System.Collections.Generic.IList{`0},System.Collections.Generic.IComparer{`0})">
            <summary>
            Create a permutation set from the provided list of values.  
            The values will be compared using the supplied IComparer.
            The repetition type defaults to MetaCollectionType.WithholdRepetitionSets
            </summary>
            <param name="values">List of values to permute.</param>
            <param name="comparer">Comparer used for defining the lexigraphic order.</param>
        </member>
        <member name="M:CommonTools.Components.Combinatorics.Permutations`1.GetEnumerator">
            <summary>
            Gets an enumerator for collecting the list of permutations.
            </summary>
            <returns>The enumerator.</returns>
        </member>
        <member name="M:CommonTools.Components.Combinatorics.Permutations`1.System#Collections#Generic#IEnumerable{System#Collections#Generic#IList{T}}#GetEnumerator">
            <summary>
            Gets an enumerator for collecting the list of permutations.
            </summary>
            <returns>The enumerator.</returns>
        </member>
        <member name="M:CommonTools.Components.Combinatorics.Permutations`1.Initialize(System.Collections.Generic.IList{`0},CommonTools.Components.Combinatorics.GenerateOption,System.Collections.Generic.IComparer{`0})">
             <summary>
             Common intializer used by the multiple flavors of constructors.
             </summary>
             <remarks>
             Copies information provided and then creates a parellel int array of lexicographic
             orders that will be used for the actual permutation algorithm.  
             The input array is first sorted as required for WithoutRepetition and always just for consistency.
             This array is constructed one of two way depending on the type of the collection.
            
             When type is MetaCollectionType.WithRepetition, then all N! permutations are returned
             and the lexicographic orders are simply generated as 1, 2, ... N.  
             E.g.
             Input array:          {A A B C D E E}
             Lexicograhpic Orders: {1 2 3 4 5 6 7}
             
             When type is MetaCollectionType.WithoutRepetition, then fewer are generated, with each
             identical element in the input array not repeated.  The lexicographic sort algorithm
             handles this natively as long as the repetition is repeated.
             E.g.
             Input array:          {A A B C D E E}
             Lexicograhpic Orders: {1 1 2 3 4 5 5}
             </remarks>
        </member>
        <member name="M:CommonTools.Components.Combinatorics.Permutations`1.GetCount">
            <summary>
            Calculates the total number of permutations that will be returned.  
            As this can grow very large, extra effort is taken to avoid overflowing the accumulator.  
            While the algorithm looks complex, it really is just collecting numerator and denominator terms
            and cancelling out all of the denominator terms before taking the product of the numerator terms.  
            </summary>
            <returns>The number of permutations.</returns>
        </member>
        <member name="F:CommonTools.Components.Combinatorics.Permutations`1.myValues">
            <summary>
            A list of T that represents the order of elements as originally provided, used for Reset.
            </summary>
        </member>
        <member name="F:CommonTools.Components.Combinatorics.Permutations`1.myLexicographicOrders">
            <summary>
            Parrellel array of integers that represent the location of items in the myValues array.
            This is generated at Initialization and is used as a performance speed up rather that
            comparing T each time, much faster to let the CLR optimize around integers.
            </summary>
        </member>
        <member name="F:CommonTools.Components.Combinatorics.Permutations`1.myCount">
            <summary>
            The count of all permutations.  Calculated at Initialization and returned by Count property.
            </summary>
        </member>
        <member name="F:CommonTools.Components.Combinatorics.Permutations`1.myMetaCollectionType">
            <summary>
            The type of Permutations that this was intialized from.
            </summary>
        </member>
        <member name="P:CommonTools.Components.Combinatorics.Permutations`1.Count">
            <summary>
            The count of all permutations that will be returned.
            If type is MetaCollectionType.WithholdGeneratedSets, then this does not double count permutations with multiple identical values.  
            I.e. count of permutations of "AAB" will be 3 instead of 6.  
            If type is MetaCollectionType.WithRepetition, then this is all combinations and is therefore N!, where N is the number of values.
            </summary>
        </member>
        <member name="P:CommonTools.Components.Combinatorics.Permutations`1.Type">
            <summary>
            The type of Permutations set that is generated.
            </summary>
        </member>
        <member name="P:CommonTools.Components.Combinatorics.Permutations`1.UpperIndex">
            <summary>
            The upper index of the meta-collection, equal to the number of items in the initial set.
            </summary>
        </member>
        <member name="P:CommonTools.Components.Combinatorics.Permutations`1.LowerIndex">
            <summary>
            The lower index of the meta-collection, equal to the number of items returned each iteration.
            For Permutation, this is always equal to the UpperIndex.
            </summary>
        </member>
        <member name="T:CommonTools.Components.Combinatorics.Permutations`1.Enumerator">
            <summary>
            The enumerator that enumerates each meta-collection of the enclosing Permutations class.
            </summary>
        </member>
        <member name="M:CommonTools.Components.Combinatorics.Permutations`1.Enumerator.#ctor(CommonTools.Components.Combinatorics.Permutations{`0})">
            <summary>
            Construct a enumerator with the parent object.
            </summary>
            <param name="source">The source Permutations object.</param>
        </member>
        <member name="M:CommonTools.Components.Combinatorics.Permutations`1.Enumerator.Reset">
            <summary>
            Resets the permutations enumerator to the first permutation.  
            This will be the first lexicographically order permutation.
            </summary>
        </member>
        <member name="M:CommonTools.Components.Combinatorics.Permutations`1.Enumerator.MoveNext">
            <summary>
            Advances to the next permutation.
            </summary>
            <returns>True if successfully moved to next permutation, False if no more permutations exist.</returns>
            <remarks>
            Continuation was tried (i.e. yield return) by was not nearly as efficient.
            Performance is further increased by using value types and removing generics, that is, the LexicographicOrder parellel array.
            This is a issue with the .NET CLR not optimizing as well as it could in this infrequently used scenario.
            </remarks>
        </member>
        <member name="M:CommonTools.Components.Combinatorics.Permutations`1.Enumerator.Dispose">
            <summary>
            Cleans up non-managed resources, of which there are none used here.
            </summary>
        </member>
        <member name="M:CommonTools.Components.Combinatorics.Permutations`1.Enumerator.NextPermutation">
            <summary>
            Calculates the next lexicographical permutation of the set.
            This is a permutation with repetition where values that compare as equal will not 
            swap positions to create a new permutation.
            http://www.cut-the-knot.org/do_you_know/AllPerm.shtml
            E. W. Dijkstra, A Discipline of Programming, Prentice-Hall, 1997  
            </summary>
            <returns>True if a new permutation has been returned, false if not.</returns>
            <remarks>
            This uses the integers of the lexicographical order of the values so that any
            comparison of values are only performed during initialization. 
            </remarks>
        </member>
        <member name="M:CommonTools.Components.Combinatorics.Permutations`1.Enumerator.Swap(System.Int32,System.Int32)">
            <summary>
            Helper function for swapping two elements within the internal collection.
            This swaps both the lexicographical order and the values, maintaining the parallel array.
            </summary>
        </member>
        <member name="F:CommonTools.Components.Combinatorics.Permutations`1.Enumerator.myTemp">
            <summary>
            Single instance of swap variable for T, small performance improvement over declaring in Swap function scope.
            </summary>
        </member>
        <member name="F:CommonTools.Components.Combinatorics.Permutations`1.Enumerator.myKviTemp">
            <summary>
            Single instance of swap variable for int, small performance improvement over declaring in Swap function scope.
            </summary>
        </member>
        <member name="F:CommonTools.Components.Combinatorics.Permutations`1.Enumerator.myPosition">
            <summary>
            Flag indicating the position of the enumerator.
            </summary>
        </member>
        <member name="F:CommonTools.Components.Combinatorics.Permutations`1.Enumerator.myLexicographicalOrders">
            <summary>
            Parrellel array of integers that represent the location of items in the myValues array.
            This is generated at Initialization and is used as a performance speed up rather that
            comparing T each time, much faster to let the CLR optimize around integers.
            </summary>
        </member>
        <member name="F:CommonTools.Components.Combinatorics.Permutations`1.Enumerator.myValues">
            <summary>
            The list of values that are current to the enumerator.
            </summary>
        </member>
        <member name="F:CommonTools.Components.Combinatorics.Permutations`1.Enumerator.myParent">
            <summary>
            The set of permuations that this enumerator enumerates.
            </summary>
        </member>
        <member name="P:CommonTools.Components.Combinatorics.Permutations`1.Enumerator.Current">
            <summary>
            The current permutation.
            </summary>
        </member>
        <member name="P:CommonTools.Components.Combinatorics.Permutations`1.Enumerator.System#Collections#Generic#IEnumerator{System#Collections#Generic#IList{T}}#Current">
            <summary>
            The current permutation.
            </summary>
        </member>
        <member name="T:CommonTools.Components.Combinatorics.Permutations`1.Enumerator.Position">
            <summary>
            Internal position type for tracking enumertor position.
            </summary>
        </member>
        <member name="T:CommonTools.Components.Combinatorics.Permutations`1.SelfComparer`1">
            <summary>
            Inner class that wraps an IComparer around a type T when it is IComparable
            </summary>
        </member>
        <member name="T:CommonTools.Xml.XmlResourceFileManager">
            <summary>
            This class handles xml resource files and uses the HttpContext.Current.Cache object to store them.
            </summary>
            <example>
            
            Xml File MyResource.xml:
            
            &lt;RootNode&gt;
                &lt;Tag TagIdentifier="key1"&gt;my first resource text&lt;/Tag&gt;
                &lt;Tag TagIdentifier="key2"&gt;my second resource text&lt;/Tag&gt;
                &lt;Tag TagIdentifier="key3"&gt;my third resource text&lt;/Tag&gt;
            &lt;/RootNode&gt;
            
            Object usage:
            
            XmlConfigurationFileManager resourceManager = new XmlConfigurationFileManager("MyResource.xml", "LD_", "Tag", "TagIdentifier", new TimeSpan(0, 10, 0));
            string myResource = ResourceManager.GetString("key1");
            
            </example>
        </member>
        <member name="M:CommonTools.Xml.XmlResourceFileManager.GetString(System.String,System.String@)">
            <summary>
            Gets the string from the resource dictionary.
            </summary>
            <param name="key">The identifiying key of the resource to get.</param>
            <param name="text">The out bound resource text of the xml attribute with the specified key.</param>
            <returns>true if the resource was found, false if the key was not found at the resource disctionary</returns>
        </member>
        <member name="M:CommonTools.Xml.XmlResourceFileManager.LoadResource">
            <summary>
            This method returns the dictionary that holds all resources.
            </summary>
            <returns>The dictionary that holds all resources.</returns>
        </member>
        <member name="M:CommonTools.Xml.XmlResourceFileManager.ContainsResource(System.String)">
            <summary>
            Determines whether the specified key is present as a resource.
            </summary>
            <param name="key">The key.</param>
            <returns>
            	<c>true</c> if the specified key contains resource; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:CommonTools.Xml.XmlResourceFileManager.GetString(System.String)">
            <summary>
            Gets the resource text with the given key.
            </summary>
            <param name="key">The key of the resource text to get.</param>
            <returns>The resource text with the given key</returns>
        </member>
        <member name="M:CommonTools.Xml.XmlResourceFileManager.GetString(System.String,System.Object[])">
            <summary>
            Gets the resource text with the given key.
            </summary>
            <param name="key">The key of the resource text to get.</param>
            <param name="args">An System.Object array containing zero or more format items.</param>
            <returns>The resource text with the given key</returns>
        </member>
        <member name="M:CommonTools.Xml.XmlResourceFileManager.#ctor(System.String,System.String,System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:CommonTools.Xml.XmlResourceFileManager"/> class.
            </summary>
            <param name="fileName">Absolute system filename of the file to load.</param>
            <param name="cachePrefix">The cachePrefix to use for this resource dictionary</param>
            <param name="tagName">Name of the tag being the parent of the resource xml nodes.</param>
            <param name="nodeIdentifier">The name of the xml node attribute that identifies the xml element.</param>
        </member>
        <member name="P:CommonTools.Xml.XmlResourceFileManager.CacheKey">
            <summary>
            Gets the cache key used to cache the resource dictionary.
            </summary>
            <value>The cache key.</value>
        </member>
        <member name="T:CommonTools.TextFormatOptions">
            <summary>
            Options to format a string with
            </summary>
        </member>
        <member name="F:CommonTools.TextFormatOptions.RemoveLineBreaks">
            <summary>
            Option to remove all line breaks.
            </summary>
        </member>
        <member name="F:CommonTools.TextFormatOptions.RemoveScriptTags">
            <summary>
            Option to remove all javascript script tags.
            </summary>
        </member>
        <member name="F:CommonTools.TextFormatOptions.RemoveBadSQLCharacters">
            <summary>
            Option to remove characters that can be used for SQL injections.
            </summary>
        </member>
        <member name="F:CommonTools.TextFormatOptions.RemoveBadTags">
            <summary>
            Option to remove the following tags:
            abbr|acronym|address|applet|area|base|basefont|bdo|big|body|button|
            caption|center|cite|code|col|colgroup|dd|del|dir|div|dfn|dl|dt|embed|
            fieldset|font|form|frame|frameset|head|html|iframe|img|input|ins|
            isindex|kbd|label|legend|link|map|menu|meta|noframes|noscript|object|
            optgroup|option|param|pre|q|s|samp|script|select|small|span|strike|
            style|table|tbody|td|textarea|tfoot|th|thead|title|tr|tt|var|xmp
            </summary>
        </member>
        <member name="F:CommonTools.TextFormatOptions.RemoveAllTags">
            <summary>
            Option to remove all html/xml tags from a specified string.
            </summary>
        </member>
        <member name="F:CommonTools.TextFormatOptions.SafeQuerystringParameter">
            <summary>
            Option to transform to a querystring-safe representation.
            </summary>
        </member>
        <member name="F:CommonTools.TextFormatOptions.DefuseScriptTags">
            <summary>
            This method secures script tags by replacing the html tag brackets.
            </summary>
        </member>
        <member name="T:CommonTools.Components.Testing.Gender">
            <summary>
            Enumeration indicating the gender of an avatar
            </summary>
        </member>
        <member name="F:CommonTools.Components.Testing.Gender.Male">
            <summary>
            male
            </summary>
        </member>
        <member name="F:CommonTools.Components.Testing.Gender.Female">
            <summary>
            female
            </summary>
        </member>
        <member name="F:CommonTools.Components.Testing.Gender.Undefined">
            <summary>
            neutrum
            </summary>
        </member>
        <member name="T:CommonTools.Components.Security.DataProtector">
            <summary>
            A class that allows you to encrypt a file using crypt32's CryptProtectData function.
            </summary>
        </member>
        <member name="M:CommonTools.Components.Security.DataProtector.#ctor(CommonTools.Components.Security.DataProtector.Store)">
            <summary>
            Initialises a new instance of DataProtector.
            </summary>
            <param name="tempStore">The registry key to use. Machine or user.</param>
        </member>
        <member name="M:CommonTools.Components.Security.DataProtector.Encrypt(System.Byte[],System.Byte[])">
            <summary>
            Encrypts a block of data (with salt), using DPAPI and return the encrypted data.
            </summary>
            <param name="plainText">The text to encrypt</param>
            <param name="optionalEntropy">Any salt.</param>
            <returns>A DPAPI byte array containing the encrypted data.</returns>
        </member>
        <member name="M:CommonTools.Components.Security.DataProtector.Decrypt(System.Byte[],System.Byte[])">
            <summary>
            Decrypts a block of data using the salt provided and DPAPI to return the decrypted data.
            </summary>
            <param name="cipherText">The text to encrypt</param>
            <param name="optionalEntropy">The salt used to decrypt the data.</param>
            <returns>A DPAPI byte array containing the encrypted data.</returns>
        </member>
        <member name="T:CommonTools.Components.Security.DataProtector.Store">
            <summary>
            Provides information about the store to be used by CryptProtectData.
            Maps to the dwFlags element in that API.
            </summary>
        </member>
        <member name="F:CommonTools.Components.Security.DataProtector.Store.USE_MACHINE_STORE">
            <summary>
            associates the encrypted data to the machine rather than the user.
            </summary>
        </member>
        <member name="F:CommonTools.Components.Security.DataProtector.Store.USE_USER_STORE">
            <summary>
            associates the encrypted data to the user rather than the machine.
            </summary>
        </member>
        <member name="T:CommonTools.Web.UI.TextResourceLiteral">
            <summary>
            
            </summary>
        </member>
        <member name="M:CommonTools.Web.UI.TextResourceLiteral.OnPreRender(System.EventArgs)">
            <summary>
            Raises the <see cref="E:System.Web.UI.Control.PreRender"/> event.
            </summary>
            <param name="e">An <see cref="T:System.EventArgs"/> object that contains the event data.</param>
        </member>
        <member name="M:CommonTools.Web.UI.TextResourceLiteral.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:CommonTools.Web.UI.TextResourceLiteral"/> class.
            </summary>
        </member>
        <member name="P:CommonTools.Web.UI.TextResourceLiteral.TextResourceManager">
            <summary>
            Gets or sets the text resource manager.
            </summary>
            <value>The text resource manager.</value>
        </member>
        <member name="P:CommonTools.Web.UI.TextResourceLiteral.Culture">
            <summary>
            Gets or sets the culture.
            </summary>
            <value>The culture.</value>
        </member>
        <member name="P:CommonTools.Web.UI.TextResourceLiteral.ResourceKey">
            <summary>
            Gets or sets the culture.
            </summary>
            <value>The culture.</value>
        </member>
        <member name="T:CommonTools.Web.Navigation.ISiteMapMenuItem">
            <summary>
            This interface enforces all properties needed for 
            </summary>
        </member>
        <member name="P:CommonTools.Web.Navigation.ISiteMapMenuItem.UrlRewriteItemName">
            <summary>
            Gets the name of the rewrite item.
            </summary>
            <value>The name of the rewrite item.</value>
        </member>
        <member name="P:CommonTools.Web.Navigation.ISiteMapMenuItem.Name">
            <summary>
            Gets the name of the <see cref="T:CommonTools.Web.Navigation.IUrlRewriteItem"/>.
            </summary>
            <value>The name.</value>
        </member>
        <member name="P:CommonTools.Web.Navigation.ISiteMapMenuItem.BreadcrumbTitle">
            <summary>
            Gets the breadcrumb title.
            </summary>
            <value>The breadcrumb title.</value>
        </member>
        <member name="P:CommonTools.Web.Navigation.ISiteMapMenuItem.Title">
            <summary>
            Gets the title.
            </summary>
            <value>The title.</value>
        </member>
        <member name="P:CommonTools.Web.Navigation.ISiteMapMenuItem.ChildNodes">
            <summary>
            Gets the child nodes.
            </summary>
            <value>The child nodes.</value>
        </member>
        <member name="P:CommonTools.Web.Navigation.ISiteMapMenuItem.IsRoot">
            <summary>
            Gets a value indicating whether this instance is the root node.
            </summary>
            <value><c>true</c> if this instance is root; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:CommonTools.Web.Navigation.ISiteMapMenuItem.ParentNode">
            <summary>
            Gets the parent node.
            </summary>
            <value>The parent node.</value>
        </member>
        <member name="P:CommonTools.Web.Navigation.ISiteMapMenuItem.UrlRewriteItem">
            <summary>
            Gets the parent node.
            </summary>
            <value>The parent node.</value>
        </member>
        <member name="T:CommonTools.Web.Navigation.NavigationException">
            <summary>
            
            </summary>
        </member>
        <member name="M:CommonTools.Web.Navigation.NavigationException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:CommonTools.Web.Navigation.NavigationException"/> class.
            </summary>
            <param name="message">The message.</param>
        </member>
        <member name="M:CommonTools.Web.Navigation.NavigationException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:CommonTools.Web.Navigation.NavigationException"/> class.
            </summary>
            <param name="message">The message.</param>
            <param name="inner">The inner.</param>
        </member>
        <member name="T:CommonTools.Web.JavaScript.JsonNameAttribute">
            <summary>
            Specifies the naming to use for a property or field when serializing
            </summary>
        </member>
        <member name="M:CommonTools.Web.JavaScript.JsonNameAttribute.#ctor">
            <summary>
            Ctor
            </summary>
        </member>
        <member name="M:CommonTools.Web.JavaScript.JsonNameAttribute.#ctor(System.String)">
            <summary>
            Ctor
            </summary>
            <param name="jsonName"></param>
        </member>
        <member name="M:CommonTools.Web.JavaScript.JsonNameAttribute.GetJsonName(System.Object)">
            <summary>
            Gets the name specified for use in Json serialization.
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="P:CommonTools.Web.JavaScript.JsonNameAttribute.Name">
            <summary>
            Gets and sets the name to be used in JSON
            </summary>
        </member>
        <member name="T:CommonTools.IO.Csv.ValueTrimmingOptions">
            <summary>
            
            </summary>
        </member>
        <member name="F:CommonTools.IO.Csv.ValueTrimmingOptions.None">
            <summary>
            
            </summary>
        </member>
        <member name="F:CommonTools.IO.Csv.ValueTrimmingOptions.UnquotedOnly">
            <summary>
            
            </summary>
        </member>
        <member name="F:CommonTools.IO.Csv.ValueTrimmingOptions.QuotedOnly">
            <summary>
            
            </summary>
        </member>
        <member name="F:CommonTools.IO.Csv.ValueTrimmingOptions.All">
            <summary>
            
            </summary>
        </member>
        <member name="T:CommonTools.Data.DataAccessManager">
            <summary>
            DataAccessManager provides methods for connecting to SQL Server
            database and running sprocs against that server. Includes support for Parameters.
            You will note that Sproc support isn't really supported by the database-agnostic
            DataAccessFactory, hence the reason for this class.
            </summary>
        </member>
        <member name="M:CommonTools.Data.DataAccessManager.IsFlaggedEnum(System.Enum)">
            <summary>
            What's this for?
            </summary>
            <param name="pEnumToTest"></param>
            <returns></returns>
        </member>
        <member name="M:CommonTools.Data.DataAccessManager.ThrowDataAccessManagerException(System.Data.SqlClient.SqlException,System.String)">
            <summary>|
            Throws the data access manager exception.
            </summary>
            <param name="err">The err.</param>
            <param name="storedProcedureName">Name of the stored procedure.</param>
        </member>
        <member name="M:CommonTools.Data.DataAccessManager.AddOutPutParameter(System.String,System.Data.SqlDbType)">
            <summary>
            This method adds an sql-OUTPUT parameter
            </summary>
            <param name="parameterName">Name of the SQL parameter</param>
            <param name="dbType">SQLDbType of the SQL parameter</param>
        </member>
        <member name="M:CommonTools.Data.DataAccessManager.AddOutPutParameter(System.String,System.Data.SqlDbType,System.Int32)">
            <summary>
            This method adds an sql-OUTPUT parameter
            </summary>
            <param name="parameterName">Name of the SQL parameter</param>
            <param name="dbType">SQLDbType of the SQL parameter</param>
            <param name="Size">Size of the SQL parameter</param>
        </member>
        <member name="M:CommonTools.Data.DataAccessManager.AddInputParameter(System.String,System.Object)">
            <summary>
            This Method adds an sql-INPUT parameter
            </summary>
            <param name="parameterName">Name of the SQL parameter</param>
            <param name="value">Value of the SQL parameter</param>
        </member>
        <member name="M:CommonTools.Data.DataAccessManager.ExecuteTableQuery``1(System.String)">
            <summary>
            This method executes a specified stored procedure and returns the selected record as a datatable.
            </summary>
            <param name="procedureName">Name of the stored procedure.</param>
            <returns>The datatable filled with the records selected by the stored procedure.</returns>
        </member>
        <member name="M:CommonTools.Data.DataAccessManager.ExecuteTableQuery``1(System.String,System.Nullable{System.Int32}@)">
            <summary>
            This method executes a specified stored procedure and returns the selected record as a datatable.
            </summary>
            <param name="procedureName">Name of the stored procedure.</param>
            <param name="returnValue">The return value returned by the stored procedure</param>
            <returns>The datatable filled with the records selected by the stored procedure.</returns>
        </member>
        <member name="M:CommonTools.Data.DataAccessManager.ExecuteTableQuery``1(System.String,System.Collections.Generic.Dictionary{System.String,System.Object}@)">
            <summary>
            This method executes a specified stored procedure and returns the selected record as a datatable.
            </summary>
            <param name="procedureName">Name of the stored procedure.</param>
            <param name="outputValues">A dictionary containing the values of all sql outputparameters.</param>
            <returns>The datatable filled with the records selected by the stored procedure.</returns>
        </member>
        <member name="M:CommonTools.Data.DataAccessManager.ExecuteTableQuery``1(System.String,System.Nullable{System.Int32}@,System.Collections.Generic.Dictionary{System.String,System.Object}@)">
            <summary>
            This method executes a specified stored procedure and returns the selected record as a datatable.
            </summary>
            <param name="procedureName">Name of the stored procedure.</param>
            <param name="returnValue">The return value returned by the stored procedure</param>
            <param name="outputValues">A dictionary containing the values of all sql outputparameters.</param>
            <returns>The datatable filled with the records selected by the stored procedure.</returns>
        </member>
        <member name="M:CommonTools.Data.DataAccessManager.ExecuteDatasetQuery``1(System.String)">
            <summary>
            This method executes a specified stored procedure and returns the selected record as a dataset.
            </summary>
            <param name="procedureName">Name of the stored procedure.</param>
            <returns>The dataset filled with the records selected by the stored procedure.</returns>
        </member>
        <member name="M:CommonTools.Data.DataAccessManager.ExecuteDatasetQuery``1(System.String,System.Nullable{System.Int32}@)">
            <summary>
            This method executes a specified stored procedure and returns the selected record as a dataset.
            </summary>
            <param name="procedureName">Name of the stored procedure.</param>
            <param name="returnValue">The return value returned by the stored procedure</param>
            <returns>The dataset filled with the records selected by the stored procedure.</returns>
        </member>
        <member name="M:CommonTools.Data.DataAccessManager.ExecuteDatasetQuery``1(System.String,System.Collections.Generic.Dictionary{System.String,System.Object}@)">
            <summary>
            This method executes a specified stored procedure and returns the selected record as a dataset.
            </summary>
            <param name="procedureName">Name of the stored procedure.</param>
            <param name="outputValues">A dictionary containing the values of all sql outputparameters.</param>
            <returns>The dataset filled with the records selected by the stored procedure.</returns>
        </member>
        <member name="M:CommonTools.Data.DataAccessManager.ExecuteDatasetQuery``1(System.String,System.Nullable{System.Int32}@,System.Collections.Generic.Dictionary{System.String,System.Object}@)">
            <summary>
            This method executes a specified stored procedure and returns the selected record as a dataset.
            </summary>
            <param name="procedureName">Name of the stored procedure.</param>
            <param name="returnValue">The return value returned by the stored procedure</param>
            <param name="outputValues">A dictionary containing the values of all sql outputparameters.</param>
            <returns>The dataset filled with the records selected by the stored procedure.</returns>
        </member>
        <member name="M:CommonTools.Data.DataAccessManager.ExecuteNonQuery(System.String)">
            <summary>
            This method executes a specified stored procedure that does not return any database record.
            </summary>
            <param name="procedureName">Name of the stored procedure.</param>
            <returns>The number of rows affected</returns>
        </member>
        <member name="M:CommonTools.Data.DataAccessManager.ExecuteNonQuery(System.String,System.Nullable{System.Int32}@)">
            <summary>
            This method executes a specified stored procedure that does not return any database record.
            </summary>
            <param name="procedureName">Name of the stored procedure.</param>
            <param name="returnValue">The return value returned by the stored procedure</param>
            <returns>The number of rows affected</returns>
        </member>
        <member name="M:CommonTools.Data.DataAccessManager.ExecuteNonQuery(System.String,System.Nullable{System.Int32}@,System.Collections.Generic.Dictionary{System.String,System.Object}@)">
            <summary>
            This method executes a specified stored procedure that does not return any database record.
            </summary>
            <param name="procedureName">Name of the stored procedure.</param>
            <param name="returnValue">The return value returned by the stored procedure</param>
            <returns>The number of rows affected</returns>
            <param name="outputValues">A dictionary containing the values of all sql outputparameters.</param>
            <returns>The number of rows affected</returns>
        </member>
        <member name="M:CommonTools.Data.DataAccessManager.ExecuteScalar``1(System.String)">
            <summary>
            This method executes a stored procedure that expects only one scalar value to be returned. 
            </summary>
            <param name="procedureName">Name of the stored procedure.</param>
            <returns>Returns the T object selected by this stored procedure.</returns>
        </member>
        <member name="M:CommonTools.Data.DataAccessManager.ExecuteScalar``1(System.String,System.Nullable{System.Int32}@)">
            <summary>
            This method executes a stored procedure that expects only one scalar value to be returned. 
            </summary>
            <param name="procedureName">Name of the stored procedure.</param>
            <param name="returnValue">The return value returned by the stored procedure.</param>
            <returns>Returns the T object selected by this stored procedure.</returns>
        </member>
        <member name="M:CommonTools.Data.DataAccessManager.#ctor(System.String)">
            <summary>
            Default Constructor
            </summary>
            <param name="connectionString">The DB-ConnectionString to use.</param>
        </member>
        <member name="T:CommonTools.Data.ExcelReader">
            <summary>
            This method can be used to access excel files via an OleDbConnection. The machine the program runs on does not need to have excel installed 
            in order to access and read excel files. In general, an ExcelReader instance is designed to last for one "unit of work" however your application 
            defines that term. A DataContext is lightweight and is not expensive to create. A typical application creates ExcelReader instances at method 
            scope or as a member of short-lived classes that represent a logical set of related database operations.
            </summary>
        </member>
        <member name="M:CommonTools.Data.ExcelReader.IterateOverWorksheetRows(System.String,System.Int32)">
            <summary>
            Iterates over worksheet rows.
            </summary>
            <param name="worksheetName">Name of the worksheet.</param>
            <param name="startIndex">The start index.</param>
            <returns></returns>
        </member>
        <member name="M:CommonTools.Data.ExcelReader.IterateOverWorksheetRows(System.String,System.Int32,System.Int32)">
            <summary>
            Iterates the over worksheet rows.
            </summary>
            <param name="worksheetName">Name of the worksheet.</param>
            <param name="startRowNumber">The start row number.</param>
            <param name="count">The count.</param>
            <returns></returns>
        </member>
        <member name="M:CommonTools.Data.ExcelReader.TryGetValue``1(System.String,System.String,``0@)">
            <summary>
            Tries the read and parse a specified cell value
            </summary>
            <typeparam name="T"></typeparam>
            <param name="worksheetName">Name of the worksheet.</param>
            <param name="cell">The cell.</param>
            <param name="value">The value.</param>
            <returns></returns>
        </member>
        <member name="M:CommonTools.Data.ExcelReader.GetWorksheetNames">
            <summary>
            Gets the worksheet names.
            </summary>
            <returns></returns>
        </member>
        <member name="M:CommonTools.Data.ExcelReader.GetWorksheet(System.String)">
            <summary>
            Gets a specified worksheet.
            </summary>
            <param name="worksheetName">Name of the worksheet.</param>
            <returns></returns>
        </member>
        <member name="M:CommonTools.Data.ExcelReader.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:CommonTools.Data.ExcelReader"/> class.
            </summary>
            <param name="fullFilePath">The full file path.</param>
        </member>
        <member name="M:CommonTools.Data.ExcelReader.#ctor(System.String,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:CommonTools.Data.ExcelReader"/> class.
            </summary>
            <param name="fullFilePath">The full file path of the excel file.</param>
            <param name="tryLocalCopyIfFileIsLocked">if set to true, the excel file is copied to a local file in order to circumvent files that are locked. 
            If this option is used, you have to call the Dispose() method when the reader is not used any more, otherwise the local file copy will 
            not be deleted.</param>
        </member>
        <member name="M:CommonTools.Data.ExcelReader.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
        </member>
        <member name="T:CommonTools.Components.Caching.CacheSectionManager">
            <summary>
            This is the class that's capable of enumerating the cache section of your app.config.
            </summary>
        </member>
        <member name="P:CommonTools.Components.Caching.CacheSectionManager.CacheSection">
            <summary>
            Gets the Cache section settings of the app.config
            </summary>
        </member>
        <member name="T:CommonTools.Components.BusinessTier.MandatoryFieldViolation">
            <summary>
            This class exposes properties indicating a mandatory field violation.
            </summary>
        </member>
        <member name="M:CommonTools.Components.BusinessTier.MandatoryFieldViolation.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:CommonTools.Components.BusinessTier.MandatoryFieldViolation"/> class.
            </summary>
            <param name="propertyName">Name of the property.</param>
        </member>
        <member name="M:CommonTools.Components.BusinessTier.MandatoryFieldViolation.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:CommonTools.Components.BusinessTier.MandatoryFieldViolation"/> class.
            </summary>
            <param name="propertyName">Name of the property.</param>
            <param name="errorMessage">The message</param>
        </member>
        <member name="M:CommonTools.Components.BusinessTier.MandatoryFieldViolation.#ctor(System.String,System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:CommonTools.Components.BusinessTier.MandatoryFieldViolation"/> class.
            </summary>
            <param name="propertyName">Name of the property.</param>
            <param name="errorMessage">The message</param>
            <param name="errorMessageResourceKey">The message resource key</param>
        </member>
        <member name="P:CommonTools.Components.BusinessTier.MandatoryFieldViolation.ErrorMessage">
            <summary>
            Gets or sets the error message.
            </summary>
            <value>The error message.</value>
        </member>
        <member name="P:CommonTools.Components.BusinessTier.MandatoryFieldViolation.ErrorMessageResourceKey">
            <summary>
            Gets or sets the error message resource key.
            </summary>
            <value>The error message resource key.</value>
        </member>
        <member name="P:CommonTools.Components.BusinessTier.MandatoryFieldViolation.PropertyName">
            <summary>
            Gets or sets the name of the property.
            </summary>
            <value>The name of the property.</value>
        </member>
        <member name="T:CommonTools.Core.BaseException">
            <summary>
            
            </summary>
        </member>
        <member name="M:CommonTools.Core.BaseException.GetFormattedErrorMessage(CommonTools.TextFormat)">
            <summary>
            Gets the formatted error message.
            </summary>
            <param name="textFormat">The text format.</param>
            <returns></returns>
        </member>
        <member name="M:CommonTools.Core.BaseException.#ctor(System.Exception,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:CommonTools.Core.BaseException"/> class.
            </summary>
            <param name="innerException">The inner exception.</param>
            <param name="isLogged">if set to <c>true</c> [is logged].</param>
        </member>
        <member name="M:CommonTools.Core.BaseException.#ctor(System.String,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:CommonTools.Core.BaseException"/> class.
            </summary>
            <param name="message">The message.</param>
            <param name="isLogged">if set to <c>true</c> [is logged].</param>
        </member>
        <member name="M:CommonTools.Core.BaseException.#ctor(System.String,System.Exception,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:CommonTools.Core.BaseException"/> class.
            </summary>
            <param name="message">The message.</param>
            <param name="innerException">The inner exception.</param>
            <param name="isLogged">if set to <c>true</c> [is logged].</param>
        </member>
        <member name="P:CommonTools.Core.BaseException.IsLogged">
            <summary>
            Gets or sets a value indicating whether this exception is logged.
            </summary>
            <value><c>true</c> if this instance is logged; otherwise, <c>false</c>.</value>
        </member>
        <member name="T:CommonTools.Components.Security.SimplePassword">
            <summary>
            Class to help you generate a simple alpha-numeric password (or just alphabetical
            if you know how to use CharacterType).
            </summary>
        </member>
        <member name="T:CommonTools.Components.Security.RandomCharactersGenerator">
            <summary>
            Class to help you generate a simple alpha-numeric password (or just alphabetical
            if you know how to use CharacterType).
            </summary>
        </member>
        <member name="M:CommonTools.Components.Security.RandomCharactersGenerator.Generate(System.Int32,CommonTools.Components.Security.CharacterType)">
            <summary>
            Generates the specified length.
            </summary>
            <param name="length">The length.</param>
            <param name="characterType">Type of the character.</param>
            <returns></returns>
        </member>
        <member name="M:CommonTools.Components.Security.RandomCharactersGenerator.Generate(System.Int32,CommonTools.Components.Security.CharacterType,System.Random)">
            <summary>
            Generates a random word with the specified length.
            </summary>
            <param name="length">The length.</param>
            <param name="characterType">Type of the character.</param>
            <param name="r">The r.</param>
            <returns></returns>
        </member>
        <member name="M:CommonTools.Components.Security.RandomCharactersGenerator.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:CommonTools.Components.Security.RandomCharactersGenerator"/> class.
            </summary>
        </member>
        <member name="P:CommonTools.Components.Security.RandomCharactersGenerator.CHARS_LCASE">
            <summary>
            Gets the CHAR s_ LCASE.
            </summary>
            <value>The CHAR s_ LCASE.</value>
        </member>
        <member name="P:CommonTools.Components.Security.RandomCharactersGenerator.CHARS_UCASE">
            <summary>
            Gets the CHAR s_ UCASE.
            </summary>
            <value>The CHAR s_ UCASE.</value>
        </member>
        <member name="P:CommonTools.Components.Security.RandomCharactersGenerator.CHARS_NUMERIC">
            <summary>
            Gets the CHAR s_ NUMERIC.
            </summary>
            <value>The CHAR s_ NUMERIC.</value>
        </member>
        <member name="M:CommonTools.Components.Security.SimplePassword.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:CommonTools.Components.Security.SimplePassword"/> class.
            </summary>
        </member>
        <member name="P:CommonTools.Components.Security.SimplePassword.CHARS_LCASE">
            <summary>
            Gets the CHAR s_ LCASE.
            </summary>
            <value>The CHAR s_ LCASE.</value>
        </member>
        <member name="P:CommonTools.Components.Security.SimplePassword.CHARS_UCASE">
            <summary>
            Gets the CHAR s_ UCASE.
            </summary>
            <value>The CHAR s_ UCASE.</value>
        </member>
        <member name="P:CommonTools.Components.Security.SimplePassword.CHARS_NUMERIC">
            <summary>
            Gets the CHAR s_ NUMERIC.
            </summary>
            <value>The CHAR s_ NUMERIC.</value>
        </member>
        <member name="T:CommonTools.Components.Flash.OpenFlashChart.IChartValue">
            <summary>
            
            </summary>
        </member>
        <member name="P:CommonTools.Components.Flash.OpenFlashChart.IChartValue.Value">
            <summary>
            Gets or sets the value.
            </summary>
            <value>The value.</value>
        </member>
        <member name="T:CommonTools.Components.BusinessTier.BusinessObjectStringSecurityAttribute">
            <summary>
            This attribute can be used for BaseBusinessObject properties in order to enforce constraints.
            </summary>
        </member>
        <member name="M:CommonTools.Components.BusinessTier.BusinessObjectStringSecurityAttribute.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:CommonTools.Components.BusinessTier.BusinessObjectPropertyAttribute"/> class.
            </summary>
        </member>
        <member name="P:CommonTools.Components.BusinessTier.BusinessObjectStringSecurityAttribute.RemoveScriptTags">
            <summary>
            Gets or sets a value indicating whether script tags should be removed prior to SQL insert/update.
            </summary>
            <value><c>true</c> if [remove script tags]; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:CommonTools.Components.BusinessTier.BusinessObjectStringSecurityAttribute.DefuseScriptTags">
            <summary>
            Gets or sets a value indicating whether script tags should be disarmed via tag bracket replacement.
            </summary>
            <value><c>true</c> if [remove script tags]; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:CommonTools.Components.BusinessTier.BusinessObjectStringSecurityAttribute.RemoveBadSQLCharacters">
            <summary>
            Gets or sets a value indicating whether bad SQL Characters should be removed prior to SQL insert/update.
            </summary>
            <value><c>true</c> if [remove script tags]; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:CommonTools.Components.BusinessTier.BusinessObjectStringSecurityAttribute.RemoveBadHtmlTags">
            <summary>
            Gets or sets a value indicating whether bad HTML tags should be removed prior to SQL insert/update.
            </summary>
            <value><c>true</c> if [remove script tags]; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:CommonTools.Components.BusinessTier.BusinessObjectStringSecurityAttribute.ValidatorInstance">
            <summary>
            Gets the validator attribute instance.
            </summary>
            <value></value>
            <returns>The current <see cref="T:System.Configuration.ConfigurationValidatorBase"></see>.</returns>
        </member>
        <member name="T:CommonTools.Components.Testing.UsernameType">
            <summary>
            internally used enumeration for random username generation patterns
            </summary>
        </member>
        <member name="F:CommonTools.Components.Testing.UsernameType.Firstname_Lastname">
            <summary>
            Firstname_Lastname
            </summary>
        </member>
        <member name="F:CommonTools.Components.Testing.UsernameType.F_Lastname">
            <summary>
            F_Lastname
            </summary>
        </member>
        <member name="F:CommonTools.Components.Testing.UsernameType.Firstname_L">
            <summary>
            Firstname_L
            </summary>
        </member>
        <member name="F:CommonTools.Components.Testing.UsernameType.Lastname_Firstname">
            <summary>
            Lastname_Firstname
            </summary>
        </member>
        <member name="F:CommonTools.Components.Testing.UsernameType.L_Firstname">
            <summary>
            L_Firstname
            </summary>
        </member>
        <member name="F:CommonTools.Components.Testing.UsernameType.Lastname_F">
            <summary>
            Lastname_F
            </summary>
        </member>
        <member name="F:CommonTools.Components.Testing.UsernameType.FirstnameLastname">
            <summary>
            FirstnameLastname
            </summary>
        </member>
        <member name="F:CommonTools.Components.Testing.UsernameType.LastnameFirstname">
            <summary>
            LastnameFirstname
            </summary>
        </member>
        <member name="F:CommonTools.Components.Testing.UsernameType.FLastname">
            <summary>
            FLastname
            </summary>
        </member>
        <member name="F:CommonTools.Components.Testing.UsernameType.LFirstname">
            <summary>
            LFirstname
            </summary>
        </member>
        <member name="T:CommonTools.Components.Testing.DummyDataManager">
            <summary>
            This class provides methods to create dummy data that can be used for testing. In order to work, you need
            to provide an XML document containing dummy values for names, streets, cities... The XSD schema for this XML file
            can be found at DummyData.xsd.
            </summary>
        </member>
        <member name="M:CommonTools.Components.Testing.DummyDataManager.GetRandomUsername(System.String,System.String)">
            <summary>
            This method returns a random username which can be used for a DummyUser's username or email address, based on the 
            DummyUser's first and last name
            </summary>
            <param name="firstname">The first name of the DummyUser</param>
            <param name="surname">The surname of the DummyUser</param>
            <returns>A random username which can be used for a DummyUser's username or email address, based on the 
            DummyUser's first and last name</returns>
        </member>
        <member name="M:CommonTools.Components.Testing.DummyDataManager.CreateStreetAddress">
            <summary>
            Creates a random street address for a DummyUser.
            </summary>
            <returns>Returns a random street address for a DummyUser</returns>
        </member>
        <member name="M:CommonTools.Components.Testing.DummyDataManager.CreateMobile">
            <summary>
            Creates a random mobile number.
            </summary>
            <returns>A random mobile number.</returns>
        </member>
        <member name="M:CommonTools.Components.Testing.DummyDataManager.CreatePassword">
            <summary>
            Creates a random password.
            </summary>
            <returns>A random password.</returns>
        </member>
        <member name="M:CommonTools.Components.Testing.DummyDataManager.CreatePostCode">
            <summary>
            Creates a random post code.
            </summary>
            <returns>A random post code.</returns>
        </member>
        <member name="M:CommonTools.Components.Testing.DummyDataManager.CreateTelephone">
            <summary>
            Creates a random telephone number.
            </summary>
            <returns>A random telephone number</returns>
        </member>
        <member name="M:CommonTools.Components.Testing.DummyDataManager.CreateUsername(System.String,System.String)">
            <summary>
            Creates a random username based on the given first name and surname.
            </summary>
            <param name="firstname">The first name of the DummyUser</param>
            <param name="surname">The surname of the DummyUser</param>
            <returns>A random username based on the given first name and surname</returns>
        </member>
        <member name="M:CommonTools.Components.Testing.DummyDataManager.CreateEmail(System.String,System.String)">
            <summary>
            Creates a random email address based on the given first name and surname.
            </summary>
            <param name="firstname">The first name of the DummyUser</param>
            <param name="surname">The surname of the DummyUser</param>
            <returns>A random email address based on the given first name and surname</returns>
        </member>
        <member name="M:CommonTools.Components.Testing.DummyDataManager.GetDummy">
            <summary>
            This method returns a DummyUser object with random property values.
            </summary>
            <returns>A DummyUser object with random property values</returns>
        </member>
        <member name="M:CommonTools.Components.Testing.DummyDataManager.GetDummyFilePath">
            <summary>
            Gets a random file path.
            </summary>
            <returns>A random file path.</returns>
        </member>
        <member name="M:CommonTools.Components.Testing.DummyDataManager.GetDummyIconFilePath">
            <summary>
            Gets a random icon file path.
            </summary>
            <returns>A random icon file path.</returns>
        </member>
        <member name="M:CommonTools.Components.Testing.DummyDataManager.GetDummyImageFilePath">
            <summary>
            Gets a random image file path.
            </summary>
            <returns>A random image file path.</returns>
        </member>
        <member name="M:CommonTools.Components.Testing.DummyDataManager.GetDummySongFilePath">
            <summary>
            Gets a random song file path.
            </summary>
            <returns>A random song file path.</returns>
        </member>
        <member name="M:CommonTools.Components.Testing.DummyDataManager.GetDummyVideoFilePath">
            <summary>
            Gets a random video file path.
            </summary>
            <returns>A random video file path.</returns>
        </member>
        <member name="M:CommonTools.Components.Testing.DummyDataManager.GetDummyText(System.Int32,System.Int32)">
            <summary>
            Gets a random text.
            </summary>
            <param name="minLength">The minimum character length of the text.</param>
            <param name="maxLength">The maximum character length of the text.</param>
            <returns>A random text.</returns>
        </member>
        <member name="M:CommonTools.Components.Testing.DummyDataManager.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:CommonTools.Components.Testing.DummyDataManager"/> class.
            </summary>
            <param name="xmlDummyData">An XML document containing dummy values. The XSD schema for this XML file
            can be found at DummyData.xsd</param>
        </member>
        <member name="P:CommonTools.Components.Testing.DummyDataManager.MaxUsernameLength">
            <summary>
            Gets or sets the maximum character length of a DummyUser's username.
            </summary>
            <value>The maximum character length of a DummyUser's username.</value>
        </member>
        <member name="P:CommonTools.Components.Testing.DummyDataManager.MinUsernameLength">
            <summary>
            Gets or sets the minimum character length of a DummyUser's username.
            </summary>
            <value>The minimum character length of a DummyUser's username.</value>
        </member>
        <member name="P:CommonTools.Components.Testing.DummyDataManager.MaxPasswordLength">
            <summary>
            Gets or sets the maximum character length of a DummyUser's password.
            </summary>
            <value>The maximum character length of a DummyUser's password.</value>
        </member>
        <member name="P:CommonTools.Components.Testing.DummyDataManager.MinPasswordLength">
            <summary>
            Gets or sets the minimum character length of a DummyUser's password.
            </summary>
            <value>The minimum character length of a DummyUser's password.</value>
        </member>
        <member name="P:CommonTools.Components.Testing.DummyDataManager.MinAgeInYears">
            <summary>
            Gets or sets the minimum age of a DummyUser in years.
            </summary>
            <value>The minimum age of a DummyUser in years.</value>
        </member>
        <member name="P:CommonTools.Components.Testing.DummyDataManager.MaxAgeInYears">
            <summary>
            Gets or sets the maximum age of a DummyUser in years.
            </summary>
            <value>The maximum age of a DummyUser in years.</value>
        </member>
        <member name="P:CommonTools.Components.Testing.DummyDataManager.MaleFirstnames">
            <summary>
            Gets a list of all male firstnames.
            </summary>
            <value>A list of all male firstnames.</value>
        </member>
        <member name="P:CommonTools.Components.Testing.DummyDataManager.FemaleFirstnames">
            <summary>
            Gets a list of all female firstnames.
            </summary>
            <value>A list of all female firstnames.</value>
        </member>
        <member name="P:CommonTools.Components.Testing.DummyDataManager.Surnames">
            <summary>
            Gets a list of all surnames.
            </summary>
            <value>A list of all surnames.</value>
        </member>
        <member name="P:CommonTools.Components.Testing.DummyDataManager.EmailProviders">
            <summary>
            Gets a list of all email providers.
            </summary>
            <value>A list of all email providers.</value>
        </member>
        <member name="P:CommonTools.Components.Testing.DummyDataManager.TextContents">
            <summary>
            Gets a list of all text contents.
            </summary>
            <value>A list of all text contents.</value>
        </member>
        <member name="P:CommonTools.Components.Testing.DummyDataManager.Streets">
            <summary>
            Gets a list of all streets.
            </summary>
            <value>A list of all streets.</value>
        </member>
        <member name="P:CommonTools.Components.Testing.DummyDataManager.Cities">
            <summary>
            Gets a list of all cities.
            </summary>
            <value>A list of all cities.</value>
        </member>
        <member name="P:CommonTools.Components.Testing.DummyDataManager.ImageLocations">
            <summary>
            Gets a list of all image locations.
            </summary>
            <value>A list of all image locations.</value>
        </member>
        <member name="P:CommonTools.Components.Testing.DummyDataManager.IconLocations">
            <summary>
            Gets a list of all icon locations.
            </summary>
            <value>A list of all icon locations.</value>
        </member>
        <member name="P:CommonTools.Components.Testing.DummyDataManager.VideoLocations">
            <summary>
            Gets a list of all video locations.
            </summary>
            <value>A list of all video locations.</value>
        </member>
        <member name="P:CommonTools.Components.Testing.DummyDataManager.FileLocations">
            <summary>
            Gets a list of all file locations.
            </summary>
            <value>A list of all file locations.</value>
        </member>
        <member name="P:CommonTools.Components.Testing.DummyDataManager.SongLocations">
            <summary>
            Gets a list of all song locations.
            </summary>
            <value>A list of all song locations.</value>
        </member>
        <member name="T:CommonTools.Web.Navigation.IUrlRewriteController">
            <summary>
            The IUrlRewriteController provides a collection of IUrlRewriteItems.
            </summary>
        </member>
        <member name="M:CommonTools.Web.Navigation.IUrlRewriteController.CreateUrlRewriteControllerInstance">
            <summary>
            Creates an instance of this object's default controller.
            </summary>
            <returns></returns>
        </member>
        <member name="M:CommonTools.Web.Navigation.IUrlRewriteController.GetUrlRewriteItem(System.String)">
            <summary>
            Gets an IUrlRewriteItem from the IUrlRewriteItem collection by name
            </summary>
            <param name="name">The name</param>
            <returns></returns>
        </member>
        <member name="P:CommonTools.Web.Navigation.IUrlRewriteController.UrlRewriteItems">
            <summary>
            Gets the IUrlRewriteItem collection associated with this IUrlRewriteController.
            </summary>
            <value>The UrlRewrite items.</value>
        </member>
        <member name="P:CommonTools.Web.Navigation.IUrlRewriteController.SitemapUrlsCacheDurationInSeconds">
            <summary>
            Gets the sitemap urls cache duration in seconds.
            </summary>
            <value>The sitemap urls cache duration in seconds.</value>
        </member>
        <member name="P:CommonTools.Web.Navigation.IUrlRewriteController.SitemapUrlsCacheKey">
            <summary>
            Gets the sitemap urls cache key.
            </summary>
            <value>The sitemap urls cache key.</value>
        </member>
        <member name="P:CommonTools.Web.Navigation.IUrlRewriteController.SitemapUrlsCacheItemPriority">
            <summary>
            Gets the sitemap urls cache item priority.
            </summary>
            <value>The sitemap urls cache item priority.</value>
        </member>
        <member name="M:CommonTools.Web.Navigation.WebSitemapWrapper.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:CommonTools.Web.Navigation.WebSitemapWrapper"/> class.
            </summary>
        </member>
        <member name="P:CommonTools.Web.Navigation.WebSitemapWrapper.Nodes">
            <summary>
            Gets all sitemap nodes
            </summary>
            <value>The nodes.</value>
        </member>
        <member name="T:CommonTools.Web.JavaScript.JsonToken">
            <summary>
            Parse Tokens
            </summary>
        </member>
        <member name="T:CommonTools.Components.Threading.IJobItem">
            <summary>
            Provides the base interface for the job configuration section.
            </summary>
        </member>
        <member name="P:CommonTools.Components.Threading.IJobItem.Enabled">
            <summary>
            Defines whether this job is enabled or not
            </summary>
        </member>
        <member name="P:CommonTools.Components.Threading.IJobItem.EnableShutDown">
            <summary>
            Shuts down the thread on close down.
            </summary>
        </member>
        <member name="P:CommonTools.Components.Threading.IJobItem.Minutes">
            <summary>
            (Deprecated, use Period instead) Defines the interval for the thread.
            </summary>
        </member>
        <member name="P:CommonTools.Components.Threading.IJobItem.Seconds">
            <summary>
            (Deprecated, use Period instead) Defines the interval for the thread.
            </summary>
        </member>
        <member name="P:CommonTools.Components.Threading.IJobItem.Period">
            <summary>
            Gets or sets the period.
            </summary>
            <value>
            The period.
            </value>
        </member>
        <member name="P:CommonTools.Components.Threading.IJobItem.UsePreciseTimer">
            <summary>
            Gets or sets a value indicating whether this job should use a precise timer. Set this value to true if you need millisecond precision
            job execution.
            </summary>
        </member>
        <member name="P:CommonTools.Components.Threading.IJobItem.PreciseTimerCallbackMode">
            <summary>
            If the UsePreciseTimer flag is set to true, this value indicates whether the actual callbacks should be fired off as asynchonous delegates or
            iteratively. If you use Async, make sure that the callbacks are thread-safe.
            </summary>
        </member>
        <member name="P:CommonTools.Components.Threading.IJobItem.ExecuteOnOwnThread">
            <summary>
            Determines whether to run the job on it's own thread or on the general thread.
            </summary>
        </member>
        <member name="P:CommonTools.Components.Threading.IJobItem.FirstRunAtInitialization">
            <summary>
            Determines whether this job should execute immediately at the global Jobs instanciation or
            wait for the first interval.
            </summary>
            <example>
            
                Job A: Minutes = 10, FirstRunAtInitialization = true
                Job B: Minutes = 10, FirstRunAtInitialization = false
            
            CommonTools.Components.Threading.Jobs.Instance().Start(); // executed at 14:00:00.000
            
            Job A executes at 14:00:00.000, 14:10:00.000, 14:20:00.000, ...
            Job B executes at 14:10:00.000, 14:20:00.000, 14:30:00.000, ...
            
            </example>
            <value></value>
        </member>
        <member name="P:CommonTools.Components.Threading.IJobItem.Name">
            <summary>
            The name of the job
            </summary>
        </member>
        <member name="P:CommonTools.Components.Threading.IJobItem.Type">
            <summary>
            
            </summary>
        </member>
        <member name="P:CommonTools.Components.Threading.IJobItem.Options">
            <summary>
            Any other options that may appear in the config file.
            </summary>
        </member>
        <member name="P:CommonTools.Components.Threading.IJobItem.ExecuteDaily">
            <summary>
            Gets or sets a value indicating whether to execute this job daily at a determined time.
            </summary>
            <value><c>true</c> if [execute daily]; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:CommonTools.Components.Threading.IJobItem.DailyUTCExecutionTime">
            <summary>
            Gets or sets the time of the day that this job should execute on a daily basis.
            </summary>
            <value>The execute daily at.</value>
        </member>
        <member name="P:CommonTools.Components.Threading.IJobItem.DailyLocalizedExecutionTime">
            <summary>
            Gets or sets the daily localized execution time.
            </summary>
            <value>
            The daily localized execution time.
            </value>
        </member>
        <member name="P:CommonTools.Components.Threading.IJobItem.DailyLocalizedExecutionTimeZoneName">
            <summary>
            Gets or sets the name of the daily localized execution time zone.
            </summary>
            <value>
            The name of the daily localized execution time zone.
            </value>
        </member>
        <member name="T:CommonTools.Components.TextResources.TextResourceManagerException">
            <summary>
            Exceptions that can be thrown by the CommonTools.Components.TextResources.TextResourceManagerException class.
            </summary>
        </member>
        <member name="M:CommonTools.Components.TextResources.TextResourceManagerException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:CommonTools.Components.TextResources.TextResourceManagerException"/> class.
            </summary>
            <param name="message">The message.</param>
        </member>
        <member name="M:CommonTools.Components.TextResources.TextResourceManagerException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:CommonTools.Components.TextResources.TextResourceManagerException"/> class.
            </summary>
            <param name="message">The message.</param>
            <param name="innerException">The inner exception.</param>
        </member>
        <member name="T:CommonTools.Components.Security.CharacterType">
            <summary>
            
            </summary>
        </member>
        <member name="F:CommonTools.Components.Security.CharacterType.LowerCase">
            <summary>
            Only use lower case characters.
            </summary>
        </member>
        <member name="F:CommonTools.Components.Security.CharacterType.UpperCase">
            <summary>
            Only use upper case characters.
            </summary>
        </member>
        <member name="F:CommonTools.Components.Security.CharacterType.LowerUpperCase">
            <summary>
            Use only alphabetic characters.
            </summary>
        </member>
        <member name="F:CommonTools.Components.Security.CharacterType.Numbers">
            <summary>
            Use only numbers.
            </summary>
        </member>
        <member name="F:CommonTools.Components.Security.CharacterType.NumbersUpperCase">
            <summary>
            Alphanumeric but all upper case.
            </summary>
        </member>
        <member name="F:CommonTools.Components.Security.CharacterType.NumbersLowerCase">
            <summary>
            Alphanumeric but all lower case.
            </summary>
        </member>
        <member name="F:CommonTools.Components.Security.CharacterType.NumbersUpperLowerCase">
            <summary>
            Alphanumeric
            </summary>
        </member>
        <member name="T:CommonTools.Components.Flash.OpenFlashChart.LineChartType">
            <summary>
            
            </summary>
        </member>
        <member name="F:CommonTools.Components.Flash.OpenFlashChart.LineChartType.Line">
            <summary>
            
            </summary>
        </member>
        <member name="F:CommonTools.Components.Flash.OpenFlashChart.LineChartType.LineDot">
            <summary>
            
            </summary>
        </member>
        <member name="F:CommonTools.Components.Flash.OpenFlashChart.LineChartType.LineHollow">
            <summary>
            
            </summary>
        </member>
        <member name="T:CommonTools.Components.Flash.OpenFlashChart.Charts.PieChart">
            <summary>
            
            </summary>
        </member>
        <member name="T:CommonTools.Components.Flash.OpenFlashChart.ChartBase">
            <summary>
            
            </summary>
        </member>
        <member name="M:CommonTools.Components.Flash.OpenFlashChart.ChartBase.#ctor(CommonTools.Components.Flash.OpenFlashChart.ChartType,System.Collections.Generic.List{CommonTools.Components.Flash.OpenFlashChart.IChartValue})">
            <summary>
            Initializes a new instance of the <see cref="T:CommonTools.Components.Flash.OpenFlashChart.ChartBase"/> class.
            </summary>
            <param name="chartType">Type of the chart.</param>
            <param name="values">The values.</param>
        </member>
        <member name="P:CommonTools.Components.Flash.OpenFlashChart.ChartBase.Colour">
            <summary>
            Gets or sets the colour.
            </summary>
            <value>The colour.</value>
        </member>
        <member name="P:CommonTools.Components.Flash.OpenFlashChart.ChartBase.Values">
            <summary>
            Gets or sets the values.
            </summary>
            <value>The values.</value>
        </member>
        <member name="P:CommonTools.Components.Flash.OpenFlashChart.ChartBase.Fontsize">
            <summary>
            Gets or sets the fontsize.
            </summary>
            <value>The fontsize.</value>
        </member>
        <member name="P:CommonTools.Components.Flash.OpenFlashChart.ChartBase.Text">
            <summary>
            Gets or sets the text.
            </summary>
            <value>The text.</value>
        </member>
        <member name="P:CommonTools.Components.Flash.OpenFlashChart.ChartBase.Tip">
            <summary>
            Gets or sets the tip.
            </summary>
            <value>The tip.</value>
        </member>
        <member name="P:CommonTools.Components.Flash.OpenFlashChart.ChartBase.Fillalpha">
            <summary>
            Gets or sets the fillalpha.
            </summary>
            <value>The fillalpha.</value>
        </member>
        <member name="P:CommonTools.Components.Flash.OpenFlashChart.ChartBase.Type">
            <summary>
            Gets or sets the type.
            </summary>
            <value>The type.</value>
        </member>
        <member name="P:CommonTools.Components.Flash.OpenFlashChart.ChartBase.ChartType">
            <summary>
            Gets or sets the type of the chart.
            </summary>
            <value>The type of the chart.</value>
        </member>
        <member name="M:CommonTools.Components.Flash.OpenFlashChart.Charts.PieChart.#ctor(System.Collections.Generic.List{CommonTools.Components.Flash.OpenFlashChart.IChartValue})">
            <summary>
            Initializes a new instance of the <see cref="T:CommonTools.Components.Flash.OpenFlashChart.Charts.PieChart"/> class.
            </summary>
            <param name="values">The values.</param>
        </member>
        <member name="P:CommonTools.Components.Flash.OpenFlashChart.Charts.PieChart.Colours">
            <summary>
            Gets or sets the colours.
            </summary>
            <value>The colours.</value>
        </member>
        <member name="P:CommonTools.Components.Flash.OpenFlashChart.Charts.PieChart.Border">
            <summary>
            Gets or sets the border.
            </summary>
            <value>The border.</value>
        </member>
        <member name="P:CommonTools.Components.Flash.OpenFlashChart.Charts.PieChart.Alpha">
            <summary>
            Gets or sets the alpha.
            </summary>
            <value>The alpha.</value>
        </member>
        <member name="P:CommonTools.Components.Flash.OpenFlashChart.Charts.PieChart.DoAnimate">
            <summary>
            Gets or sets a value indicating whether [do animate].
            </summary>
            <value><c>true</c> if [do animate]; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:CommonTools.Components.Flash.OpenFlashChart.Charts.PieChart.StartAngle">
            <summary>
            Gets or sets the start angle.
            </summary>
            <value>The start angle.</value>
        </member>
        <member name="P:CommonTools.Components.Flash.OpenFlashChart.Charts.PieChart.GradientFill">
            <summary>
            Gets or sets a value indicating whether [do animate].
            </summary>
            <value><c>true</c> if [do animate]; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:CommonTools.Components.Flash.OpenFlashChart.Charts.PieChart.HideLabels">
            <summary>
            Gets or sets a value indicating whether [do animate].
            </summary>
            <value><c>true</c> if [do animate]; otherwise, <c>false</c>.</value>
        </member>
        <member name="T:CommonTools.Components.Caching.TriggerAsynchronousFetchStatus">
            <summary>
            
            </summary>
        </member>
        <member name="F:CommonTools.Components.Caching.TriggerAsynchronousFetchStatus.SucessfullyInitialized">
            <summary>
            
            </summary>
        </member>
        <member name="F:CommonTools.Components.Caching.TriggerAsynchronousFetchStatus.AlreadyFetching">
            <summary>
            
            </summary>
        </member>
        <member name="T:CommonTools.Components.Caching.ClusteredCacheManager">
             <summary>
             This class handles HttpRuntime Cache synchronization on a cluster using SQL Server 2005 service broker
             query notifications. It basically stores all keys from the HttpRuntime.Cache collection at a database
             which has to have Service Broker enabled (sql command: ALTER DATABASE MyDatabase SET ENABLE_BROKER, only 
             works on SQL Server 2005 Enterprise Edition).
             </summary>
             <example>
             <![CDATA[
                 
                 // ****************************************
                 // Service Broker mode:
                 // ----------------------------------------
                 
                 // this could be called at global.asax
                 ClusteredCacheManager.RestartSQLDependencyListener("myConnectionString");
             
                 string cacheKey1 = "ck_1";
                 int oldCacheValue = 1;
                 int newCacheValue = 2;
                 
                 ClusteredCacheManager.AddCacheItem(cacheKey1, oldCacheValue, CacheItemPriority.Normal);
                 
                 // get the value from cache -> test == 1
                 int test = ClusteredCacheManager.GetCacheItem(cacheKey1, delegate() { return newCacheValue; }, CacheItemPriority.Normal));
                 
                 // purge from cache
                 ClusteredCacheManager.PurgeCacheItem(cacheKey1);
                 
                 // this call should refresh the cache... -> test == 2
                 cachedValue = ClusteredCacheManager.GetCacheItem(cacheKey1, delegate() { return newCacheValue; }, CacheItemPriority.Normal));
            
                 
                 // this could be called at global.asax
                 ClusteredCacheManager.StopSQLDependencyListener();
                 
             
                 // ****************************************
                 // CheckAtRequest mode:
                 // ----------------------------------------
                 
                 string cacheKey1 = "ck_1";
                 int oldCacheValue = 1;
                 int newCacheValue = 2;
                 
                 ClusteredCacheManager.AddCacheItem(cacheKey1, oldCacheValue, CacheItemPriority.Normal);
                 
                 // get the value from cache -> test == 1
                 int test = ClusteredCacheManager.GetCacheItem(cacheKey1, delegate() { return newCacheValue; }, CacheItemPriority.Normal));
                 
                 // purge from cache
                 ClusteredCacheManager.PurgeCacheItem(cacheKey1);
                 
                 // this call should refresh the cache... -> test == 2
                 cachedValue = ClusteredCacheManager.GetCacheItem(cacheKey1, delegate() { return newCacheValue; }, CacheItemPriority.Normal));
            
                 // remove dependency and cache...
                 ClusteredCacheManager.RemoveDependecy(cacheKey1);
                 
                 // the cachedValue will be null...
                 cachedValue = ClusteredCacheManager.GetCacheItem(cacheKey1, delegate() { return newCacheValue; }, CacheItemPriority.Normal));
             ]]>
             </example>
             <remarks>
             THIS METHOD IS NOT PROPERLY TESTED YET (Roman Majeski, 09.05.2008)!
             </remarks>
        </member>
        <member name="M:CommonTools.Components.Caching.ClusteredCacheManager.SetCheckAtRequestIsUpToDateDelayInMilliseconds(System.Int32)">
            <summary>
            Sets the CheckAtRequestIsUpToDateDelayInMilliseconds attribute of the current ClusteredCacheController. This method is 
            used for testing purposes only.
            </summary>
            <param name="milliseconds">The value.</param>
        </member>
        <member name="M:CommonTools.Components.Caching.ClusteredCacheManager.GetFormattedStoredProcedureName(System.String)">
            <summary>
            Gets the name of the formatted stored procedure ( = prefix + stored procedure name).
            </summary>
            <param name="storedProcedure">The procedure</param>
            <returns></returns>
        </member>
        <member name="M:CommonTools.Components.Caching.ClusteredCacheManager.OnChange(System.Object,System.Data.SqlClient.SqlNotificationEventArgs)">
            <summary>
            Called when an sql dependency fires.
            </summary>
            <param name="sender">The sender.</param>
            <param name="e">The <see cref="T:System.Data.SqlClient.SqlNotificationEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:CommonTools.Components.Caching.ClusteredCacheManager.GetDependencyIDFromCacheKey(System.String)">
            <summary>
            Gets the dependency ID from cache key.
            </summary>
            <param name="key">The key.</param>
            <returns></returns>
        </member>
        <member name="M:CommonTools.Components.Caching.ClusteredCacheManager.GetCheckAtRequestInfo(System.Int64)">
            <summary>
            Gets the check at request info.
            </summary>
            <param name="ticks">The ticks.</param>
            <returns></returns>
        </member>
        <member name="M:CommonTools.Components.Caching.ClusteredCacheManager.RemoveAllDependecies">
            <summary>
            Removes an sql dependecy set on a HttpRuntime.Cache key. This method only removes
            the dependency, it does not purge the actual item from cache.
            </summary>
        </member>
        <member name="M:CommonTools.Components.Caching.ClusteredCacheManager.RemoveDependecy(System.String)">
            <summary>
            Removes an sql dependecy set on a HttpRuntime.Cache key. This method only removes
            the dependency, it does not purge the actual item from cache.
            </summary>
            <param name="key">The cache key.</param>
        </member>
        <member name="M:CommonTools.Components.Caching.ClusteredCacheManager.HasDependency(System.String)">
            <summary>
            Determines whether a certain cache element has a cache dependency on the local machine.
            </summary>
            <param name="key">The key.</param>
        </member>
        <member name="M:CommonTools.Components.Caching.ClusteredCacheManager.PurgeCacheItem(System.String)">
            <summary>
            Purges a clustered cache item from cache. Calling this method purges the cache record
            associated with the specified key from all machines on the cluster.
            </summary>
            <param name="key">The cache key.</param>
        </member>
        <member name="M:CommonTools.Components.Caching.ClusteredCacheManager.IsUpToDate(System.String,System.Int64@)">
            <summary>
            Determines whether [is up to date] [the specified key].
            </summary>
            <param name="key">The key.</param>
            <param name="synchTicks">The synch ticks.</param>
            <returns></returns>
        </member>
        <member name="M:CommonTools.Components.Caching.ClusteredCacheManager.GetCacheItem(System.String,CommonTools.Components.Caching.ClusteredCacheManager.ReloadObjectAtCache,System.Web.Caching.CacheItemPriority)">
            <summary>
            Gets an item with a specified key from the HttpRuntime.Cache.
            </summary>
            <param name="key">The cache key.</param>
            <param name="loadObj">The delegate returning the item to insert into cache when it doesn't exist.</param>
            <param name="priority">The priority.</param>
            <returns>
            The cached item when present at HttpRuntime.Cache, the loadObj delegate (which re-adds the item
            at cache) when the item can't be found at cache, null if the cache item dependency doesn't exist
            or the loadObj delegate returned null.
            </returns>
        </member>
        <member name="M:CommonTools.Components.Caching.ClusteredCacheManager.GetCacheItem(System.String,CommonTools.Components.Caching.ClusteredCacheManager.ReloadObjectAtCache,System.Web.Caching.CacheItemPriority,System.Boolean)">
            <summary>
            Gets an item with a specified key from the HttpRuntime.Cache.
            </summary>
            <param name="key">The cache key.</param>
            <param name="loadObj">The delegate returning the item to insert into cache when it doesn't exist.</param>
            <param name="priority">The priority.</param>
            <param name="autoInsertDependency">If set to true, a dependency will be automatically created when no cache
            dependency is currently set. If this value is false and you try to retrieve an item from cache that was not added
            first, this method will return null.</param>
            <returns>
            The cached item when present at HttpRuntime.Cache, the loadObj delegate (which re-adds the item
            at cache) when the item can't be found at cache, null if the cache item dependency doesn't exist and autoInsertDependency
            is set to false or the loadObj delegate returned null.
            </returns>
        </member>
        <member name="M:CommonTools.Components.Caching.ClusteredCacheManager.AddCacheItem(System.String,System.Object,System.Web.Caching.CacheItemPriority)">
            <summary>
            Adds an object to the HttpRuntime.Cache collection and sets an SQL Dependency on it's
            key.
            </summary>
            <param name="key">The cache key.</param>
            <param name="item">The item to add to the cache.</param>
            <param name="priority">The priority.</param>
        </member>
        <member name="M:CommonTools.Components.Caching.ClusteredCacheManager.RestartSQLDependencyListener(System.String)">
            <summary>
            Restarts the SQL dependency listener. This is only necessary if you are running the
            clustered cache component in service broker mode. 
            </summary>
            <param name="connectionString">The connection string.</param>
        </member>
        <member name="M:CommonTools.Components.Caching.ClusteredCacheManager.StopSQLDependencyListener">
            <summary>
            Stops the SQL dependency listener. This is only necessary if you are running the
            clustered cache component in service broker mode.
            </summary>
        </member>
        <member name="P:CommonTools.Components.Caching.ClusteredCacheManager.ConnectionString">
            <summary>
            Gets the connection string.
            </summary>
            <value>The connection string.</value>
        </member>
        <member name="P:CommonTools.Components.Caching.ClusteredCacheManager.StoredProcedurePrefix">
            <summary>
            Gets the connection string.
            </summary>
            <value>The connection string.</value>
        </member>
        <member name="P:CommonTools.Components.Caching.ClusteredCacheManager.CheckAtRequestDependencies">
            <summary>
            Gets the check at request dependencies.
            </summary>
            <value>The check at request dependencies.</value>
        </member>
        <member name="P:CommonTools.Components.Caching.ClusteredCacheManager.CachingMode">
            <summary>
            Gets the caching mode.
            </summary>
            <value>The caching mode.</value>
        </member>
        <member name="T:CommonTools.Components.Caching.ClusteredCacheManager.ReloadObjectAtCache">
            <summary>
            
            </summary>
        </member>
        <member name="T:CommonTools.Components.BusinessTier.BusinessObjectCacheAttribute">
            <summary>
            
            </summary>
        </member>
        <member name="M:CommonTools.Components.BusinessTier.BusinessObjectCacheAttribute.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:CommonTools.Components.BusinessTier.BusinessObjectCacheAttribute"/> class.
            </summary>
            <param name="configSectionKey">The config section key.</param>
        </member>
        <member name="P:CommonTools.Components.BusinessTier.BusinessObjectCacheAttribute.ConfigSectionKey">
            <summary>
            Gets the config section key.
            </summary>
            <value>The config section key.</value>
        </member>
        <member name="T:CommonTools.Web.UI.JobViewTheme">
            <summary>
            Provides a configuration flag that enables the developer to colour in their job visualisers.
            </summary>
        </member>
        <member name="F:CommonTools.Web.UI.JobViewTheme.None">
            <summary>
            Porvides a plain job visualiser without styles.
            </summary>
        </member>
        <member name="F:CommonTools.Web.UI.JobViewTheme.Default">
            <summary>
            Provides default formatting for the job visualiser.
            </summary>
        </member>
        <member name="T:CommonTools.Web.Navigation.SiteMapUrls">
            <summary>
            This class handles sitemap nodes.
            </summary>
        </member>
        <member name="M:CommonTools.Web.Navigation.SiteMapUrls.FindNodeByResourceKey(System.String)">
            <summary>
            Finds the node by resource key.
            </summary>
            <param name="name">The name.</param>
            <returns></returns>
        </member>
        <member name="M:CommonTools.Web.Navigation.SiteMapUrls.GetPath(System.String)">
            <summary>
            Gets the path.
            </summary>
            <param name="key">The resourceKey of the sitemapnode</param>
            <returns></returns>
        </member>
        <member name="M:CommonTools.Web.Navigation.SiteMapUrls.GetPath(System.String,System.String[])">
            <summary>
            Gets the path.
            </summary>
            <param name="key">The resourceKey of the sitemapnode</param>
            <param name="args">The arguments to replace the path of the SitemapNode with.</param>
            <returns></returns>
        </member>
        <member name="M:CommonTools.Web.Navigation.SiteMapUrls.GetMatchingRewrite(System.String)">
            <summary>
            Gets the matching rewrite.
            </summary>
            <param name="pattern">The pattern to match</param>
            <returns></returns>
        </member>
        <member name="M:CommonTools.Web.Navigation.SiteMapUrls.GetMatchingRewriteItem(System.String)">
            <summary>
            Gets the matching rewrite item. This method is intended for testing, don't use it in production because it is
            inefficient.
            </summary>
            <param name="pathAndQuery">The path and query url.</param>
            <returns></returns>
        </member>
        <member name="M:CommonTools.Web.Navigation.SiteMapUrls.Reload">
            <summary>
            Reloads the site map.
            </summary>
        </member>
        <member name="M:CommonTools.Web.Navigation.SiteMapUrls.Instance">
            <summary>
            Instances this instance.
            </summary>
            <returns></returns>
        </member>
        <member name="M:CommonTools.Web.Navigation.SiteMapUrls.Instance(CommonTools.Web.Navigation.IUrlRewriteController)">
            <summary>
            Instances the specified controller.
            </summary>
            <param name="controller">The controller.</param>
            <returns></returns>
        </member>
        <member name="M:CommonTools.Web.Navigation.SiteMapUrls.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:CommonTools.Web.Navigation.SiteMapUrls"/> class.
            </summary>
        </member>
        <member name="P:CommonTools.Web.Navigation.SiteMapUrls.Controller">
            <summary>
            Gets the controller.
            </summary>
            <value>The controller.</value>
        </member>
        <member name="P:CommonTools.Web.Navigation.SiteMapUrls.Item(System.String)">
            <summary>
            Gets the <see cref="T:CommonTools.Web.Navigation.IUrlRewriteItem"/> with the specified resource key.
            </summary>
            <value></value>
        </member>
        <member name="T:CommonTools.Web.Navigation.SiteMapMenuControllerFactory">
            <summary>
            This is the class that's capable of enumerating the SiteMapMenu section of your app.config.
            </summary>
        </member>
        <member name="F:CommonTools.Web.Navigation.SiteMapMenuControllerFactory.SECTION_NAME">
            <summary>
            The configuration's configsection key
            </summary>
        </member>
        <member name="M:CommonTools.Web.Navigation.SiteMapMenuControllerFactory.CreateSiteMapMenuController(CommonTools.Web.Navigation.IUrlRewriteController)">
            <summary>
            Gets the SiteMapMenu section settings of the app.config
            </summary>
        </member>
        <member name="T:CommonTools.Web.Navigation.IUrlRewriteItem">
            <summary>
            This interface enforces all properties needed for 
            </summary>
        </member>
        <member name="P:CommonTools.Web.Navigation.IUrlRewriteItem.Pattern">
            <summary>
            Gets the pattern.
            </summary>
            <value>The pattern.</value>
        </member>
        <member name="P:CommonTools.Web.Navigation.IUrlRewriteItem.Vanity">
            <summary>
            Gets the vanity.
            </summary>
            <value>The vanity.</value>
        </member>
        <member name="P:CommonTools.Web.Navigation.IUrlRewriteItem.Path">
            <summary>
            Gets the path.
            </summary>
            <value>The path.</value>
        </member>
        <member name="P:CommonTools.Web.Navigation.IUrlRewriteItem.Name">
            <summary>
            Gets the name of the <see cref="T:CommonTools.Web.Navigation.IUrlRewriteItem"/>.
            </summary>
            <value>The name.</value>
        </member>
        <member name="P:CommonTools.Web.Navigation.IUrlRewriteItem.Url">
            <summary>
            Gets the URL.
            </summary>
            <value>The URL.</value>
        </member>
        <member name="P:CommonTools.Web.Navigation.IUrlRewriteItem.ParentName">
            <summary>
            Gets the parent name used for breadcrumb navigation.
            </summary>
            <value>The URL.</value>
        </member>
        <member name="P:CommonTools.Web.Navigation.IUrlRewriteItem.FullVirtualPath">
            <summary>
            Gets the full virtual path.
            </summary>
            <value>The full virtual path.</value>
        </member>
        <member name="P:CommonTools.Web.Navigation.IUrlRewriteItem.BreadcrumbTitle">
            <summary>
            Gets the breadcrumb title.
            </summary>
            <value>The breadcrumb title.</value>
        </member>
        <member name="P:CommonTools.Web.Navigation.IUrlRewriteItem.IsHttps">
            <summary>
            Gets a value indicating whether this instance is HTTPS.
            </summary>
            <value><c>true</c> if this instance is HTTPS; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:CommonTools.Web.Navigation.IUrlRewriteItem.Title">
            <summary>
            Gets or sets the title of the page.
            </summary>
            <value>The title.</value>
        </member>
        <member name="T:CommonTools.IO.Csv.CachedCsvReader">
            <summary>
            Represents a reader that provides fast, cached, dynamic access to CSV data.
            </summary>
            <remarks>The number of records is limited to <see cref="F:System.Int32.MaxValue"/> - 1.</remarks>
        </member>
        <member name="F:CommonTools.IO.Csv.CachedCsvReader._records">
            <summary>
            Contains the cached records.
            </summary>
        </member>
        <member name="F:CommonTools.IO.Csv.CachedCsvReader._currentRecordIndex">
            <summary>
            Contains the current record index (inside the cached records array).
            </summary>
        </member>
        <member name="F:CommonTools.IO.Csv.CachedCsvReader._readingStream">
            <summary>
            Indicates if a new record is being read from the CSV stream.
            </summary>
        </member>
        <member name="F:CommonTools.IO.Csv.CachedCsvReader._bindingList">
            <summary>
            Contains the binding list linked to this reader.
            </summary>
        </member>
        <member name="M:CommonTools.IO.Csv.CachedCsvReader.#ctor(System.IO.TextReader,System.Boolean)">
            <summary>
            Initializes a new instance of the CsvReader class.
            </summary>
            <param name="reader">A <see cref="T:TextReader"/> pointing to the CSV file.</param>
            <param name="hasHeaders"><see langword="true"/> if field names are located on the first non commented line, otherwise, <see langword="false"/>.</param>
            <exception cref="T:ArgumentNullException">
            	<paramref name="reader"/> is a <see langword="null"/>.
            </exception>
            <exception cref="T:ArgumentException">
            	Cannot read from <paramref name="reader"/>.
            </exception>
        </member>
        <member name="M:CommonTools.IO.Csv.CachedCsvReader.#ctor(System.IO.TextReader,System.Boolean,System.Int32)">
            <summary>
            Initializes a new instance of the CsvReader class.
            </summary>
            <param name="reader">A <see cref="T:TextReader"/> pointing to the CSV file.</param>
            <param name="hasHeaders"><see langword="true"/> if field names are located on the first non commented line, otherwise, <see langword="false"/>.</param>
            <param name="bufferSize">The buffer size in bytes.</param>
            <exception cref="T:ArgumentNullException">
            	<paramref name="reader"/> is a <see langword="null"/>.
            </exception>
            <exception cref="T:ArgumentException">
            	Cannot read from <paramref name="reader"/>.
            </exception>
        </member>
        <member name="M:CommonTools.IO.Csv.CachedCsvReader.#ctor(System.IO.TextReader,System.Boolean,System.Char)">
            <summary>
            Initializes a new instance of the CsvReader class.
            </summary>
            <param name="reader">A <see cref="T:TextReader"/> pointing to the CSV file.</param>
            <param name="hasHeaders"><see langword="true"/> if field names are located on the first non commented line, otherwise, <see langword="false"/>.</param>
            <param name="delimiter">The delimiter character separating each field (default is ',').</param>
            <exception cref="T:ArgumentNullException">
            	<paramref name="reader"/> is a <see langword="null"/>.
            </exception>
            <exception cref="T:ArgumentException">
            	Cannot read from <paramref name="reader"/>.
            </exception>
        </member>
        <member name="M:CommonTools.IO.Csv.CachedCsvReader.#ctor(System.IO.TextReader,System.Boolean,System.Char,System.Int32)">
            <summary>
            Initializes a new instance of the CsvReader class.
            </summary>
            <param name="reader">A <see cref="T:TextReader"/> pointing to the CSV file.</param>
            <param name="hasHeaders"><see langword="true"/> if field names are located on the first non commented line, otherwise, <see langword="false"/>.</param>
            <param name="delimiter">The delimiter character separating each field (default is ',').</param>
            <param name="bufferSize">The buffer size in bytes.</param>
            <exception cref="T:ArgumentNullException">
            	<paramref name="reader"/> is a <see langword="null"/>.
            </exception>
            <exception cref="T:ArgumentException">
            	Cannot read from <paramref name="reader"/>.
            </exception>
        </member>
        <member name="M:CommonTools.IO.Csv.CachedCsvReader.#ctor(System.IO.TextReader,System.Boolean,System.Char,System.Char,System.Char,System.Char,CommonTools.IO.Csv.ValueTrimmingOptions)">
            <summary>
            Initializes a new instance of the CsvReader class.
            </summary>
            <param name="reader">A <see cref="T:TextReader"/> pointing to the CSV file.</param>
            <param name="hasHeaders"><see langword="true"/> if field names are located on the first non commented line, otherwise, <see langword="false"/>.</param>
            <param name="delimiter">The delimiter character separating each field (default is ',').</param>
            <param name="quote">The quotation character wrapping every field (default is ''').</param>
            <param name="escape">
            The escape character letting insert quotation characters inside a quoted field (default is '\').
            If no escape character, set to '\0' to gain some performance.
            </param>
            <param name="comment">The comment character indicating that a line is commented out (default is '#').</param>
            <param name="trimmingOptions">Determines how values should be trimmed.</param>
            <exception cref="T:ArgumentNullException">
            	<paramref name="reader"/> is a <see langword="null"/>.
            </exception>
            <exception cref="T:ArgumentException">
            	Cannot read from <paramref name="reader"/>.
            </exception>
        </member>
        <member name="M:CommonTools.IO.Csv.CachedCsvReader.#ctor(System.IO.TextReader,System.Boolean,System.Char,System.Char,System.Char,System.Char,CommonTools.IO.Csv.ValueTrimmingOptions,System.Int32)">
            <summary>
            Initializes a new instance of the CsvReader class.
            </summary>
            <param name="reader">A <see cref="T:TextReader"/> pointing to the CSV file.</param>
            <param name="hasHeaders"><see langword="true"/> if field names are located on the first non commented line, otherwise, <see langword="false"/>.</param>
            <param name="delimiter">The delimiter character separating each field (default is ',').</param>
            <param name="quote">The quotation character wrapping every field (default is ''').</param>
            <param name="escape">The escape character letting insert quotation characters inside a quoted field (default is '\').
            If no escape character, set to '\0' to gain some performance.</param>
            <param name="comment">The comment character indicating that a line is commented out (default is '#').</param>
            <param name="trimmingOptions">The trimming options.</param>
            <param name="bufferSize">The buffer size in bytes.</param>
            <exception cref="T:ArgumentNullException">
            	<paramref name="reader"/> is a <see langword="null"/>.
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            	<paramref name="bufferSize"/> must be 1 or more.
            </exception>
        </member>
        <member name="M:CommonTools.IO.Csv.CachedCsvReader.ReadToEnd">
            <summary>
            Reads the CSV stream from the current position to the end of the stream.
            </summary>
            <exception cref="T:System.ComponentModel.ObjectDisposedException">
            The instance has been disposed of.
            </exception>
        </member>
        <member name="M:CommonTools.IO.Csv.CachedCsvReader.ReadNextRecord(System.Boolean,System.Boolean)">
            <summary>
            Reads the next record.
            </summary>
            <param name="onlyReadHeaders">
            Indicates if the reader will proceed to the next record after having read headers.
            <see langword="true"/> if it stops after having read headers; otherwise, <see langword="false"/>.
            </param>
            <param name="skipToNextLine">
            Indicates if the reader will skip directly to the next line without parsing the current one. 
            To be used when an error occurs.
            </param>
            <returns><see langword="true"/> if a record has been successfully reads; otherwise, <see langword="false"/>.</returns>
            <exception cref="T:System.ComponentModel.ObjectDisposedException">
            The instance has been disposed of.
            </exception>
        </member>
        <member name="M:CommonTools.IO.Csv.CachedCsvReader.MoveToStart">
            <summary>
            Moves before the first record.
            </summary>
        </member>
        <member name="M:CommonTools.IO.Csv.CachedCsvReader.MoveToLastCachedRecord">
            <summary>
            Moves to the last record read so far.
            </summary>
        </member>
        <member name="M:CommonTools.IO.Csv.CachedCsvReader.MoveTo(System.Int64)">
            <summary>
            Moves to the specified record index.
            </summary>
            <param name="record">The record index.</param>
            <returns><c>true</c> if the operation was successful; otherwise, <c>false</c>.</returns>
            <exception cref="T:System.ComponentModel.ObjectDisposedException">
            	The instance has been disposed of.
            </exception>
        </member>
        <member name="P:CommonTools.IO.Csv.CachedCsvReader.CurrentRecordIndex">
            <summary>
            Gets the current record index in the CSV file.
            </summary>
            <value>The current record index in the CSV file.</value>
        </member>
        <member name="P:CommonTools.IO.Csv.CachedCsvReader.EndOfStream">
            <summary>
            Gets a value that indicates whether the current stream position is at the end of the stream.
            </summary>
            <value><see langword="true"/> if the current stream position is at the end of the stream; otherwise <see langword="false"/>.</value>
        </member>
        <member name="P:CommonTools.IO.Csv.CachedCsvReader.Item(System.Int32)">
            <summary>
            Gets the field at the specified index.
            </summary>
            <value>The field at the specified index.</value>
            <exception cref="T:ArgumentOutOfRangeException">
            	<paramref name="field"/> must be included in [0, <see cref="M:FieldCount"/>[.
            </exception>
            <exception cref="T:InvalidOperationException">
            	No record read yet. Call ReadLine() first.
            </exception>
            <exception cref="T:CommonTools.IO.Csv.MissingFieldCsvException">
            	The CSV data appears to be missing a field.
            </exception>
            <exception cref="T:MalformedCsvException">
            	The CSV appears to be corrupt at the current position.
            </exception>
            <exception cref="T:System.ComponentModel.ObjectDisposedException">
            	The instance has been disposed of.
            </exception>
        </member>
        <member name="T:CommonTools.IO.Csv.CachedCsvReader.CsvRecordComparer">
            <summary>
            Represents a CSV record comparer.
            </summary>
        </member>
        <member name="F:CommonTools.IO.Csv.CachedCsvReader.CsvRecordComparer._field">
            <summary>
            Contains the field index of the values to compare.
            </summary>
        </member>
        <member name="F:CommonTools.IO.Csv.CachedCsvReader.CsvRecordComparer._direction">
            <summary>
            Contains the sort direction.
            </summary>
        </member>
        <member name="M:CommonTools.IO.Csv.CachedCsvReader.CsvRecordComparer.#ctor(System.Int32,System.ComponentModel.ListSortDirection)">
            <summary>
            Initializes a new instance of the CsvRecordComparer class.
            </summary>
            <param name="field">The field index of the values to compare.</param>
            <param name="direction">The sort direction.</param>
        </member>
        <member name="T:CommonTools.IO.Csv.CachedCsvReader.CsvBindingList">
            <summary>
            Represents a binding list wrapper for a CSV reader.
            </summary>
        </member>
        <member name="F:CommonTools.IO.Csv.CachedCsvReader.CsvBindingList._csv">
            <summary>
            Contains the linked CSV reader.
            </summary>
        </member>
        <member name="F:CommonTools.IO.Csv.CachedCsvReader.CsvBindingList._count">
            <summary>
            Contains the cached record count.
            </summary>
        </member>
        <member name="F:CommonTools.IO.Csv.CachedCsvReader.CsvBindingList._properties">
            <summary>
            Contains the cached property descriptors.
            </summary>
        </member>
        <member name="F:CommonTools.IO.Csv.CachedCsvReader.CsvBindingList._sort">
            <summary>
            Contains the current sort property.
            </summary>
        </member>
        <member name="F:CommonTools.IO.Csv.CachedCsvReader.CsvBindingList._direction">
            <summary>
            Contains the current sort direction.
            </summary>
        </member>
        <member name="M:CommonTools.IO.Csv.CachedCsvReader.CsvBindingList.#ctor(CommonTools.IO.Csv.CachedCsvReader)">
            <summary>
            Initializes a new instance of the CsvBindingList class.
            </summary>
            <param name="csv"></param>
        </member>
        <member name="T:CommonTools.IO.Csv.CachedCsvReader.CsvPropertyDescriptor">
            <summary>
            Represents a CSV field property descriptor.
            </summary>
        </member>
        <member name="F:CommonTools.IO.Csv.CachedCsvReader.CsvPropertyDescriptor._index">
            <summary>
            Contains the field index.
            </summary>
        </member>
        <member name="M:CommonTools.IO.Csv.CachedCsvReader.CsvPropertyDescriptor.#ctor(System.String,System.Int32)">
            <summary>
            Initializes a new instance of the CsvPropertyDescriptor class.
            </summary>
            <param name="fieldName">The field name.</param>
            <param name="index">The field index.</param>
        </member>
        <member name="P:CommonTools.IO.Csv.CachedCsvReader.CsvPropertyDescriptor.Index">
            <summary>
            Gets the field index.
            </summary>
            <value>The field index.</value>
        </member>
        <member name="T:CommonTools.Components.Threading.PreciseTimer">
            <summary>
            This class is a timer which ensures that callbacks are made with millisecond precision
            </summary>
        </member>
        <member name="M:CommonTools.Components.Threading.PreciseTimer.Start">
            <summary>
            Starts the timer.
            </summary>
        </member>
        <member name="M:CommonTools.Components.Threading.PreciseTimer.ForceStart">
            <summary>
            Forces to start this timer. This means that any previous timer callback threads which were asked to stop but might still be running
            in the background are terminated straight away and a new timer thread gets started.
            </summary>
        </member>
        <member name="M:CommonTools.Components.Threading.PreciseTimer.Start(System.TimeSpan,System.TimeSpan,System.Boolean)">
            <summary>
            Starts the timer
            </summary>
            <param name="dueTime">The amount of time to delay before callback is invoked. Specify TimeSpan.Zero to start the timer immediately.</param>
            <param name="period">The time interval between invocations of callback.</param>
            <param name="forceStart">if set to <c>true</c> and the timer was stopped but is still executing a callback delegate from a previous
            timer start, this flag ensures that the previous thread is aborted immediately and a new thread can be started.</param>
        </member>
        <member name="M:CommonTools.Components.Threading.PreciseTimer.ForceStop">
            <summary>
            Forces to stop this timer, regardless whether any callback delegate is still running.
            </summary>
        </member>
        <member name="M:CommonTools.Components.Threading.PreciseTimer.Stop">
            <summary>
            Stops this instance.
            </summary>
        </member>
        <member name="M:CommonTools.Components.Threading.PreciseTimer.StartNew(System.Threading.TimerCallback,System.TimeSpan,CommonTools.Components.Threading.PreciseTimerCallbackMode)">
            <summary>
            Creates a new timer object and starts it straight away
            </summary>
            <param name="callback">The callback.</param>
            <param name="period">The time interval between invocations of callback.</param>
            <param name="preciseTimerCallbackMode">The precise timer callback mode.</param>
            <returns></returns>
        </member>
        <member name="M:CommonTools.Components.Threading.PreciseTimer.StartNew(System.Threading.TimerCallback,System.TimeSpan,System.TimeSpan,CommonTools.Components.Threading.PreciseTimerCallbackMode)">
            <summary>
            Creates a new timer object and starts it straight away
            </summary>
            <param name="callback">The callback.</param>
            <param name="dueTime">The amount of time to delay before callback is invoked. Specify TimeSpan.Zero to start the timer immediately.</param>
            <param name="period">The time interval between invocations of callback.</param>
            <param name="preciseTimerCallbackMode">The precise timer callback mode.</param>
            <returns></returns>
        </member>
        <member name="M:CommonTools.Components.Threading.PreciseTimer.#ctor(System.Threading.TimerCallback,System.TimeSpan,CommonTools.Components.Threading.PreciseTimerCallbackMode)">
            <summary>
            Initializes a new instance of the <see cref="T:CommonTools.Components.Threading.PreciseTimer"/> class.
            </summary>
            <param name="callback">The callback.</param>
            <param name="period">The period.</param>
            <param name="preciseTimerCallbackMode">The precise timer callback mode.</param>
        </member>
        <member name="M:CommonTools.Components.Threading.PreciseTimer.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
        </member>
        <member name="T:CommonTools.Components.Logging.LogSection">
            <summary>
            Provides the handler for the Log section of app.config.
            </summary>
        </member>
        <member name="M:CommonTools.Components.Logging.LogSection.CreateLogControllerInstance">
            <summary>
            Creates an instance of a log controller.
            </summary>
            <returns></returns>
        </member>
        <member name="P:CommonTools.Components.Logging.LogSection.ConnectionStringName">
            <summary>
            Gets or sets the name of the connectionstrin gto use defined at app.config or web.config
            </summary>
        </member>
        <member name="P:CommonTools.Components.Logging.LogSection.StoredProcedurePrefix">
            <summary>
            Gets or sets the prefix to use for all logging stored procedures
            </summary>
        </member>
        <member name="P:CommonTools.Components.Logging.LogSection.ApplicationId">
            <summary>
            Gets or sets the application id. This value can be set either via the defaultApplicationId attribute or an
            ApplicationId appsettings key/value pair.
            </summary>
            <value>The application id.</value>
        </member>
        <member name="P:CommonTools.Components.Logging.LogSection.LogSectionProviderType">
            <summary>
            Gets or sets the log section provider type.
            </summary>
            <value>The type of the log section provider.</value>
        </member>
        <member name="P:CommonTools.Components.Logging.LogSection.AsynchronousBatchSize">
            <summary>
            Gets or sets the log section provider type.
            </summary>
            <value>The type of the log section provider.</value>
        </member>
        <member name="P:CommonTools.Components.Logging.LogSection.LogLevel">
            <summary>
            Gets or sets the log level if you use a hirarchic eventlogtype mechanism. For example, if you define the eventlogtypes to
            be Error = 1, Warning = 2, Info = 3, then you can use this property to determine that all messages lower than 2 (Warning)
            should be logged to the database while Infos (3) will be ignored.
            </summary>
            <value>The log level.</value>
        </member>
        <member name="P:CommonTools.Components.Logging.LogSection.LogBackupFilePath">
            <summary>
            Gets or sets the log backup file path. This path is used if for some reason the log manager class can't connect to the
            specified database and therefore logs to a file.
            </summary>
            <value>The log backup file path.</value>
            <remarks>The file log mechanism is not optimized for performance so it should not be used for normal log records. It is
            a mere backup mechanism in case the database crashes or the network connection fails.</remarks>
        </member>
        <member name="T:CommonTools.Components.Flash.OpenFlashChart.ChartType">
            <summary>
            
            </summary>
        </member>
        <member name="F:CommonTools.Components.Flash.OpenFlashChart.ChartType.Pie">
            <summary>
            
            </summary>
        </member>
        <member name="F:CommonTools.Components.Flash.OpenFlashChart.ChartType.Line">
            <summary>
            
            </summary>
        </member>
        <member name="F:CommonTools.Components.Flash.OpenFlashChart.ChartType.LineDot">
            <summary>
            
            </summary>
        </member>
        <member name="F:CommonTools.Components.Flash.OpenFlashChart.ChartType.LineHollow">
            <summary>
            
            </summary>
        </member>
        <member name="T:CommonTools.Components.BusinessTier.PropertyValidationError">
            <summary>
            Enumeration of possible validation errors at properties
            </summary>
        </member>
        <member name="F:CommonTools.Components.BusinessTier.PropertyValidationError.MaximumValueConstraint">
            <summary>
            The value exceeded the defined maximum value of the object
            </summary>
        </member>
        <member name="F:CommonTools.Components.BusinessTier.PropertyValidationError.MinimumValueConstraint">
            <summary>
            The value was too low
            </summary>
        </member>
        <member name="F:CommonTools.Components.BusinessTier.PropertyValidationError.RegexMatchConstraint">
            <summary>
            The value didn't match the defined regular expression.
            </summary>
        </member>
        <member name="T:CommonTools.Web.UI.JobView">
            <summary>
            The JobView is a control that displays all the jobs present in web.config in a table.
            </summary>
        </member>
        <member name="M:CommonTools.Web.UI.JobView.RecreateChildControls">
            <summary>
            Refreshes all child controls.
            </summary>
        </member>
        <member name="M:CommonTools.Web.UI.JobView.CreateChildControls">
            <summary>
            Removes all child controls from the JobView.
            </summary>
        </member>
        <member name="M:CommonTools.Web.UI.JobView.Render(System.Web.UI.HtmlTextWriter)">
            <summary>
            Overridden. Renders the JobView as a table.
            </summary>
            <param name="writer"></param>
        </member>
        <member name="P:CommonTools.Web.UI.JobView.TableCssClass">
            <summary>
            The Css style for the table itself.
            </summary>
        </member>
        <member name="P:CommonTools.Web.UI.JobView.TableHeaderCssClass">
            <summary>
            The style of the table header.
            </summary>
        </member>
        <member name="P:CommonTools.Web.UI.JobView.TableCellCssClass">
            <summary>
            The style of the table cell.
            </summary>
        </member>
        <member name="P:CommonTools.Web.UI.JobView.TableEnumeratingCellCssClass">
            <summary>
            Enumerating cells.
            </summary>
        </member>
        <member name="P:CommonTools.Web.UI.JobView.Theme">
            <summary>
            The current Job Theme of the class.
            </summary>
        </member>
        <member name="T:CommonTools.Web.UI.NavigationBreadcrumbs">
            <summary>
            
            </summary>
        </member>
        <member name="T:CommonTools.Web.UI.NavigationBreadcrumbsBase">
            <summary>
            
            </summary>
        </member>
        <member name="F:CommonTools.Web.UI.NavigationBreadcrumbsBase._Controller">
            <summary>
            
            </summary>
        </member>
        <member name="M:CommonTools.Web.UI.NavigationBreadcrumbsBase.RecreateChildControls">
            <see cref="M:CommonTools.Web.UI.JobView.RecreateChildControls"/>
        </member>
        <member name="M:CommonTools.Web.UI.NavigationBreadcrumbsBase.GetBreadcrumbs(System.Text.StringBuilder,CommonTools.Web.Navigation.IUrlRewriteItem)">
            <summary>
            Gets the breadcrumbs.
            </summary>
            <param name="output">The output.</param>
            <param name="item">The item.</param>
            <returns></returns>
        </member>
        <member name="M:CommonTools.Web.UI.NavigationBreadcrumbsBase.GetBreadcrumbs(System.Text.StringBuilder,CommonTools.Web.Navigation.ISiteMapMenuItem)">
            <summary>
            Gets the breadcrumbs.
            </summary>
            <param name="output">The output.</param>
            <param name="item">The item.</param>
            <returns></returns>
        </member>
        <member name="P:CommonTools.Web.UI.NavigationBreadcrumbsBase.LinkCssClass">
            <summary>
            Gets or sets the link CSS class.
            </summary>
            <value>The link CSS class.</value>
        </member>
        <member name="P:CommonTools.Web.UI.NavigationBreadcrumbsBase.ActivePageCssClass">
            <summary>
            Gets or sets the active link CSS class.
            </summary>
            <value>The active link CSS class.</value>
        </member>
        <member name="P:CommonTools.Web.UI.NavigationBreadcrumbsBase.ActivePageIsLink">
            <summary>
            Gets or sets a value indicating whether the currently active page text is rendered as a link. If false,
            the active page is rendered as a span.
            </summary>
            <value><c>true</c> if [_ active page is link]; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:CommonTools.Web.UI.NavigationBreadcrumbsBase.ShowRootNode">
            <summary>
            Gets or sets a value indicating whether to show the root node.
            </summary>
            <value><c>true</c> if [show root node]; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:CommonTools.Web.UI.NavigationBreadcrumbsBase.ShowFirstSeparator">
            <summary>
            Gets or sets a value indicating whether [show first separator].
            </summary>
            <value><c>true</c> if [show first separator]; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:CommonTools.Web.UI.NavigationBreadcrumbsBase.SeparatorCssClass">
            <summary>
            Gets or sets the separator CSS class.
            </summary>
            <value>The separator CSS class.</value>
        </member>
        <member name="P:CommonTools.Web.UI.NavigationBreadcrumbsBase.Separator">
            <summary>
            Gets or sets the seperator between links.
            </summary>
            <value>The seperator.</value>
        </member>
        <member name="P:CommonTools.Web.UI.NavigationBreadcrumbsBase.VirtualSeparatorImageUrl">
            <summary>
            Gets or sets the virtual separator image URL between links.
            </summary>
            <value>The virtual separator image URL.</value>
        </member>
        <member name="P:CommonTools.Web.UI.NavigationBreadcrumbsBase.Prefix">
            <summary>
            Gets or sets the controller.
            </summary>
            <value>The controller.</value>
        </member>
        <member name="M:CommonTools.Web.UI.NavigationBreadcrumbs.RecreateChildControls">
            <see cref="M:CommonTools.Web.UI.JobView.RecreateChildControls"/>
        </member>
        <member name="M:CommonTools.Web.UI.NavigationBreadcrumbs.Render(System.Web.UI.HtmlTextWriter)">
            <see cref="M:CommonTools.Web.UI.JobView.Render(System.Web.UI.HtmlTextWriter)"/>
        </member>
        <member name="P:CommonTools.Web.UI.NavigationBreadcrumbs.ActiveItem">
            <summary>
            Gets or sets the active item.
            </summary>
            <value>The active item.</value>
        </member>
        <member name="P:CommonTools.Web.UI.NavigationBreadcrumbs.Controller">
            <summary>
            Gets or sets the controller.
            </summary>
            <value>The controller.</value>
        </member>
        <member name="T:CommonTools.Web.UI.StringLengthValidator">
            <summary>
            This class contains all string length validator related data
            </summary>
        </member>
        <member name="M:CommonTools.Web.UI.StringLengthValidator.stringLengthValidator_ServerValidate(System.Object,System.Web.UI.WebControls.ServerValidateEventArgs)">
            <summary>
            Handles the ServerValidate event of the customStringLengthValidator control.
            </summary>
            <param name="sender">The source of the event.</param>
            <param name="e">The <see cref="T:System.Web.UI.WebControls.ServerValidateEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:CommonTools.Web.UI.StringLengthValidator.OnInit(System.EventArgs)">
            <summary>
            Raises the <see cref="E:System.Web.UI.Control.Init"/> event.
            </summary>
            <param name="e">A <see cref="T:System.EventArgs"/> that contains the event data.</param>
        </member>
        <member name="M:CommonTools.Web.UI.StringLengthValidator.OnPreRender(System.EventArgs)">
            <summary>
            Raises the <see cref="E:System.Web.UI.Control.PreRender"/> event.
            </summary>
            <param name="e">A <see cref="T:System.EventArgs"/> that contains the event data.</param>
        </member>
        <member name="P:CommonTools.Web.UI.StringLengthValidator.MaxLength">
            <summary>
            Gets or sets the length of the max.
            </summary>
            <value>The length of the max.</value>
        </member>
        <member name="P:CommonTools.Web.UI.StringLengthValidator.MinLength">
            <summary>
            Gets or sets the length of the min.
            </summary>
            <value>The length of the min.</value>
        </member>
        <member name="T:CommonTools.Web.Security.AuthenticationCookieManager">
            <summary>
            This manager class offers helper methods for manipulating the .NET forms authentication cookie. They offer an easy
            interface for dynamically assigning authentication timeouts and embedding custom objects within the cookie.
            </summary>
        </member>
        <member name="M:CommonTools.Web.Security.AuthenticationCookieManager.GenerateAuthenticationCookie``1(System.String,System.Int32,System.Int32,``0,System.Nullable{System.Boolean},CommonTools.Web.Security.AuthenticationCookieManager.CookieGenerationMode,System.String)">
            <summary>
            Generates the authentication cookie.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="username">The username.</param>
            <param name="authenticationTimeoutInSeconds">The authentication timeout in seconds.</param>
            <param name="persistentAuthenticationTimeoutInSeconds">The persistent authentication timeout in seconds.</param>
            <param name="userObject">The user object.</param>
            <param name="isPersistent">The is persistent.</param>
            <param name="cookieGenerationMode">The cookie generation mode.</param>
            <param name="domain">The domain to share the cookie in. Set this to null if you don't want to share the cookie in a domain.</param>
            <returns></returns>
        </member>
        <member name="M:CommonTools.Web.Security.AuthenticationCookieManager.GenerateAuthenticationCookie(System.String,System.Int32,System.Int32,System.Nullable{System.Boolean},System.Boolean,System.String)">
            <summary>
            Generates the authentication cookie.
            </summary>
            <param name="username">The username.</param>
            <param name="authenticationTimeoutInSeconds">The authentication timeout in seconds.</param>
            <param name="persistentAuthenticationTimeoutInSeconds">The persistent authentication timeout in seconds.</param>
            <param name="isPersistent">The is persistent.</param>
            <param name="refreshExisting">if set to <c>true</c> [refresh existing].</param>
            <param name="domain">The domain to share the cookie in. Set this to null if you don't want to share the cookie in a domain.</param>
            <returns></returns>
        </member>
        <member name="M:CommonTools.Web.Security.AuthenticationCookieManager.RefreshAuthenticationCookie(System.Int32)">
            <summary>
            Refreshes the authentication cookie.
            </summary>
            <param name="authenticationTimeoutInSeconds">The authentication timeout in seconds.</param>
        </member>
        <member name="M:CommonTools.Web.Security.AuthenticationCookieManager.RefreshAuthenticationCookie(System.Int32,System.Int32,System.String)">
            <summary>
            Refreshes the authentication cookie.
            </summary>
            <param name="authenticationTimeoutInSeconds">The authentication timeout in seconds.</param>
            <param name="persistentAuthenticationTimeoutInSeconds">The persistent authentication timeout in seconds.</param>
            <param name="domain">The domain to share the cookie in. Set this to null if you don't want to share the cookie in a domain.</param>
        </member>
        <member name="M:CommonTools.Web.Security.AuthenticationCookieManager.RefreshAuthenticationCookie``1(System.Int32,System.Int32,``0,System.String)">
            <summary>
            Refreshes the current authentication cookie. The userObject values will not be set, if you want to set the userObject values, use <![CDATA[UpdateAuthenticationCookie<T>]]> instead.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="authenticationTimeoutInSeconds">The authentication timeout in seconds.</param>
            <param name="persistentAuthenticationTimeoutInSeconds">The persistent authentication timeout in seconds.</param>
            <param name="userObject">The user object.</param>
            <param name="domain">The domain to share the cookie in. Set this to null if you don't want to share the cookie in a domain.</param>
        </member>
        <member name="M:CommonTools.Web.Security.AuthenticationCookieManager.RefreshAuthenticationCookie(System.Int32,System.Int32)">
            <summary>
            Refreshes the authentication cookie.
            </summary>
            <param name="authenticationTimeoutInSeconds">The authentication timeout in seconds.</param>
            <param name="persistentAuthenticationTimeoutInSeconds">The persistent authentication timeout in seconds.</param>
        </member>
        <member name="M:CommonTools.Web.Security.AuthenticationCookieManager.RefreshAuthenticationCookie``1(System.Int32,System.Int32,``0)">
            <summary>
            Refreshes the current authentication cookie. The userObject values will not be set, if you want to set the userObject values, use <![CDATA[UpdateAuthenticationCookie<T>]]> instead.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="authenticationTimeoutInSeconds">The authentication timeout in seconds.</param>
            <param name="persistentAuthenticationTimeoutInSeconds">The persistent authentication timeout in seconds.</param>
            <param name="userObject">The user object.</param>
        </member>
        <member name="M:CommonTools.Web.Security.AuthenticationCookieManager.UpdateAuthenticationCookie``1(System.Int32,System.Int32,``0,System.String)">
            <summary>
            Refreshes and updates the current authentication cookie with the new userObject values.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="authenticationTimeoutInSeconds">The authentication timeout in seconds.</param>
            <param name="persistentAuthenticationTimeoutInSeconds">The persistent authentication timeout in seconds.</param>
            <param name="userObject">The user object.</param>
            <param name="domain">The domain to share the cookie in. Set this to null if you don't want to share the cookie in a domain.</param>
        </member>
        <member name="M:CommonTools.Web.Security.AuthenticationCookieManager.UpdateAuthenticationCookie``1(System.Int32,System.Int32,``0)">
            <summary>
            Refreshes and updates the current authentication cookie with the new userObject values.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="authenticationTimeoutInSeconds">The authentication timeout in seconds.</param>
            <param name="persistentAuthenticationTimeoutInSeconds">The persistent authentication timeout in seconds.</param>
            <param name="userObject">The user object.</param>
        </member>
        <member name="M:CommonTools.Web.Security.AuthenticationCookieManager.WriteAuthenticationCookie(System.String,System.Int32)">
            <summary>
            Writes the authentication cookie.
            </summary>
            <param name="username">The username.</param>
            <param name="authenticationTimeoutInSeconds">The authentication timeout in seconds.</param>
        </member>
        <member name="M:CommonTools.Web.Security.AuthenticationCookieManager.WriteAuthenticationCookie(System.String,System.Int32,System.Int32)">
            <summary>
            Writes the authentication cookie.
            </summary>
            <param name="username">The username.</param>
            <param name="authenticationTimeoutInSeconds">The authentication timeout in seconds.</param>
            <param name="persistentAuthenticationTimeoutInSeconds">The persistent authentication timeout in seconds.</param>
        </member>
        <member name="M:CommonTools.Web.Security.AuthenticationCookieManager.WriteAuthenticationCookie(System.String,System.Int32,System.Int32,System.Nullable{System.Boolean},System.String)">
            <summary>
            Writes the authentication cookie.
            </summary>
            <param name="username">The username.</param>
            <param name="authenticationTimeoutInSeconds">The authentication timeout in seconds.</param>
            <param name="persistentAuthenticationTimeoutInSeconds">The persistent authentication timeout in seconds.</param>
            <param name="isPersistent">if set to <c>true</c> [is persistent].</param>
            <param name="domain">The domain to share the cookie in. Set this to null if you don't want to share the cookie in a domain.</param>
        </member>
        <member name="M:CommonTools.Web.Security.AuthenticationCookieManager.WriteAuthenticationCookie``1(System.String,System.Int32,System.Int32,``0,System.Nullable{System.Boolean},System.String)">
            <summary>
            Writes the authentication cookie.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="username">The username.</param>
            <param name="authenticationTimeoutInSeconds">The authentication timeout in seconds.</param>
            <param name="persistentAuthenticationTimeoutInSeconds">The persistent authentication timeout in seconds.</param>
            <param name="userObject">The user object.</param>
            <param name="isPersistent">The is persistent.</param>
            <param name="domain">The domain to share the cookie in. Set this to null if you don't want to share the cookie in a domain.</param>
        </member>
        <member name="M:CommonTools.Web.Security.AuthenticationCookieManager.WriteAuthenticationCookie(System.String,System.Int32,System.Int32,System.Nullable{System.Boolean})">
            <summary>
            Writes the authentication cookie.
            </summary>
            <param name="username">The username.</param>
            <param name="authenticationTimeoutInSeconds">The authentication timeout in seconds.</param>
            <param name="persistentAuthenticationTimeoutInSeconds">The persistent authentication timeout in seconds.</param>
            <param name="isPersistent">if set to <c>true</c> [is persistent].</param>
        </member>
        <member name="M:CommonTools.Web.Security.AuthenticationCookieManager.WriteAuthenticationCookie``1(System.String,System.Int32,System.Int32,``0,System.Nullable{System.Boolean})">
            <summary>
            Writes the authentication cookie.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="username">The username.</param>
            <param name="authenticationTimeoutInSeconds">The authentication timeout in seconds.</param>
            <param name="persistentAuthenticationTimeoutInSeconds">The persistent authentication timeout in seconds.</param>
            <param name="userObject">The user object.</param>
            <param name="isPersistent">The is persistent.</param>
        </member>
        <member name="M:CommonTools.Web.Security.AuthenticationCookieManager.GetEmbeddedDataFromAuthenticationCookie``1">
            <summary>
            Gets the embedded data from authentication cookie.
            </summary>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="M:CommonTools.Web.Security.AuthenticationCookieManager.Signout">
            <summary>
            Signouts this instance.
            </summary>
        </member>
        <member name="M:CommonTools.Web.Security.AuthenticationCookieManager.SignoutAndRedirectToLogin">
            <summary>
            Signouts the and redirect to login.
            </summary>
        </member>
        <member name="T:CommonTools.Web.HtmlValidator">
            <summary>
            This code was nicked from some guy at the internet - don't know how well it behaves, but it should be sufficient for internal
            admin projects...
            </summary>
        </member>
        <member name="M:CommonTools.Web.HtmlValidator.ValidateHtml(System.String,System.String@)">
            <summary>
            Validates the HTML.
            </summary>
            <param name="html">The HTML.</param>
            <param name="error">The error.</param>
            <returns></returns>
        </member>
        <member name="T:CommonTools.Components.BusinessTier.PropertyError">
            <summary>
            This class exposes properties indicating a property error.
            </summary>
        </member>
        <member name="M:CommonTools.Components.BusinessTier.PropertyError.ToString(CommonTools.TextFormat)">
            <summary>
            This method returns a string containing all necessary information about this object
            </summary>
            <param name="format">The format of the string to return.</param>
            <returns></returns>
        </member>
        <member name="M:CommonTools.Components.BusinessTier.PropertyError.#ctor(CommonTools.Components.BusinessTier.PropertyValidationError,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:CommonTools.Components.BusinessTier.PropertyError"/> class.
            </summary>
            <param name="error">The error</param>
            <param name="propertyName">Name of the property.</param>
        </member>
        <member name="M:CommonTools.Components.BusinessTier.PropertyError.#ctor(CommonTools.Components.BusinessTier.PropertyValidationError,System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:CommonTools.Components.BusinessTier.PropertyError"/> class.
            </summary>
            <param name="error">The error</param>
            <param name="propertyName">Name of the property.</param>
            <param name="errorMessage">The message</param>
        </member>
        <member name="M:CommonTools.Components.BusinessTier.PropertyError.#ctor(CommonTools.Components.BusinessTier.PropertyValidationError,System.String,System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:CommonTools.Components.BusinessTier.PropertyError"/> class.
            </summary>
            <param name="error">The error.</param>
            <param name="propertyName">Name of the property.</param>
            <param name="errorMessage">The message</param>
            <param name="errorMessageResourceKey">The message resource key</param>
        </member>
        <member name="P:CommonTools.Components.BusinessTier.PropertyError.PropertyValidationError">
            <summary>
            Gets or sets the property validation error.
            </summary>
            <value>The property validation error.</value>
        </member>
        <member name="P:CommonTools.Components.BusinessTier.PropertyError.ErrorMessage">
            <summary>
            Gets or sets the error message.
            </summary>
            <value>The error message.</value>
        </member>
        <member name="P:CommonTools.Components.BusinessTier.PropertyError.ErrorMessageResourceKey">
            <summary>
            Gets or sets the error message resource key.
            </summary>
            <value>The error message resource key.</value>
        </member>
        <member name="P:CommonTools.Components.BusinessTier.PropertyError.PropertyName">
            <summary>
            Gets or sets the name of the property.
            </summary>
            <value>The name of the property.</value>
        </member>
        <member name="P:CommonTools.Components.BusinessTier.PropertyError.HasErrorMesssage">
            <summary>
            Gets a value indicating whether this instance has error messsage.
            </summary>
            <value>
            	<c>true</c> if this instance has error messsage; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:CommonTools.Components.BusinessTier.PropertyError.HasErrorMesssageResourceKey">
            <summary>
            Gets a value indicating whether this instance has error messsage resource key.
            </summary>
            <value>
            	<c>true</c> if this instance has error messsage resource key; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="T:CommonTools.Components.Threading.IJobController">
            <summary>
            Provides the base interface for the job configuration section.
            </summary>
        </member>
        <member name="M:CommonTools.Components.Threading.IJobController.CreateJobControllerInstance">
            <summary>
            Creates an instance of this object's default controller.
            </summary>
            <returns></returns>
        </member>
        <member name="P:CommonTools.Components.Threading.IJobController.Minutes">
            <summary>
            Gets the execution interval in minutes for all IJobItems at this object's IJobItem collection. This value can be overwritten
            by the IJobItem itself.
            </summary>
            <value>The minutes.</value>
        </member>
        <member name="P:CommonTools.Components.Threading.IJobController.JobItems">
            <summary>
            Gets the IJobItem collection associated with this ICacheController.
            </summary>
            <value>The job items.</value>
        </member>
        <member name="T:CommonTools.Components.Threading.JobsException">
            <summary>
            Exception that gets thrown by the CommonTools.Components.Caching namespace
            </summary>
        </member>
        <member name="M:CommonTools.Components.Threading.JobsException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:CommonTools.Components.Threading.JobsException"/> class.
            </summary>
            <param name="message">The message.</param>
        </member>
        <member name="M:CommonTools.Components.Threading.JobsException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:CommonTools.Components.Threading.JobsException"/> class.
            </summary>
            <param name="message">The message.</param>
            <param name="inner">The inner.</param>
        </member>
        <member name="T:CommonTools.Components.Testing.ElapsedTimeInfo">
            <summary>
            
            </summary>
        </member>
        <member name="M:CommonTools.Components.Testing.ElapsedTimeInfo.ToString">
            <summary>
            Converts this object to a String
            </summary>
            <returns></returns>
        </member>
        <member name="M:CommonTools.Components.Testing.ElapsedTimeInfo.#ctor(System.Double,System.Int64,System.Int32,System.Int64)">
            <summary>
            Initializes a new instance of the <see cref="T:CommonTools.Components.Testing.ElapsedTimeInfo"/> struct.
            </summary>
            <param name="averageMilliseconds">The average milliseconds.</param>
            <param name="medianMilliseconds">The median milliseconds.</param>
            <param name="repetitions">The repetitions.</param>
            <param name="totalMilliseconds">The total milliseconds.</param>
        </member>
        <member name="P:CommonTools.Components.Testing.ElapsedTimeInfo.AverageMilliseconds">
            <summary>
            Gets or sets the average milliseconds.
            </summary>
            <value>The average milliseconds.</value>
        </member>
        <member name="P:CommonTools.Components.Testing.ElapsedTimeInfo.MedianMilliseconds">
            <summary>
            Gets or sets the median milliseconds.
            </summary>
            <value>The median milliseconds.</value>
        </member>
        <member name="P:CommonTools.Components.Testing.ElapsedTimeInfo.Repetitions">
            <summary>
            Gets or sets the repetitions.
            </summary>
            <value>The repetitions.</value>
        </member>
        <member name="P:CommonTools.Components.Testing.ElapsedTimeInfo.TotalMilliseconds">
            <summary>
            Gets or sets the total milliseconds.
            </summary>
            <value>The total milliseconds.</value>
        </member>
        <member name="T:CommonTools.Components.Logging.AsynchronousLogManager">
            <summary>
            This class handles asynchronous event logging. Events are not logged one-by-one, but they are queued
            and batch inserted when the queue reaches a specified size.
            </summary>
        </member>
        <member name="M:CommonTools.Components.Logging.AsynchronousLogManager.LogEvent(System.Enum,System.Enum,System.String)">
            <summary>
            Logs an event.
            </summary>
            <param name="appLocation">The Application location. This parameter should represent where in your application the event occurred, e.g. MyEnum.BusinessLayer or MyEnum.UserCreation</param>
            <param name="eventType">Type of the event. This parameter should represent the type of your event, e.g. MyEnum.Information</param>
            <param name="message">The event message.</param>
        </member>
        <member name="M:CommonTools.Components.Logging.AsynchronousLogManager.LogEvent(System.Enum,System.Enum,System.String,System.String)">
            <summary>
            Logs an event.
            </summary>
            <param name="appLocation">The Application location. This parameter should represent where in your application the event occurred, e.g. MyEnum.BusinessLayer or MyEnum.UserCreation</param>
            <param name="eventType">Type of the event. This parameter should represent the type of your event, e.g. MyEnum.Information</param>
            <param name="message">The event message.</param>
            <param name="authenticatedUserId">The authenticated user id.</param>
        </member>
        <member name="M:CommonTools.Components.Logging.AsynchronousLogManager.LogEvent(System.Int32,System.Int32,System.String)">
            <summary>
            Logs an event.
            </summary>
            <param name="appLocation">The Application location. This parameter should represent where in your application the event occurred, e.g. MyEnum.BusinessLayer or MyEnum.UserCreation</param>
            <param name="eventType">Type of the event. This parameter should represent the type of your event, e.g. MyEnum.Information</param>
            <param name="message">The event message.</param>
        </member>
        <member name="M:CommonTools.Components.Logging.AsynchronousLogManager.LogEvent(System.Int32,System.Int32,System.String,System.String)">
            <summary>
            Logs an event.
            </summary>
            <param name="appLocation">The Application location. This parameter should represent where in your application the event occurred, e.g. MyEnum.BusinessLayer or MyEnum.UserCreation</param>
            <param name="eventType">Type of the event. This parameter should represent the type of your event, e.g. MyEnum.Information</param>
            <param name="message">The event message.</param>
            <param name="authenticatedUserId">The authenticated user id.</param>
        </member>
        <member name="M:CommonTools.Components.Logging.AsynchronousLogManager.LogEvent(System.Int32,System.Enum,System.Enum,System.String)">
            <summary>
            Logs an event.
            </summary>
            <param name="applicationId">The application id.</param>
            <param name="appLocation">The Application location. This parameter should represent where in your application the event occurred, e.g. MyEnum.BusinessLayer or MyEnum.UserCreation</param>
            <param name="eventType">Type of the event. This parameter should represent the type of your event, e.g. MyEnum.Information</param>
            <param name="message">The event message.</param>
        </member>
        <member name="M:CommonTools.Components.Logging.AsynchronousLogManager.LogEvent(System.Int32,System.Enum,System.Enum,System.String,System.String)">
            <summary>
            Logs an event.
            </summary>
            <param name="applicationId">The application id.</param>
            <param name="appLocation">The Application location. This parameter should represent where in your application the event occurred, e.g. MyEnum.BusinessLayer or MyEnum.UserCreation</param>
            <param name="eventType">Type of the event. This parameter should represent the type of your event, e.g. MyEnum.Information</param>
            <param name="message">The event message.</param>
            <param name="authenticatedUserId">The authenticated user id.</param>
        </member>
        <member name="M:CommonTools.Components.Logging.AsynchronousLogManager.LogEvent(System.Int32,System.Int32,System.Int32,System.String)">
            <summary>
            Logs an event.
            </summary>
            <param name="applicationId">The application id.</param>
            <param name="appLocation">The Application location. This parameter should represent where in your application the event occurred, e.g. MyEnum.BusinessLayer or MyEnum.UserCreation</param>
            <param name="eventType">Type of the event. This parameter should represent the type of your event, e.g. MyEnum.Information</param>
            <param name="message">The event message.</param>
        </member>
        <member name="M:CommonTools.Components.Logging.AsynchronousLogManager.LogEvent(System.Int32,System.Int32,System.Int32,System.String,System.String)">
            <summary>
            Logs an event.
            </summary>
            <param name="applicationId">The application id.</param>
            <param name="appLocation">The Application location. This parameter should represent where in your application the event occurred, e.g. MyEnum.BusinessLayer or MyEnum.UserCreation</param>
            <param name="eventType">Type of the event. This parameter should represent the type of your event, e.g. MyEnum.Information</param>
            <param name="message">The event message.</param>
            <param name="authenticatedUserId">The authenticated user id.</param>
        </member>
        <member name="M:CommonTools.Components.Logging.AsynchronousLogManager.SafeAllPendingEvents">
            <summary>
            This methods writes all queued events to the database. Implement this method at the global.asax at web projects to ensure
            that all the queued events in memory get written to the database at a system crash.
            </summary>
        </member>
        <member name="P:CommonTools.Components.Logging.AsynchronousLogManager.EventLogTable">
            <summary>
            Gets the event log table.
            </summary>
            <value>The event log table.</value>
        </member>
        <member name="T:CommonTools.Components.Flash.OpenFlashChart.Orientation">
            <summary>
            
            </summary>
        </member>
        <member name="F:CommonTools.Components.Flash.OpenFlashChart.Orientation.Vertical">
            <summary>
            
            </summary>
        </member>
        <member name="F:CommonTools.Components.Flash.OpenFlashChart.Orientation.Horizontal">
            <summary>
            
            </summary>
        </member>
        <member name="F:CommonTools.Components.Flash.OpenFlashChart.Orientation.Diagonal">
            <summary>
            
            </summary>
        </member>
        <member name="T:CommonTools.Xml.XmlSettingsManagerException">
            <summary>
            Exceptions that can be thrown by the CommonTools.Xml.XmlResourceFileManager class.
            </summary>
        </member>
        <member name="M:CommonTools.Xml.XmlSettingsManagerException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:CommonTools.Xml.XmlResourceFileManagerException"/> class.
            </summary>
            <param name="message">The error message.</param>
        </member>
        <member name="M:CommonTools.Xml.XmlSettingsManagerException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:CommonTools.Xml.XmlResourceFileManagerException"/> class.
            </summary>
            <param name="message">The error message.</param>
            <param name="innerException">The original inner exception.</param>
        </member>
        <member name="T:CommonTools.Components.BusinessTier.BusinessObjectManager">
            <summary>
            
            </summary>
        </member>
        <member name="M:CommonTools.Components.BusinessTier.BusinessObjectManager.Validate(System.Object)">
            <summary>
            This method validates a given IBusinessObject against a defined database action (create/update/delete). The validation process
            considers the following property attributes when during execution: BusinessObjectPropertyAttribute, BusinessObjectStringSecurityAttribute
            and BusinessObjectValidationAttribute. Examine these attributes for further details on how to enforce validation constraints used
            by this class.
            </summary>
            <param name="obj">The object to validate.</param>
            <returns>A BusinessObjectValidationResult object which has all necessary information about the validity of the defined action.</returns>
        </member>
        <member name="T:CommonTools.Web.Navigation.UrlRewriteControllerFactory">
            <summary>
            This is the class that's capable of enumerating the UrlRewrite section of your app.config.
            </summary>
        </member>
        <member name="F:CommonTools.Web.Navigation.UrlRewriteControllerFactory.SECTION_NAME">
            <summary>
            The configuration's configsection key
            </summary>
        </member>
        <member name="M:CommonTools.Web.Navigation.UrlRewriteControllerFactory.GetSection">
            <summary>
            Gets the section.
            </summary>
            <returns></returns>
        </member>
        <member name="M:CommonTools.Web.Navigation.UrlRewriteControllerFactory.CreateUrlRewriteController">
            <summary>
            Gets the UrlRewrite section settings of the app.config
            </summary>
        </member>
        <member name="T:CommonTools.Web.Navigation.SiteMapMenuSection">
            <summary>
            Provides the handler for the SiteMapMenu section of app.config.
            </summary>
        </member>
        <member name="M:CommonTools.Web.Navigation.SiteMapMenuSection.CreateSiteMapMenuControllerInstance(CommonTools.Web.Navigation.IUrlRewriteController)">
            <summary>
            Creates an instance of this object's default controller.
            </summary>
            <returns></returns>
        </member>
        <member name="M:CommonTools.Web.Navigation.SiteMapMenuSection.GetSiteMapMenu(System.String)">
            <summary>
            Gets an ISiteMapMenuItem from the ISiteMapMenuItem collection by name
            </summary>
            <param name="name">The name</param>
            <returns></returns>
        </member>
        <member name="P:CommonTools.Web.Navigation.SiteMapMenuSection.SiteMapMenuElementCollection">
            <summary>
            holds the collection of SiteMapMenu objects in the app.config.
            </summary>
        </member>
        <member name="P:CommonTools.Web.Navigation.SiteMapMenuSection.SiteMapMenuControllerProviderType">
            <summary>
            The number of minutes to hold the SiteMapMenud object.
            </summary>
        </member>
        <member name="P:CommonTools.Web.Navigation.SiteMapMenuSection.SiteMapMenus">
            <summary>
            Gets the ISiteMapMenuItem collection associated with this ISiteMapMenuController.
            </summary>
            <value>The SiteMapMenu items.</value>
        </member>
        <member name="P:CommonTools.Web.Navigation.SiteMapMenuSection.UrlRewriteController">
            <summary>
            Gets the URL rewrite controller.
            </summary>
            <value>The URL rewrite controller.</value>
        </member>
        <member name="T:CommonTools.Web.Navigation.SiteMapMenuElements">
            <summary>
            Provides the handler for each individual SiteMapMenu node in the SiteMapMenu section of app.config.
            </summary>
        </member>
        <member name="M:CommonTools.Web.Navigation.SiteMapMenuElements.CreateNewElement">
            <summary>
            Overridden. Creates a new SiteMapMenuElement.
            </summary>
            <returns></returns>
        </member>
        <member name="M:CommonTools.Web.Navigation.SiteMapMenuElements.GetElementKey(System.Configuration.ConfigurationElement)">
            <summary>
            Overridden. Retrieves the specified SiteMapMenu element name for the given weak typed node.
            </summary>
            <param name="element">The node in app.config</param>
            <returns>The SiteMapMenu element name located at the configuration element.</returns>
        </member>
        <member name="T:CommonTools.Web.Navigation.SiteMapMenuItemElements">
            <summary>
            Provides the handler for each individual SiteMapMenuItem node in the SiteMapMenu section of app.config.
            </summary>
        </member>
        <member name="M:CommonTools.Web.Navigation.SiteMapMenuItemElements.CreateNewElement">
            <summary>
            Overridden. Creates a new SiteMapMenuElement.
            </summary>
            <returns></returns>
        </member>
        <member name="M:CommonTools.Web.Navigation.SiteMapMenuItemElements.GetElementKey(System.Configuration.ConfigurationElement)">
            <summary>
            Overridden. Retrieves the specified SiteMapMenu element name for the given weak typed node.
            </summary>
            <param name="element">The node in app.config</param>
            <returns>The SiteMapMenu element name located at the configuration element.</returns>
        </member>
        <member name="T:CommonTools.Web.Navigation.SiteMapMenuElement">
            <summary>
            Provides the SiteMapMenu element object as specified through app.config.
            </summary>
        </member>
        <member name="T:CommonTools.Web.Navigation.ISiteMapMenu">
            <summary>
            This interface enforces all properties needed for 
            </summary>
        </member>
        <member name="M:CommonTools.Web.Navigation.ISiteMapMenu.GetMatchingSiteMapMenuItem(System.String)">
            <summary>
            Gets the matching site map menu item.
            </summary>
            <param name="name">The name.</param>
            <returns></returns>
        </member>
        <member name="P:CommonTools.Web.Navigation.ISiteMapMenu.Name">
            <summary>
            Gets the name of the <see cref="T:CommonTools.Web.Navigation.IUrlRewriteItem"/>.
            </summary>
            <value>The name.</value>
        </member>
        <member name="P:CommonTools.Web.Navigation.ISiteMapMenu.MenuNodes">
            <summary>
            Gets the child nodes.
            </summary>
            <value>The child nodes.</value>
        </member>
        <member name="P:CommonTools.Web.Navigation.ISiteMapMenu.EnableCaching">
            <summary>
            Gets or sets a value indicating whether [enable caching].
            </summary>
            <value><c>true</c> if [enable caching]; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:CommonTools.Web.Navigation.ISiteMapMenu.CacheDurationInSeconds">
            <summary>
            Gets or sets the cache duration in seconds.
            </summary>
            <value>The cache duration in seconds.</value>
        </member>
        <member name="P:CommonTools.Web.Navigation.ISiteMapMenu.CacheItemPriority">
            <summary>
            Gets or sets the cache item priority.
            </summary>
            <value>The cache item priority.</value>
        </member>
        <member name="M:CommonTools.Web.Navigation.SiteMapMenuElement.GetMatchingSiteMapMenuItem(System.String)">
            <summary>
            Gets the matching site map menu item.
            </summary>
            <param name="name">The name.</param>
            <returns></returns>
        </member>
        <member name="P:CommonTools.Web.Navigation.SiteMapMenuElement.SiteMapMenuItemElementCollection">
            <summary>
            holds the collection of SiteMapMenu objects in the app.config.
            </summary>
        </member>
        <member name="P:CommonTools.Web.Navigation.SiteMapMenuElement.Name">
            <summary>
            Gets the name of the <see cref="T:CommonTools.Web.Navigation.ISiteMapMenuItem"/>.
            </summary>
            <value>The name.</value>
        </member>
        <member name="P:CommonTools.Web.Navigation.SiteMapMenuElement.MenuNodes">
            <summary>
            Gets the child nodes.
            </summary>
            <value>The child nodes.</value>
        </member>
        <member name="P:CommonTools.Web.Navigation.SiteMapMenuElement.EnableCaching">
            <summary>
            A suffix to uniquely identify the UrlRewrite type.
            </summary>
        </member>
        <member name="P:CommonTools.Web.Navigation.SiteMapMenuElement.CacheDurationInSeconds">
            <summary>
            A suffix to uniquely identify the UrlRewrite type.
            </summary>
        </member>
        <member name="P:CommonTools.Web.Navigation.SiteMapMenuElement.CacheItemPriority">
            <summary>
            A suffix to uniquely identify the UrlRewrite type.
            </summary>
        </member>
        <member name="T:CommonTools.Web.Navigation.SiteMapMenuItemElement">
            <summary>
            Provides the SiteMapMenuItem element object as specified through app.config.
            </summary>
        </member>
        <member name="M:CommonTools.Web.Navigation.SiteMapMenuItemElement.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:CommonTools.Web.Navigation.SiteMapMenuItemElement"/> class.
            </summary>
        </member>
        <member name="M:CommonTools.Web.Navigation.SiteMapMenuItemElement.#ctor(CommonTools.Web.Navigation.ISiteMapMenuItem)">
            <summary>
            Initializes a new instance of the <see cref="T:CommonTools.Web.Navigation.SiteMapMenuItemElement"/> class.
            </summary>
            <param name="parentNode">The parent node.</param>
        </member>
        <member name="P:CommonTools.Web.Navigation.SiteMapMenuItemElement.SiteMapMenuItemElementCollection">
            <summary>
            holds the collection of SiteMapMenu objects in the app.config.
            </summary>
        </member>
        <member name="P:CommonTools.Web.Navigation.SiteMapMenuItemElement.UrlRewriteItemName">
            <summary>
            Gets the name of the <see cref="T:CommonTools.Web.Navigation.IUrlRewriteItem"/>.
            </summary>
            <value>The name.</value>
        </member>
        <member name="P:CommonTools.Web.Navigation.SiteMapMenuItemElement.Name">
            <summary>
            Gets the name of the <see cref="T:CommonTools.Web.Navigation.IUrlRewriteItem"/>.
            </summary>
            <value>The name.</value>
        </member>
        <member name="P:CommonTools.Web.Navigation.SiteMapMenuItemElement.BreadcrumbTitle">
            <summary>
            Gets the breadcrumb title.
            </summary>
            <value>The breadcrumb title.</value>
        </member>
        <member name="P:CommonTools.Web.Navigation.SiteMapMenuItemElement.Title">
            <summary>
            Gets the title.
            </summary>
            <value>The title.</value>
        </member>
        <member name="P:CommonTools.Web.Navigation.SiteMapMenuItemElement.ChildNodes">
            <summary>
            Gets the child nodes.
            </summary>
            <value>The child nodes.</value>
        </member>
        <member name="P:CommonTools.Web.Navigation.SiteMapMenuItemElement.IsRoot">
            <summary>
            Gets a value indicating whether this instance is the root node.
            </summary>
            <value><c>true</c> if this instance is root; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:CommonTools.Web.Navigation.SiteMapMenuItemElement.ParentNode">
            <summary>
            Gets the parent node.
            </summary>
            <value>The parent node.</value>
        </member>
        <member name="P:CommonTools.Web.Navigation.SiteMapMenuItemElement.UrlRewriteItem">
            <summary>
            Gets the parent node.
            </summary>
            <value>The parent node.</value>
        </member>
        <member name="T:CommonTools.IO.Csv.MissingFieldAction">
            <summary>
            Specifies the action to take when a field is missing.
            </summary>
        </member>
        <member name="F:CommonTools.IO.Csv.MissingFieldAction.ParseError">
            <summary>
            Treat as a parsing error.
            </summary>
        </member>
        <member name="F:CommonTools.IO.Csv.MissingFieldAction.ReplaceByEmpty">
            <summary>
            Replaces by an empty value.
            </summary>
        </member>
        <member name="F:CommonTools.IO.Csv.MissingFieldAction.ReplaceByNull">
            <summary>
            Replaces by a null value (<see langword="null"/>).
            </summary>
        </member>
        <member name="T:CommonTools.ConversionHelper">
            <summary>
            
            </summary>
        </member>
        <member name="M:CommonTools.ConversionHelper.ToCanonical(System.DateTime)">
            <summary>
            ConversionHelpers this datetime object to a canonical formated string that
            can be recognized by SQL. ()Format: MM.DD.YYYY hh:mm:ss.ms
            </summary>
            <param name="dt">The datetime object</param>
            <returns></returns>
        </member>
        <member name="M:CommonTools.ConversionHelper.ToSqlSmallDateTime(System.DateTime)">
            <summary>
            Converts this object to a SqlSmallDateTime (cuts off the seconds and milliseconds)
            </summary>
            <param name="dateTime">The date time.</param>
            <returns></returns>
        </member>
        <member name="M:CommonTools.ConversionHelper.Format(System.String,CommonTools.TextFormatOptions[])">
            <summary>
            Formats a given text with some specified options.
            </summary>
            <param name="text">The text to format</param>
            <param name="options">The options to use in order to format the text.</param>
            <returns>A with the specified options formated string.</returns>
        </member>
        <member name="M:CommonTools.ConversionHelper.ToLoweredInitalString(System.String)">
            <summary>
            Gets a string with a lower-case initial letter, e.g.: ThisIsMyString -> thisIsMyString
            </summary>
            <param name="text">The string to ConversionHelper</param>
            <returns>a string with a lower-case initial letter</returns>
        </member>
        <member name="M:CommonTools.ConversionHelper.ToUpperCaseWordsString(System.String)">
            <summary>
            ConversionHelpers the given string to upper case only words, e.g.: this is My STRING -> This Is My String
            </summary>
            <param name="text">The string to ConversionHelper</param>
            <returns>to upper case only words ConversionHelpered string</returns>
        </member>
        <member name="M:CommonTools.ConversionHelper.ToQuerystringParameter(System.String,System.String)">
            <summary>
            This method gets a special-character safe querystring parameter
            </summary>
            <param name="id">The ID of the parameter</param>
            <param name="text">The value of the parameter</param>
            <returns>a special-character safe querystring parameter in the format {id}={value}</returns>
        </member>
        <member name="M:CommonTools.ConversionHelper.UrlEncode(System.String)">
            <summary>
            Transforms a given string to its querystring-safe representation.
            </summary>
            <param name="text">The string to ConversionHelper</param>
            <returns>The querystring-safe representation of a given string</returns>
        </member>
        <member name="M:CommonTools.ConversionHelper.UrlDecode(System.String)">
            <summary>
            ConversionHelpers a string that has been encoded for transmission in a URL into a
            decoded string.
            </summary>
            <param name="text">The string to ConversionHelper</param>
            <returns>The querystring-safe representation of a given string</returns>
        </member>
        <member name="M:CommonTools.ConversionHelper.SplitLongWords(System.String,System.String,System.Int32)">
            <summary>
            Splits long words using the splitter supplied, and limiting word lengths to whatever is specified.
            </summary>
            <param name="text">the text to check</param>
            <param name="splitter">the splitter</param>
            <param name="maxWordLength">maximum word length</param>
            <returns></returns>
        </member>
        <member name="M:CommonTools.ConversionHelper.ToFriendlyMailAddress(System.String,System.String)">
            <summary>
            Gets a friendly mail address.
            </summary>
            <param name="mailAddress">The mail address</param>
            <param name="friendlyName">Name of the p friendly.</param>
            <returns>A string in the friendly address name format</returns>
        </member>
        <member name="M:CommonTools.ConversionHelper.ConversionHelperTextBoxToHtml(System.String,System.Int32,System.Boolean)">
            <summary>
            ConversionHelpers all returns ( \r\n ) from an asp:TextBox to HTML &lt;br /&gt;. Additionally, words that
            contain more characters than defined in the maxWordLength parameter get splitted by a blank
            character.
            </summary>
            <param name="text">The text to ConversionHelper</param>
            <param name="maxWordLength">The maximum length of a word before it gets splitted by a blank character</param>
            <param name="removeBadTags">Set to true to also strip out invalid tags.</param>
            <returns></returns>
        </member>
        <member name="M:CommonTools.ConversionHelper.ConversionHelperTextBoxToHtml(System.String)">
            <summary>
            ConversionHelpers all returns ( \r\n ) from an asp:TextBox to HTML &lt;br /&gt;.
            </summary>
            <param name="text">The text to ConversionHelper</param>
            <returns></returns>
        </member>
        <member name="M:CommonTools.ConversionHelper.ConversionHelperTextBoxToHtml(System.String,System.Int32)">
            <summary>
            ConversionHelpers all returns ( \r\n ) from an asp:TextBox to HTML &lt;br /&gt;.
            </summary>
            <param name="text">The text to ConversionHelper</param>
            <param name="maxWordLength">Cut off after this many bytes (-1 to use infinite).</param>
            <returns></returns>
        </member>
        <member name="M:CommonTools.ConversionHelper.RemoveMaliciousTags(System.String,System.String)">
            <summary>
            Removes bad tags from string.
            </summary>
            <param name="text">The string to replace bad tags from</param>
            <param name="maliciousTags">bad tags in the following format: "tagname|tagname|tagname|...|tagname"</param>
            <returns>the input string without the specified bad tags</returns>
        </member>
        <member name="M:CommonTools.ConversionHelper.RemoveMaliciousTags(System.String)">
            <summary>
            Removes the following tags from string a string: 
            abbr|acronym|address|applet|area|base|basefont|bdo|big|body|button|
            caption|center|cite|code|col|colgroup|dd|del|dir|div|dfn|dl|dt|embed|
            fieldset|font|form|frame|frameset|head|html|iframe|img|input|ins|
            isindex|kbd|label|legend|link|map|menu|meta|noframes|noscript|object|
            optgroup|option|param|pre|q|s|samp|script|select|small|span|strike|
            style|table|tbody|td|textarea|tfoot|th|thead|title|tr|tt|var|xmp
            </summary>
            <param name="text">The string to replace bad tags from</param>
            <returns>A "bad-tag-free" string.</returns>
        </member>
        <member name="M:CommonTools.ConversionHelper.ConversionHelperHtmlToTextBox(System.String)">
            <summary>
            ConversionHelpers HTML markup to a string that can be displayed safely in a text input field or textarea
            </summary>
            <param name="text">The HTML markup text</param>
            <returns>A string that can be displayed safely in a text input field or textarea</returns>
        </member>
        <member name="M:CommonTools.ConversionHelper.RemoveLineBreaks(System.String)">
            <summary>
            Removes all line breaks inside a given string.
            </summary>
            <param name="text">The text to remove the line-breaks from</param>
            <returns>A text without linebreaks.</returns>
        </member>
        <member name="M:CommonTools.ConversionHelper.HighlightWord(System.String,System.String,System.String)">
            <summary>
            Highlights a specified text pattern inside a string by wrapping it with a span that has the associated
            Css Class.
            </summary>
            <param name="text">The text to highlight content from</param>
            <param name="wordToHighlight">The text to highlight</param>
            <param name="highlightCssClass">The CSS class responsible for highlighting</param>
            <returns></returns>
        </member>
        <member name="M:CommonTools.ConversionHelper.RemoveTags(System.String)">
            <summary>
            Removes all html/xml tags from a specified string.
            </summary>
            <param name="text">String to be cleaned from tags</param>
            <returns>The specified string without tags</returns>
        </member>
        <member name="M:CommonTools.ConversionHelper.RemoveScriptTags(System.String)">
            <summary>
            This methods removes all javascript script tags from the given string
            </summary>
            <param name="text">Text to be cleaned for script tags</param>
            <returns>Clean text with no script tags.</returns>
        </member>
        <member name="M:CommonTools.ConversionHelper.DefuseScriptTags(System.String)">
            <summary>
            This method defuses script tags by replacing the opening tag bracket with &lt;.
            </summary>
            <param name="text">Text to be cleaned for script tags</param>
            <returns>Clean text with no script tags.</returns>
        </member>
        <member name="M:CommonTools.ConversionHelper.RemoveMaliciousSQLCharacters(System.String)">
            <summary>
            Removes characters that can be used for SQL injections.
            </summary>
            <param name="text">The text to remove the bad characters from</param>
            <returns>A bad SQL character clean string</returns>
        </member>
        <member name="M:CommonTools.ConversionHelper.Abbreviate(System.String,System.Int32,System.String)">
            <summary>
            This method cuts a string if it exceeds a given maximum length. Optionally, you can define
            a suffix (e.g.: "...") to be attached when the string is to long.
            </summary>
            <param name="text">The string to format</param>
            <param name="maxLength">The maximum length of the string</param>
            <param name="suffix">The text to attach if the word exceeds the maximum length.</param>
            <example>
            <![CDATA[
                string text = "abcdefghijklmn"; 
                
                // ConversionHelper text to "abcd..."
                text = text.Abbreviate(7, "...");
            ]]>
            </example>
            <returns></returns>
        </member>
        <member name="M:CommonTools.ConversionHelper.Abbreviate(System.String,System.Int32)">
            <summary>
            This method cuts a string if it exceeds a given maximum length. Optionally, you can define
            a suffix (e.g.: "...") to be attached when the string is to long.
            </summary>
            <param name="text">The string to format</param>
            <param name="maxLength">The maximum length of the string</param>
            <returns></returns>
        </member>
        <member name="M:CommonTools.ConversionHelper.Abbreviate(System.String,System.Int32,System.Boolean)">
            <summary>
            This method cuts a string if it exceeds a given maximum length. Optionally, you can define
            a suffix (e.g.: "...") to be attached when the string is to long.
            </summary>
            <param name="text">The string to format</param>
            <param name="maxLength">The maximum length of the string</param>
            <param name="attachPoints">if true, "..." is attached when the string is too long.</param>
            <returns></returns>
        </member>
        <member name="M:CommonTools.ConversionHelper.ToDebugString``2(System.Collections.Generic.Dictionary{``0,``1},CommonTools.TextFormat)">
            <summary>
            ConversionHelpers a Dictionary to a debug string
            </summary>
            <typeparam name="TKey">The type of the key.</typeparam>
            <typeparam name="TValue">The type of the value.</typeparam>
            <param name="dictionary">The dictionary.</param>
            <param name="format">The format.</param>
            <returns></returns>
        </member>
        <member name="M:CommonTools.ConversionHelper.ToQueryStringInteger(System.String)">
            <summary>
            This method returns an integer extracted from a querystring parameter. 
            </summary>
            <example>
            You can use this extension in the following way ->
            
            int? myPostID = HttpContext.Current.Request.QueryString["postId"].ToQueryStringInteger();
            if (myPostID != null)
            {
                // ... do something
            }
            
            </example>
            <param name="text">The text.</param>
            <returns></returns>
        </member>
        <member name="M:CommonTools.ConversionHelper.GetDebugString(System.Type,System.String)">
            <summary>
            Gets all the enum names of a specified enum type as a human readable string.
            </summary>
            <param name="enumType">Type of the enum.</param>
            <param name="separator">The separator.</param>
            <returns></returns>
        </member>
        <member name="M:CommonTools.ConversionHelper.GetDebugString(System.Collections.ICollection,System.String)">
            <summary>
            Gets all the collection's values as a human readable string.
            </summary>
            <param name="obj">The obj.</param>
            <param name="separator">The separator.</param>
            <returns></returns>
        </member>
        <member name="M:CommonTools.ConversionHelper.GetFormattedException(System.String,System.Exception)">
            <summary>
            Returns an exception with all its inner exceptions as a formatted string.
            </summary>
            <param name="message">The message.</param>
            <param name="e">The exception.</param>
            <returns></returns>
        </member>
        <member name="M:CommonTools.ConversionHelper.GetFormattedException(System.String,System.Exception,CommonTools.TextFormat)">
            <summary>
            Returns an exception with all its inner exceptions as a formatted string.
            </summary>
            <param name="message">The message.</param>
            <param name="e">The exception.</param>
            <param name="textFormat">The text format.</param>
            <returns></returns>
        </member>
        <member name="M:CommonTools.ConversionHelper.CascadeProperties``1(``0,``0)">
            <summary>
            Cascades the properties.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="record">The record.</param>
            <param name="parent">The parent.</param>
        </member>
        <member name="M:CommonTools.ConversionHelper.ExtractExtraInfo``1(``0)">
            <summary>
            Extracts the extra info.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="record">The record.</param>
            <returns></returns>
        </member>
        <member name="M:CommonTools.ConversionHelper.ExtractExtraInfo``1(``0,System.Boolean)">
            <summary>
            Extracts extra info properties from a given interface
            </summary>
            <typeparam name="T"></typeparam>
            <param name="record">The record.</param>
            <param name="returnNullIfEmpty">if set to <c>true</c> [return null if empty].</param>
            <returns></returns>
        </member>
        <member name="M:CommonTools.ConversionHelper.ExtractExtraInfo``1(``0,System.String,System.Boolean)">
            <summary>
            Extracts extra info properties from a given interface
            </summary>
            <typeparam name="T"></typeparam>
            <param name="record">The record.</param>
            <param name="rootName">Name of the root node.</param>
            <param name="returnNullIfEmpty">if set to <c>true</c> [return null if empty].</param>
            <returns></returns>
        </member>
        <member name="M:CommonTools.ConversionHelper.XmlEncode(System.String)">
            <summary>
            Encodes an XML value
            </summary>
            <param name="text">The text to encode.</param>
            <returns></returns>
        </member>
        <member name="M:CommonTools.ConversionHelper.ParseXElementNode(System.Type,System.Xml.Linq.XElement,System.Xml.Linq.XName,System.Object)">
            <summary>
            Parses the X element node.
            </summary>
            <param name="type">The type.</param>
            <param name="container">The container.</param>
            <param name="name">The name.</param>
            <param name="defaultValue">The default value.</param>
            <returns></returns>
        </member>
        <member name="M:CommonTools.ConversionHelper.SetXElementNodeLookup(System.Xml.Linq.XElement,System.Xml.Linq.XName,System.Collections.IDictionary)">
            <summary>
            Sets the X element node lookup.
            </summary>
            <param name="element">The element.</param>
            <param name="name">The name.</param>
            <param name="obj">The obj.</param>
        </member>
        <member name="M:CommonTools.ConversionHelper.ParseXElementNodeLookup``1(System.Xml.Linq.XElement,System.Xml.Linq.XName,``0)">
            <summary>
            Parses the X element node lookup.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="container">The container.</param>
            <param name="name">The name.</param>
            <param name="defaultValue">The default value.</param>
            <returns></returns>
        </member>
        <member name="M:CommonTools.ConversionHelper.SetXElementNodeList(System.Xml.Linq.XElement,System.Xml.Linq.XName,System.Collections.IEnumerable)">
            <summary>
            Sets the X element node list.
            </summary>
            <param name="element">The element.</param>
            <param name="name">The name.</param>
            <param name="obj">The obj.</param>
        </member>
        <member name="M:CommonTools.ConversionHelper.ParseXElementNodeList``1(System.Xml.Linq.XElement,System.Xml.Linq.XName,``0)">
            <summary>
            Parses the X element node list.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="container">The container.</param>
            <param name="name">The name.</param>
            <param name="defaultValue">The default value.</param>
            <returns></returns>
        </member>
        <member name="M:CommonTools.ConversionHelper.ParseXElementNode``1(System.Xml.Linq.XElement,System.Xml.Linq.XName,``0)">
            <summary>
            Parses the X element node to the specified type.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="container">The parent XElement that contains the tag.</param>
            <param name="name">The name of the tag.</param>
            <param name="defaultValue">The default value if the tag can't be found at the default element (can be null with
            nullable objects).</param>
            <returns>The object parsed from the tag, the default value if the tag was not found or invalid.</returns>
            <exception cref="T:System.FormatException">Throws a System.FormatException if the specified generic type could not be parsed.</exception>
        </member>
        <member name="M:CommonTools.ConversionHelper.GenerateXElement(System.String,System.Collections.Generic.List{System.Collections.Generic.KeyValuePair{System.String,System.Object}})">
            <summary>
            Generates the X element.
            </summary>
            <param name="rootTagName">Name of the root tag.</param>
            <param name="objects">The objects.</param>
            <returns></returns>
        </member>
        <member name="M:CommonTools.ConversionHelper.GetCollectionString(System.Type,System.String)">
            <summary>
            Gets all the enum names of a specified enum type as a human readable string.
            </summary>
            <param name="enumType">Type of the enum.</param>
            <param name="separator">The separator.</param>
            <returns></returns>
        </member>
        <member name="M:CommonTools.ConversionHelper.GetCollectionString(System.Collections.IEnumerable,System.String)">
            <summary>
            Gets all the enumerable object's values as a human readable string.
            </summary>
            <param name="obj">The obj.</param>
            <param name="separator">The separator.</param>
            <returns></returns>
        </member>
        <member name="M:CommonTools.ConversionHelper.GetCollectionString(System.Collections.ICollection,System.String)">
            <summary>
            Gets all the collection's values as a human readable string.
            </summary>
            <param name="obj">The obj.</param>
            <param name="separator">The separator.</param>
            <returns></returns>
        </member>
        <member name="M:CommonTools.ConversionHelper.GetCollectionString``1(System.Collections.Generic.IEnumerable{``0},System.String,System.String)">
            <summary>
            Gets the collection string.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="obj">The obj.</param>
            <param name="separator">The separator.</param>
            <param name="format">The format.</param>
            <returns></returns>
        </member>
        <member name="M:CommonTools.ConversionHelper.GetField``1(System.Collections.Generic.IDictionary{System.String,System.Object},System.String)">
            <summary>
            Gets a generic field from a specified dictionary.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="dictionary">The dictionary.</param>
            <param name="fieldName">Name of the field.</param>
            <returns></returns>
        </member>
        <member name="M:CommonTools.ConversionHelper.GetField``1(System.Collections.Generic.IDictionary{System.String,System.Object},System.String,System.Boolean)">
            <summary>
            Gets a generic field from a specified dictionary.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="dictionary">The dictionary.</param>
            <param name="fieldName">Name of the field.</param>
            <param name="upperCase">if set to <c>true</c> [upper case].</param>
            <returns></returns>
        </member>
        <member name="M:CommonTools.ConversionHelper.GetField``1(System.Collections.Generic.IDictionary{System.String,System.Object},System.String,System.Boolean,``0)">
            <summary>
            Gets a generic field from a specified dictionary.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="dictionary">The dictionary.</param>
            <param name="fieldName">Name of the field.</param>
            <param name="upperCase">if set to <c>true</c> [upper case].</param>
            <param name="defaultValue">The default value.</param>
            <returns></returns>
        </member>
        <member name="M:CommonTools.ConversionHelper.GetField``1(System.Collections.Generic.IDictionary{System.String,System.String},System.String)">
            <summary>
            Gets a generic field from a specified dictionary.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="dictionary">The dictionary.</param>
            <param name="fieldName">Name of the field.</param>
            <returns></returns>
        </member>
        <member name="M:CommonTools.ConversionHelper.GetField``1(System.Collections.Generic.IDictionary{System.String,System.String},System.String,System.Boolean)">
            <summary>
            Gets a generic field from a specified dictionary.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="dictionary">The dictionary.</param>
            <param name="fieldName">Name of the field.</param>
            <param name="upperCase">if set to <c>true</c> [upper case].</param>
            <returns></returns>
        </member>
        <member name="M:CommonTools.ConversionHelper.GetField``1(System.Collections.Generic.IDictionary{System.String,System.String},System.String,System.Boolean,``0)">
            <summary>
            Gets a generic field from a specified dictionary.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="dictionary">The dictionary.</param>
            <param name="fieldName">Name of the field.</param>
            <param name="upperCase">if set to <c>true</c> [upper case].</param>
            <param name="defaultValue">The default value.</param>
            <returns></returns>
        </member>
        <member name="M:CommonTools.ConversionHelper.TryParse``1(System.Object,``0@)">
            <summary>
            Tries the parse.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="rawField">The raw field.</param>
            <param name="value">The value.</param>
            <returns></returns>
        </member>
        <member name="M:CommonTools.ConversionHelper.TryGetField``1(System.String,System.Char,System.Int32,``0@)">
            <summary>
            This method takes a string as input and tries to extract a value from a specified array index in the string after splitting it into
            an array using a given delimiter
            </summary>
            <typeparam name="T"></typeparam>
            <param name="text">The text.</param>
            <param name="delimiter">The delimiter.</param>
            <param name="index">The index.</param>
            <param name="value">The value.</param>
            <returns>true if successful, otherwise false</returns>
        </member>
        <member name="M:CommonTools.ConversionHelper.TryGetField``1(System.String[],System.Int32,``0@)">
            <summary>
            This method takes a string array as input and tries to extract a value from the specified index
            </summary>
            <typeparam name="T"></typeparam>
            <param name="splitted">The splitted.</param>
            <param name="index">The index.</param>
            <param name="value">The value.</param>
            <returns>true if successful, otherwise false</returns>
        </member>
        <member name="M:CommonTools.ConversionHelper.TryGetField``1(System.String[],System.Int32,System.Int32,``0@)">
            <summary>
            This method takes a string array as input and tries to extract a value from the specified index
            </summary>
            <typeparam name="T"></typeparam>
            <param name="splitted">The splitted.</param>
            <param name="splittedLength">Length of the array. Use this parameter if you already calculated the length of the array</param>
            <param name="index">The index.</param>
            <param name="value">The value.</param>
            <returns></returns>
        </member>
        <member name="T:CommonTools.Data.DataAccessManagerStoredProcedureException">
            <summary>
            Exception that gets thrown by the CommonTools.Components.Caching namespace
            </summary>
        </member>
        <member name="T:CommonTools.Data.DataAccessManagerException">
            <summary>
            Exception that gets thrown by the CommonTools.Components.Caching namespace
            </summary>
        </member>
        <member name="M:CommonTools.Data.DataAccessManagerException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:CommonTools.Data.DataAccessManagerException"/> class.
            </summary>
            <param name="message">The message.</param>
        </member>
        <member name="M:CommonTools.Data.DataAccessManagerException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:CommonTools.Data.DataAccessManagerException"/> class.
            </summary>
            <param name="message">The message.</param>
            <param name="inner">The inner.</param>
        </member>
        <member name="M:CommonTools.Data.DataAccessManagerStoredProcedureException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:CommonTools.Data.DataAccessManagerStoredProcedureException"/> class.
            </summary>
            <param name="message">The message</param>
        </member>
        <member name="M:CommonTools.Data.DataAccessManagerStoredProcedureException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:CommonTools.Data.DataAccessManagerStoredProcedureException"/> class.
            </summary>
            <param name="message">The message.</param>
            <param name="inner">The inner.</param>
        </member>
        <member name="T:CommonTools.Components.Logging.LogDatasets">
             <summary>
            Represents a strongly typed in-memory cache of data.
            </summary>
        </member>
        <member name="T:CommonTools.Components.Logging.LogDatasets.EventLogDataTable">
             <summary>
            Represents the strongly named DataTable class.
            </summary>
        </member>
        <member name="T:CommonTools.Components.Logging.LogDatasets.ExceptionLogDataTable">
             <summary>
            Represents the strongly named DataTable class.
            </summary>
        </member>
        <member name="T:CommonTools.Components.Logging.LogDatasets.EventLogRow">
             <summary>
            Represents strongly named DataRow class.
            </summary>
        </member>
        <member name="T:CommonTools.Components.Logging.LogDatasets.ExceptionLogRow">
             <summary>
            Represents strongly named DataRow class.
            </summary>
        </member>
        <member name="T:CommonTools.Components.Logging.LogDatasets.EventLogRowChangeEvent">
             <summary>
            Row event argument class
            </summary>
        </member>
        <member name="T:CommonTools.Components.Logging.LogDatasets.ExceptionLogRowChangeEvent">
             <summary>
            Row event argument class
            </summary>
        </member>
        <member name="T:CommonTools.Components.Security.RijndaelSimpleKeySize">
            <summary>
            Enumeration for all possible KeySizes to be used at RijndaelSimple class
            </summary>
        </member>
        <member name="F:CommonTools.Components.Security.RijndaelSimpleKeySize.Small">
            <summary>
            keysize is 128
            </summary>
        </member>
        <member name="F:CommonTools.Components.Security.RijndaelSimpleKeySize.Medium">
            <summary>
            keysize is 192
            </summary>
        </member>
        <member name="F:CommonTools.Components.Security.RijndaelSimpleKeySize.Safe">
            <summary>
            keysize is 256
            </summary>
        </member>
        <member name="T:CommonTools.Components.Security.RijndaelSimple">
            <summary>
            This class uses a symmetric key algorithm (Rijndael/AES) to encrypt and 
            decrypt data. As long as encryption and decryption routines use the same
            parameters to generate the keys, the keys are guaranteed to be the same.
            The class uses static functions with duplicate code to make it easier to
            demonstrate encryption and decryption logic. In a real-life application, 
            this may not be the most efficient way of handling encryption, so - as
            soon as you feel comfortable with it - you may want to redesign this class.
            </summary>
        </member>
        <member name="M:CommonTools.Components.Security.RijndaelSimple.Encrypt(System.String,System.String,System.String,System.String,System.Int32,System.String,System.Int32)">
            <summary>
            Encrypts specified plaintext using Rijndael symmetric key algorithm
            and returns a base64-encoded result.
            </summary>
            <param name="plainText">
            Plaintext value to be encrypted.
            </param>
            <param name="passPhrase">
            Passphrase from which a pseudo-random password will be derived. The
            derived password will be used to generate the encryption key.
            Passphrase can be any string. In this example we assume that this
            passphrase is an ASCII string.
            </param>
            <param name="saltValue">
            Salt value used along with passphrase to generate password. Salt can
            be any string. In this example we assume that salt is an ASCII string.
            </param>
            <param name="hashAlgorithm">
            Hash algorithm used to generate password. Allowed values are: "MD5" and
            "SHA1". SHA1 hashes are a bit slower, but more secure than MD5 hashes.
            </param>
            <param name="passwordIterations">
            Number of iterations used to generate password. One or two iterations
            should be enough.
            </param>
            <param name="initVector">
            Initialization vector (or IV). This value is required to encrypt the
            first block of plaintext data. For RijndaelManaged class IV must be 
            exactly 16 ASCII characters long.
            </param>
            <param name="keySize">
            Size of encryption key in bits. Allowed values are: 128, 192, and 256. 
            Longer keys are more secure than shorter keys.
            </param>
            <returns>
            Encrypted value formatted as a base64-encoded string.
            </returns>
        </member>
        <member name="M:CommonTools.Components.Security.RijndaelSimple.Decrypt(System.String,System.String,System.String,System.String,System.Int32,System.String,System.Int32)">
            <summary>
            Decrypts specified ciphertext using Rijndael symmetric key algorithm.
            </summary>
            <param name="cipherText">
            Base64-formatted ciphertext value.
            </param>
            <param name="passPhrase">
            Passphrase from which a pseudo-random password will be derived. The
            derived password will be used to generate the encryption key.
            Passphrase can be any string. In this example we assume that this
            passphrase is an ASCII string.
            </param>
            <param name="saltValue">
            Salt value used along with passphrase to generate password. Salt can
            be any string. In this example we assume that salt is an ASCII string.
            </param>
            <param name="hashAlgorithm">
            Hash algorithm used to generate password. Allowed values are: "MD5" and
            "SHA1". SHA1 hashes are a bit slower, but more secure than MD5 hashes.
            </param>
            <param name="passwordIterations">
            Number of iterations used to generate password. One or two iterations
            should be enough.
            </param>
            <param name="initVector">
            Initialization vector (or IV). This value is required to encrypt the
            first block of plaintext data. For RijndaelManaged class IV must be
            exactly 16 ASCII characters long.
            </param>
            <param name="keySize">
            Size of encryption key in bits. Allowed values are: 128, 192, and 256.
            Longer keys are more secure than shorter keys.
            </param>
            <returns>
            Decrypted string value.
            </returns>
            <remarks>
            Most of the logic in this function is similar to the Encrypt
            logic. In order for decryption to work, all parameters of this function
            - except cipherText value - must match the corresponding parameters of
            the Encrypt function which was called to generate the
            ciphertext.
            </remarks>
        </member>
        <member name="M:CommonTools.Components.Security.RijndaelSimple.Encrypt(System.String,System.String,System.String,System.String)">
            <summary>
            Encrypts a string using the Rijndael algo and encodes it into base64 format.
            Plaintext, salt, passphrase and initialization vectors are provided.
            </summary>
            <param name="pPlainText"></param>
            <param name="pPassPhrase"></param>
            <param name="pSaltValue"></param>
            <param name="pInitVector"></param>
            <returns></returns>
        </member>
        <member name="M:CommonTools.Components.Security.RijndaelSimple.Decrypt(System.String,System.String,System.String,System.String)">
            <summary>
            Decryps a block of text using the rijndael algorithm.
            </summary>
            <param name="pCipherText"></param>
            <param name="pPassPhrase"></param>
            <param name="pSaltValue"></param>
            <param name="pInitVector"></param>
            <returns></returns>
            <seealso cref="M:CommonTools.Components.Security.RijndaelSimple.Encrypt(System.String,System.String,System.String,System.String)"/>
        </member>
        <member name="T:CommonTools.Web.UI.BusinessObjectValidationControl">
            <summary>
            This class renders all validators needed to perform sufficiant client/serverside validation for
            a specified BaseBusinessObject property.
            </summary>
        </member>
        <member name="M:CommonTools.Web.UI.BusinessObjectValidationControl.customStringLengthValidator_ServerValidate(System.Object,System.Web.UI.WebControls.ServerValidateEventArgs)">
            <summary>
            Handles the ServerValidate event of the customStringLengthValidator control.
            </summary>
            <param name="sender">The source of the event.</param>
            <param name="e">The <see cref="T:System.Web.UI.WebControls.ServerValidateEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:CommonTools.Web.UI.BusinessObjectValidationControl.OnInit(System.EventArgs)">
            <summary>
            Raises the <see cref="E:System.Web.UI.Control.Init"></see> event.
            </summary>
            <param name="e">A <see cref="T:System.EventArgs"></see> that contains the event data.</param>
        </member>
        <member name="M:CommonTools.Web.UI.BusinessObjectValidationControl.OnPreRender(System.EventArgs)">
            <summary>
            Raises the <see cref="E:System.Web.UI.Control.PreRender"></see> event.
            </summary>
            <param name="e">A <see cref="T:System.EventArgs"></see> that contains the event data.</param>
        </member>
        <member name="M:CommonTools.Web.UI.BusinessObjectValidationControl.Render(System.Web.UI.HtmlTextWriter)">
            <summary>
            Displays the control on the client.
            </summary>
            <param name="writer">A <see cref="T:System.Web.UI.HtmlTextWriter"></see> that contains the output stream for rendering on the client.</param>
        </member>
        <member name="M:CommonTools.Web.UI.BusinessObjectValidationControl.EvaluateIsValid">
            <summary>
            When overridden in a derived class, this method contains the code to determine whether the value in the input control is valid.
            </summary>
            <returns>
            true if the value in the input control is valid; otherwise, false.
            </returns>
        </member>
        <member name="P:CommonTools.Web.UI.BusinessObjectValidationControl.ITextResourceManagerType">
            <summary>
            Gets or sets the type of the resource manager.
            </summary>
            <value>The type of the resource manager.</value>
        </member>
        <member name="P:CommonTools.Web.UI.BusinessObjectValidationControl.Type">
            <summary>
            Gets or sets the type of the BaseBusinessObject in the following format:
            'MyNamespace.SubNamspace.MyObjectDerivedFromBaseBusinessObject, AssemblyName'
            </summary>
            <value>The type.</value>
        </member>
        <member name="P:CommonTools.Web.UI.BusinessObjectValidationControl.Property">
            <summary>
            Gets or sets the property name of the via Type specified object.
            </summary>
            <value>The property.</value>
        </member>
        <member name="P:CommonTools.Web.UI.BusinessObjectValidationControl.ControlToCompare">
            <summary>
            Gets or sets the control to compare this control with if comparing is necessary.
            </summary>
            <value>The control to compare.</value>
        </member>
        <member name="P:CommonTools.Web.UI.BusinessObjectValidationControl.ErrorCssClass">
            <summary>
            The css class of the control to validate if the validation failed. Use this property if you want to 
            highlight or change the backgroundcolor of an input field that was invalid.
            </summary>
            <value>The error CSS class.</value>
        </member>
        <member name="P:CommonTools.Web.UI.BusinessObjectValidationControl.ValidCssClass">
            <summary>
            The css class of the control to validate if the validation was correct ( = normal css class).
            </summary>
            <value>The valid CSS class.</value>
        </member>
        <member name="P:CommonTools.Web.UI.BusinessObjectValidationControl.RangeValidationDataType">
            <summary>
            Gets or sets the data type that the values being compared are converted to
            before the comparison is made.
            </summary>
            <value>The type of the range validation data.</value>
        </member>
        <member name="T:CommonTools.IO.Csv.ParseErrorEventArgs">
            <summary>
            Provides data for the <see cref="M:CsvReader.ParseError"/> event.
            </summary>
        </member>
        <member name="F:CommonTools.IO.Csv.ParseErrorEventArgs._error">
            <summary>
            Contains the error that occured.
            </summary>
        </member>
        <member name="F:CommonTools.IO.Csv.ParseErrorEventArgs._action">
            <summary>
            Contains the action to take.
            </summary>
        </member>
        <member name="M:CommonTools.IO.Csv.ParseErrorEventArgs.#ctor(CommonTools.IO.Csv.MalformedCsvException,CommonTools.IO.Csv.ParseErrorAction)">
            <summary>
            Initializes a new instance of the ParseErrorEventArgs class.
            </summary>
            <param name="error">The error that occured.</param>
            <param name="defaultAction">The default action to take.</param>
        </member>
        <member name="P:CommonTools.IO.Csv.ParseErrorEventArgs.Error">
            <summary>
            Gets the error that occured.
            </summary>
            <value>The error that occured.</value>
        </member>
        <member name="P:CommonTools.IO.Csv.ParseErrorEventArgs.Action">
            <summary>
            Gets or sets the action to take.
            </summary>
            <value>The action to take.</value>
        </member>
        <member name="T:CommonTools.Core.Text">
            <summary>
            Various string utility functions.
            </summary>
        </member>
        <member name="M:CommonTools.Core.Text.GetLineBreak(CommonTools.TextFormat)">
            <summary>
            Gets a line break in the specified format.
            </summary>
            <param name="format">The format.</param>
            <returns></returns>
        </member>
        <member name="T:CommonTools.Components.Caching.CacheManager">
            <summary>
            Summary description for CacheManager
            </summary>
        </member>
        <member name="M:CommonTools.Components.Caching.CacheManager.PurgeCacheItemsByPrefix(System.String)">
            <summary>
            Remove from the ASP.NET cache all items whose key starts with the input prefix
            </summary>
        </member>
        <member name="M:CommonTools.Components.Caching.CacheManager.PurgeCacheItemsBySuffix(System.String)">
            <summary>
            Remove from the ASP.NET cache all items whose key ends with the input suffix
            </summary>
        </member>
        <member name="M:CommonTools.Components.Caching.CacheManager.PurgeCacheItemByKey(System.String)">
            <summary>
            Remove from the ASP.NET cache the item with the given key
            </summary>
        </member>
        <member name="M:CommonTools.Components.Caching.CacheManager.CacheData(System.String,System.Object,System.DateTime)">
            <summary>
            Cache the input data, if caching is enabled
            </summary>
        </member>
        <member name="M:CommonTools.Components.Caching.CacheManager.CacheData(System.String,System.Object,System.DateTime,System.Web.Caching.CacheItemPriority)">
            <summary>
            Cache the input data, if caching is enabled
            </summary>
        </member>
        <member name="M:CommonTools.Components.Caching.CacheManager.GetCacheElementSuffix(System.String)">
            <summary>
            
            </summary>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="T:CommonTools.TextFormat">
            <summary>
            
            </summary>
        </member>
        <member name="F:CommonTools.TextFormat.ASCII">
            <summary>
            
            </summary>
        </member>
        <member name="F:CommonTools.TextFormat.HTML">
            <summary>
            
            </summary>
        </member>
        <member name="T:CommonTools.Components.Flash.OpenFlashChart.XAxis">
            <summary>
            
            </summary>
        </member>
        <member name="T:CommonTools.Components.Flash.OpenFlashChart.Axis">
            <summary>
            
            </summary>
        </member>
        <member name="M:CommonTools.Components.Flash.OpenFlashChart.Axis.SetRange(System.Decimal,System.Decimal)">
            <summary>
            Sets the range.
            </summary>
            <param name="min">The min.</param>
            <param name="max">The max.</param>
        </member>
        <member name="M:CommonTools.Components.Flash.OpenFlashChart.Axis.SetRange(System.Decimal,System.Decimal,System.Int32)">
            <summary>
            Sets the range.
            </summary>
            <param name="min">The min.</param>
            <param name="max">The max.</param>
            <param name="step">The step.</param>
        </member>
        <member name="M:CommonTools.Components.Flash.OpenFlashChart.Axis.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:CommonTools.Components.Flash.OpenFlashChart.Axis"/> class.
            </summary>
        </member>
        <member name="M:CommonTools.Components.Flash.OpenFlashChart.Axis.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:CommonTools.Components.Flash.OpenFlashChart.Axis"/> class.
            </summary>
            <param name="steps">The steps.</param>
        </member>
        <member name="P:CommonTools.Components.Flash.OpenFlashChart.Axis.Stroke">
            <summary>
            Gets or sets the stroke.
            </summary>
            <value>The stroke.</value>
        </member>
        <member name="P:CommonTools.Components.Flash.OpenFlashChart.Axis.Colour">
            <summary>
            Gets or sets the colour.
            </summary>
            <value>The colour.</value>
        </member>
        <member name="P:CommonTools.Components.Flash.OpenFlashChart.Axis.GridColour">
            <summary>
            Gets or sets the grid colour.
            </summary>
            <value>The grid colour.</value>
        </member>
        <member name="P:CommonTools.Components.Flash.OpenFlashChart.Axis.Steps">
            <summary>
            Gets or sets the steps.
            </summary>
            <value>The steps.</value>
        </member>
        <member name="P:CommonTools.Components.Flash.OpenFlashChart.Axis.Min">
            <summary>
            Gets or sets the min.
            </summary>
            <value>The min.</value>
        </member>
        <member name="P:CommonTools.Components.Flash.OpenFlashChart.Axis.Max">
            <summary>
            Gets or sets the max.
            </summary>
            <value>The max.</value>
        </member>
        <member name="P:CommonTools.Components.Flash.OpenFlashChart.Axis.Axis3DWidth">
            <summary>
            Gets or sets the width of the axis3 D.
            </summary>
            <value>The width of the axis3 D.</value>
        </member>
        <member name="M:CommonTools.Components.Flash.OpenFlashChart.XAxis.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:CommonTools.Components.Flash.OpenFlashChart.XAxis"/> class.
            </summary>
        </member>
        <member name="P:CommonTools.Components.Flash.OpenFlashChart.XAxis.Offset">
            <summary>
            Gets or sets a value indicating whether this <see cref="T:CommonTools.Components.Flash.OpenFlashChart.XAxis"/> is offset.
            </summary>
            <value><c>true</c> if offset; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:CommonTools.Components.Flash.OpenFlashChart.XAxis.Labels">
            <summary>
            Gets or sets the labels.
            </summary>
            <value>The labels.</value>
        </member>
        <member name="P:CommonTools.Components.Flash.OpenFlashChart.XAxis.TickHeight">
            <summary>
            Gets or sets the height of the tick.
            </summary>
            <value>The height of the tick.</value>
        </member>
        <member name="P:CommonTools.Components.Flash.OpenFlashChart.XAxis.Rotate">
            <summary>
            Gets or sets the rotate.
            </summary>
            <value>The rotate.</value>
        </member>
        <member name="P:CommonTools.Components.Flash.OpenFlashChart.XAxis.Orientation">
            <summary>
            Gets or sets the orientation.
            </summary>
            <value>The orientation.</value>
        </member>
        <member name="T:CommonTools.Components.BusinessTier.BusinessObjectActionReport`1">
            <summary>
            
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:CommonTools.Components.BusinessTier.BusinessObjectActionReport`1.#ctor(`0)">
            <summary>
            Initializes a new instance of the <see cref="T:CommonTools.Components.BusinessTier.BusinessObjectActionReport`1"/> [ERROR: invalid expression DeclaringTypeKind].
            </summary>
            <param name="status">The status.</param>
        </member>
        <member name="M:CommonTools.Components.BusinessTier.BusinessObjectActionReport`1.#ctor(`0,CommonTools.Components.BusinessTier.BusinessObjectValidationResult)">
            <summary>
            Initializes a new instance of the <see cref="T:CommonTools.Components.BusinessTier.BusinessObjectActionReport`1"/> [ERROR: invalid expression DeclaringTypeKind].
            </summary>
            <param name="status">The status.</param>
            <param name="validationResult">The validation result.</param>
        </member>
        <member name="P:CommonTools.Components.BusinessTier.BusinessObjectActionReport`1.Message">
            <summary>
            Gets or sets the message.
            </summary>
            <value>The message.</value>
        </member>
        <member name="P:CommonTools.Components.BusinessTier.BusinessObjectActionReport`1.Status">
            <summary>
            Gets or sets the status.
            </summary>
            <value>The status.</value>
        </member>
        <member name="P:CommonTools.Components.BusinessTier.BusinessObjectActionReport`1.ValidationResult">
            <summary>
            Gets or sets the validation result.
            </summary>
            <value>The validation result.</value>
        </member>
        <member name="T:CommonTools.Web.Navigation.SiteMapMenuSectionManager">
            <summary>
            This is the class that's capable of enumerating the SiteMapMenu section of your app.config.
            </summary>
        </member>
        <member name="M:CommonTools.Web.Navigation.SiteMapMenuSectionManager.GetSiteMapMenuSection(CommonTools.Web.Navigation.IUrlRewriteController)">
            <summary>
            Gets the SiteMapMenu section settings of the app.config or web.config
            </summary>
        </member>
        <member name="T:CommonTools.Web.Navigation.GenericUrlRewriteController`2">
            <summary>
            
            </summary>
            <typeparam name="TIUrlRewriteItem">The type of the I URL rewrite item.</typeparam>
            <typeparam name="TISiteMapMenuController">The type of the I site map menu controller.</typeparam>
        </member>
        <member name="F:CommonTools.Web.Navigation.GenericUrlRewriteController`2._IUrlRewriteItems">
            <summary>
            
            </summary>
        </member>
        <member name="F:CommonTools.Web.Navigation.GenericUrlRewriteController`2._SiteMapMenuController">
            <summary>
            
            </summary>
        </member>
        <member name="M:CommonTools.Web.Navigation.GenericUrlRewriteController`2.GetMatchingRewriteItem(System.String)">
            <summary>
            Gets the matching rewrite item.
            </summary>
            <param name="pathAndQuery">The path and query.</param>
            <returns></returns>
        </member>
        <member name="M:CommonTools.Web.Navigation.GenericUrlRewriteController`2.GetMatchingSiteMapMenuItem(System.String,System.String)">
            <summary>
            Gets the matching site map menu item.
            </summary>
            <param name="menuName">Name of the menu.</param>
            <param name="pathAndQuery">The path and query.</param>
            <returns></returns>
        </member>
        <member name="M:CommonTools.Web.Navigation.GenericUrlRewriteController`2.GetMatchingSiteMapMenuItem(System.String,System.String,System.Boolean)">
            <summary>
            Gets the matching site map menu item.
            </summary>
            <param name="menuName">Name of the menu.</param>
            <param name="pathAndQuery">The path and query.</param>
            <param name="useCache">if set to <c>true</c> [use cache].</param>
            <returns></returns>
        </member>
        <member name="M:CommonTools.Web.Navigation.GenericUrlRewriteController`2.CreateUrlRewriteControllerInstance">
            <summary>
            Creates an instance of this object's default controller.
            </summary>
            <returns></returns>
        </member>
        <member name="M:CommonTools.Web.Navigation.GenericUrlRewriteController`2.GetUrlRewriteItem(System.String)">
            <summary>
            Gets an IUrlRewriteItem from the IUrlRewriteItem collection by name
            </summary>
            <param name="name">The name</param>
            <returns></returns>
        </member>
        <member name="M:CommonTools.Web.Navigation.GenericUrlRewriteController`2.GetGenericRewriteItemsFromXml(System.Xml.XmlReader)">
            <summary>
            Gets the generic rewrite items from XML.
            </summary>
            <param name="reader">The reader.</param>
            <returns></returns>
        </member>
        <member name="M:CommonTools.Web.Navigation.GenericUrlRewriteController`2.GetSchema">
            <summary>
            This method is reserved and should not be used. When implementing the IXmlSerializable interface, you should return null (Nothing in Visual Basic) from this method, and instead, if specifying a custom schema is required, apply the <see cref="T:System.Xml.Serialization.XmlSchemaProviderAttribute"/> to the class.
            </summary>
            <returns>
            An <see cref="T:System.Xml.Schema.XmlSchema"/> that describes the XML representation of the object that is produced by the <see cref="M:System.Xml.Serialization.IXmlSerializable.WriteXml(System.Xml.XmlWriter)"/> method and consumed by the <see cref="M:System.Xml.Serialization.IXmlSerializable.ReadXml(System.Xml.XmlReader)"/> method.
            </returns>
        </member>
        <member name="M:CommonTools.Web.Navigation.GenericUrlRewriteController`2.ReadXml(System.Xml.XmlReader)">
            <summary>
            Generates an object from its XML representation.
            </summary>
            <param name="reader">The <see cref="T:System.Xml.XmlReader"/> stream from which the object is deserialized.</param>
        </member>
        <member name="M:CommonTools.Web.Navigation.GenericUrlRewriteController`2.WriteXml(System.Xml.XmlWriter)">
            <summary>
            Converts an object into its XML representation.
            </summary>
            <param name="writer">The <see cref="T:System.Xml.XmlWriter"/> stream to which the object is serialized.</param>
        </member>
        <member name="P:CommonTools.Web.Navigation.GenericUrlRewriteController`2.SiteMapMenuController">
            <summary>
            Gets the site map menu controller.
            </summary>
            <value>The site map menu controller.</value>
        </member>
        <member name="P:CommonTools.Web.Navigation.GenericUrlRewriteController`2.SiteMapMenus">
            <summary>
            Gets the site map menus.
            </summary>
            <value>The site map menus.</value>
        </member>
        <member name="P:CommonTools.Web.Navigation.GenericUrlRewriteController`2.SiteMapUrls">
            <summary>
            Gets the site map urls.
            </summary>
            <value>The site map urls.</value>
        </member>
        <member name="P:CommonTools.Web.Navigation.GenericUrlRewriteController`2.UrlRewriteItems">
            <summary>
            Gets the IUrlRewriteItem collection associated with this IUrlRewriteController.
            </summary>
            <value>The UrlRewrite items.</value>
        </member>
        <member name="P:CommonTools.Web.Navigation.GenericUrlRewriteController`2.SitemapUrlsCacheDurationInSeconds">
            <summary>
            Gets the sitemap urls cache duration in seconds.
            </summary>
            <value>The sitemap urls cache duration in seconds.</value>
        </member>
        <member name="P:CommonTools.Web.Navigation.GenericUrlRewriteController`2.SitemapUrlsCacheKey">
            <summary>
            Gets the sitemap urls cache key.
            </summary>
            <value>The sitemap urls cache key.</value>
        </member>
        <member name="P:CommonTools.Web.Navigation.GenericUrlRewriteController`2.SitemapUrlsCacheItemPriority">
            <summary>
            Gets the sitemap urls cache item priority.
            </summary>
            <value>The sitemap urls cache item priority.</value>
        </member>
        <member name="P:CommonTools.Web.Navigation.GenericUrlRewriteController`2.UseCachedSitemapUrls">
            <summary>
            Gets or sets a value indicating whether to cache the sitemapurls or not.
            </summary>
            <value>
            	<c>true</c> if [use cached sitemap urls]; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="T:CommonTools.Web.JavaScript.JsonPropertyAttribute">
            <summary>
            
            </summary>
        </member>
        <member name="M:CommonTools.Web.JavaScript.JsonPropertyAttribute.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:CommonTools.Web.JavaScript.JsonPropertyAttribute"/> class.
            </summary>
        </member>
        <member name="M:CommonTools.Web.JavaScript.JsonPropertyAttribute.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:CommonTools.Web.JavaScript.JsonPropertyAttribute"/> class.
            </summary>
            <param name="jsonname">The jsonname.</param>
        </member>
        <member name="T:CommonTools.Components.Flash.FlashDetection">
            <summary>
            A user control that determines the version of Flash installed on a user's system.
            </summary>
        </member>
        <member name="M:CommonTools.Components.Flash.FlashDetection.GetDetectVersionScript(System.Int32)">
            <summary>
            Detects via VB and Javascript whether the client has Flash installed. This script instances
            two global variables, 'flashinstalled' and 'flashversion'. After the detect, the variable flashinstalled can have three values:
            2: Flash installed, 1: Flash not installed, 0: Unknown if Flash is installed.
            </summary>
            <param name="pLatestVersion">define the latest version of flash available. This integer is used in the vbscript part to loop through a try/catch block
            to determine which version is currently installed.</param>
            <returns>A string including the Javascript code for detecting flash (Script Tags included).</returns>
        </member>
        <member name="T:CommonTools.Components.Logging.LogControllerFactory">
            <summary>
            This is the class that's capable of enumerating the Log section of your app.config.
            </summary>
        </member>
        <member name="F:CommonTools.Components.Logging.LogControllerFactory.SECTION_NAME">
            <summary>
            The configuration's configsection key
            </summary>
        </member>
        <member name="M:CommonTools.Components.Logging.LogControllerFactory.CreateLogController">
            <summary>
            Gets the Log section settings of the app.config
            </summary>
        </member>
        <member name="T:CommonTools.Components.Flash.OpenFlashChart.XAxisLabels">
            <summary>
            
            </summary>
        </member>
        <member name="M:CommonTools.Components.Flash.OpenFlashChart.XAxisLabels.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:CommonTools.Components.Flash.OpenFlashChart.XAxisLabels"/> class.
            </summary>
        </member>
        <member name="P:CommonTools.Components.Flash.OpenFlashChart.XAxisLabels.AxisLabelValues">
            <summary>
            Gets or sets the axis label values.
            </summary>
            <value>The axis label values.</value>
        </member>
        <member name="P:CommonTools.Components.Flash.OpenFlashChart.XAxisLabels.Color">
            <summary>
            Gets or sets the color.
            </summary>
            <value>The color.</value>
        </member>
        <member name="P:CommonTools.Components.Flash.OpenFlashChart.XAxisLabels.Rotate">
            <summary>
            Gets or sets the rotate.
            </summary>
            <value>The rotate.</value>
        </member>
        <member name="P:CommonTools.Components.Flash.OpenFlashChart.XAxisLabels.Orientation">
            <summary>
            Gets or sets the orientation.
            </summary>
            <value>The orientation.</value>
        </member>
        <member name="T:CommonTools.Components.Flash.OpenFlashChart.LineChart">
            <summary>
            
            </summary>
        </member>
        <member name="M:CommonTools.Components.Flash.OpenFlashChart.LineChart.#ctor(CommonTools.Components.Flash.OpenFlashChart.LineChartType,System.Collections.Generic.List{CommonTools.Components.Flash.OpenFlashChart.IChartValue})">
            <summary>
            Initializes a new instance of the <see cref="T:CommonTools.Components.Flash.OpenFlashChart.LineChart"/> class.
            </summary>
            <param name="lineChartType">Type of the line chart.</param>
            <param name="values">The values.</param>
        </member>
        <member name="M:CommonTools.Components.Flash.OpenFlashChart.LineChart.#ctor(CommonTools.Components.Flash.OpenFlashChart.LineChartType,System.Collections.Generic.List{CommonTools.Components.Flash.OpenFlashChart.IChartValue},System.Int32,System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:CommonTools.Components.Flash.OpenFlashChart.LineChart"/> class.
            </summary>
            <param name="lineChartType">Type of the line chart.</param>
            <param name="values">The values.</param>
            <param name="width">The width.</param>
            <param name="dotSize">Size of the dot.</param>
            <param name="haloSize">Size of the halo.</param>
        </member>
        <member name="P:CommonTools.Components.Flash.OpenFlashChart.LineChart.Width">
            <summary>
            Gets or sets the width.
            </summary>
            <value>The width.</value>
        </member>
        <member name="P:CommonTools.Components.Flash.OpenFlashChart.LineChart.DotSize">
            <summary>
            Gets or sets the size of the dot.
            </summary>
            <value>The size of the dot.</value>
        </member>
        <member name="P:CommonTools.Components.Flash.OpenFlashChart.LineChart.HaloSize">
            <summary>
            Gets or sets the size of the halo.
            </summary>
            <value>The size of the halo.</value>
        </member>
        <member name="T:CommonTools.Components.Combinatorics.Combinations`1">
            <summary>
            Combinations defines a meta-collection, typically a list of lists, of all possible 
            subsets of a particular size from the set of values.  This list is enumerable and 
            allows the scanning of all possible combinations using a simple foreach() loop.
            Within the returned set, there is no prescribed order.  This follows the mathematical
            concept of choose.  For example, put 10 dominoes in a hat and pick 5.  The number of possible
            combinations is defined as "10 choose 5", which is calculated as (10!) / ((10 - 5)! * 5!).
            </summary>
            <remarks>
            The MetaCollectionType parameter of the constructor allows for the creation of
            two types of sets,  those with and without repetition in the output set when 
            presented with repetition in the input set.
            
            When given a input collect {A B C} and lower index of 2, the following sets are generated:
            MetaCollectionType.WithRepetition =>
            {A A}, {A B}, {A C}, {B B}, {B C}, {C C}
            MetaCollectionType.WithoutRepetition =>
            {A B}, {A C}, {B C}
            
            Input sets with multiple equal values will generate redundant combinations in proprotion
            to the likelyhood of outcome.  For example, {A A B B} and a lower index of 3 will generate:
            {A A B} {A A B} {A B B} {A B B}
            </remarks>
            <typeparam name="T">The type of the values within the list.</typeparam>
        </member>
        <member name="M:CommonTools.Components.Combinatorics.Combinations`1.#ctor">
            <summary>
            No default constructor, must provided a list of values and size.
            </summary>
        </member>
        <member name="M:CommonTools.Components.Combinatorics.Combinations`1.#ctor(System.Collections.Generic.IList{`0},System.Int32)">
            <summary>
            Create a combination set from the provided list of values.
            The upper index is calculated as values.Count, the lower index is specified.
            Collection type defaults to MetaCollectionType.WithoutRepetition
            </summary>
            <param name="values">List of values to select combinations from.</param>
            <param name="lowerIndex">The size of each combination set to return.</param>
        </member>
        <member name="M:CommonTools.Components.Combinatorics.Combinations`1.#ctor(System.Collections.Generic.IList{`0},System.Int32,CommonTools.Components.Combinatorics.GenerateOption)">
            <summary>
            Create a combination set from the provided list of values.
            The upper index is calculated as values.Count, the lower index is specified.
            </summary>
            <param name="values">List of values to select combinations from.</param>
            <param name="lowerIndex">The size of each combination set to return.</param>
            <param name="type">The type of Combinations set to generate.</param>
        </member>
        <member name="M:CommonTools.Components.Combinatorics.Combinations`1.GetEnumerator">
            <summary>
            Gets an enumerator for collecting the list of combinations.
            </summary>
            <returns>The enumerator.</returns>
        </member>
        <member name="M:CommonTools.Components.Combinatorics.Combinations`1.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Returns an enumerator that iterates through a collection.
            </summary>
            <returns>
            An <see cref="T:System.Collections.IEnumerator"/> object that can be used to iterate through the collection.
            </returns>
        </member>
        <member name="M:CommonTools.Components.Combinatorics.Combinations`1.Initialize(System.Collections.Generic.IList{`0},System.Int32,CommonTools.Components.Combinatorics.GenerateOption)">
            <summary>
            Initialize the combinations by settings a copy of the values from the 
            </summary>
            <param name="values">List of values to select combinations from.</param>
            <param name="lowerIndex">The size of each combination set to return.</param>
            <param name="type">The type of Combinations set to generate.</param>
            <remarks>
            Copies the array and parameters and then creates a map of booleans that will 
            be used by a permutations object to refence the subset.  This map is slightly
            different based on whether the type is with or without repetition.
            
            When the type is WithoutRepetition, then a map of upper index elements is
            created with lower index false's.  
            E.g. 8 choose 3 generates:
            Map: {1 1 1 1 1 0 0 0}
            Note: For sorting reasons, false denotes inclusion in output.
            
            When the type is WithRepetition, then a map of upper index - 1 + lower index
            elements is created with the falses indicating that the 'current' element should
            be included and the trues meaning to advance the 'current' element by one.
            E.g. 8 choose 3 generates:
            Map: {1 1 1 1 1 1 1 1 0 0 0} (7 trues, 3 falses).
            </remarks>
        </member>
        <member name="F:CommonTools.Components.Combinatorics.Combinations`1.myValues">
            <summary>
            Copy of values object is intialized with, required for enumerator reset.
            </summary>
        </member>
        <member name="F:CommonTools.Components.Combinatorics.Combinations`1.myPermutations">
            <summary>
            Permutations object that handles permutations on booleans for combination inclusion.
            </summary>
        </member>
        <member name="F:CommonTools.Components.Combinatorics.Combinations`1.myMetaCollectionType">
            <summary>
            The type of the combination collection.
            </summary>
        </member>
        <member name="F:CommonTools.Components.Combinatorics.Combinations`1.myLowerIndex">
            <summary>
            The lower index defined in the constructor.
            </summary>
        </member>
        <member name="P:CommonTools.Components.Combinatorics.Combinations`1.Count">
            <summary>
            The number of unique combinations that are defined in this meta-collection.
            This value is mathematically defined as Choose(M, N) where M is the set size
            and N is the subset size.  This is M! / (N! * (M-N)!).
            </summary>
        </member>
        <member name="P:CommonTools.Components.Combinatorics.Combinations`1.Type">
            <summary>
            The type of Combinations set that is generated.
            </summary>
        </member>
        <member name="P:CommonTools.Components.Combinatorics.Combinations`1.UpperIndex">
            <summary>
            The upper index of the meta-collection, equal to the number of items in the initial set.
            </summary>
        </member>
        <member name="P:CommonTools.Components.Combinatorics.Combinations`1.LowerIndex">
            <summary>
            The lower index of the meta-collection, equal to the number of items returned each iteration.
            </summary>
        </member>
        <member name="T:CommonTools.Components.Combinatorics.Combinations`1.Enumerator">
            <summary>
            The enumerator that enumerates each meta-collection of the enclosing Combinations class.
            </summary>
        </member>
        <member name="M:CommonTools.Components.Combinatorics.Combinations`1.Enumerator.#ctor(CommonTools.Components.Combinatorics.Combinations{`0})">
            <summary>
            Construct a enumerator with the parent object.
            </summary>
            <param name="source">The source combinations object.</param>
        </member>
        <member name="M:CommonTools.Components.Combinatorics.Combinations`1.Enumerator.Reset">
            <summary>
            Resets the combinations enumerator to the first combination.  
            </summary>
        </member>
        <member name="M:CommonTools.Components.Combinatorics.Combinations`1.Enumerator.MoveNext">
            <summary>
            Advances to the next combination of items from the set.
            </summary>
            <returns>True if successfully moved to next combination, False if no more unique combinations exist.</returns>
            <remarks>
            The heavy lifting is done by the permutations object, the combination is generated
            by creating a new list of those items that have a true in the permutation parrellel array.
            </remarks>
        </member>
        <member name="M:CommonTools.Components.Combinatorics.Combinations`1.Enumerator.Dispose">
            <summary>
            Cleans up non-managed resources, of which there are none used here.
            </summary>
        </member>
        <member name="M:CommonTools.Components.Combinatorics.Combinations`1.Enumerator.ComputeCurrent">
            <summary>
            The only complex function of this entire wrapper, ComputeCurrent() creates
            a list of original values from the bool permutation provided.  
            The exception for accessing current (InvalidOperationException) is generated
            by the call to .Current on the underlying enumeration.
            </summary>
            <remarks>
            To compute the current list of values, the underlying permutation object
            which moves with this enumerator, is scanned differently based on the type.
            The items have only two values, true and false, which have different meanings:
            
            For type WithoutRepetition, the output is a straightforward subset of the input array.  
            E.g. 6 choose 3 without repetition
            Input array:   {A B C D E F}
            Permutations:  {0 1 0 0 1 1}
            Generates set: {A   C D    }
            Note: size of permutation is equal to upper index.
            
            For type WithRepetition, the output is defined by runs of characters and when to 
            move to the next element.
            E.g. 6 choose 5 with repetition
            Input array:   {A B C D E F}
            Permutations:  {0 1 0 0 1 1 0 0 1 1}
            Generates set: {A   B B     D D    }
            Note: size of permutation is equal to upper index - 1 + lower index.
            </remarks>
        </member>
        <member name="F:CommonTools.Components.Combinatorics.Combinations`1.Enumerator.myParent">
            <summary>
            Parent object this is an enumerator for.
            </summary>
        </member>
        <member name="F:CommonTools.Components.Combinatorics.Combinations`1.Enumerator.myCurrentList">
            <summary>
            The current list of values, this is lazy evaluated by the Current property.
            </summary>
        </member>
        <member name="F:CommonTools.Components.Combinatorics.Combinations`1.Enumerator.myPermutationsEnumerator">
            <summary>
            An enumertor of the parents list of lexicographic orderings.
            </summary>
        </member>
        <member name="P:CommonTools.Components.Combinatorics.Combinations`1.Enumerator.Current">
            <summary>
            The current combination
            </summary>
        </member>
        <member name="P:CommonTools.Components.Combinatorics.Combinations`1.Enumerator.System#Collections#IEnumerator#Current">
            <summary>
            The current combination
            </summary>
        </member>
        <member name="T:CommonTools.Components.Caching.ClusteredCacheSectionManager">
            <summary>
            This is the class that's capable of enumerating the ClusteredCache section of your app.config.
            </summary>
        </member>
        <member name="P:CommonTools.Components.Caching.ClusteredCacheSectionManager.ClusteredCacheSection">
            <summary>
            Gets the ClusteredCache section settings of the app.config or web.config
            </summary>
        </member>
        <member name="T:CommonTools.Components.Caching.IClusteredCacheController">
            <summary>
            
            </summary>
        </member>
        <member name="M:CommonTools.Components.Caching.IClusteredCacheController.CreateClusteredCacheControllerInstance">
            <summary>
            Creates the clustered cache controller instance.
            </summary>
            <returns></returns>
        </member>
        <member name="P:CommonTools.Components.Caching.IClusteredCacheController.CheckAtRequestCacheKey">
            <summary>
            Gets or sets the CheckAtRequest cache key for storing the cache dictionary.
            </summary>
            <value>The check at request cache key.</value>
        </member>
        <member name="P:CommonTools.Components.Caching.IClusteredCacheController.ClusteredCachingMode">
            <summary>
            Gets or sets the clustered caching mode to use to synchronize the cache. See the documentation
            for further info.
            </summary>
            <value>The clustered caching mode.</value>
        </member>
        <member name="P:CommonTools.Components.Caching.IClusteredCacheController.MillisecondsToSleepAfterCachePurge">
            <summary>
            Gets or sets the milliseconds to sleep after a purge cache call. This value can be
            used to force the purge cache calling thread to sleep for a certain amount of time
            in order to wait for the sql dependency to fire. Normally, this event should fire quite
            instantanously, but if you expirience any delays adjust this value. Set this value to 
            -1 if you want to disable the thread sleep.
            </summary>
            <value>The milliseconds to sleep after cache purge.</value>
        </member>
        <member name="P:CommonTools.Components.Caching.IClusteredCacheController.ConnectionStringName">
            <summary>
            Gets or sets the name of the connection string.
            </summary>
            <value>The name of the connection string.</value>
        </member>
        <member name="P:CommonTools.Components.Caching.IClusteredCacheController.StoredProcedurePrefix">
            <summary>
            Gets or sets the stored procedure prefix.
            </summary>
            <value>The stored procedure prefix.</value>
        </member>
        <member name="P:CommonTools.Components.Caching.IClusteredCacheController.ClusteredCacheSectionProviderType">
            <summary>
            Gets or sets the type of the log section provider.
            </summary>
            <value>The type of the log section provider.</value>
        </member>
        <member name="P:CommonTools.Components.Caching.IClusteredCacheController.CheckAtRequestIsUpToDateDelayInMilliseconds">
            <summary>
            This value defines how often the clustered cache mechanism checks against the database whether
            the current synchronyzed value of the cached item is up to date. If this value is not set or set
            to a value &lt;= 0, at each object request a call is made to the database to check whether
            the requested cached object is up to date. If this value is greater than 0, every xxx milliseconds
            after the last call the clustered cache manager makes a call to the database to check whether we are 
            up to date. 
            This can improve performance significally if you have a very busy site (E.g.: if there are 10000
            object requests a second, if this value is set to 200, the database is only called 5 times whereas it 
            is called 10000 times if this property is not used or &lt;= 0).
            </summary>
            <value>The check at request is up to date delay.</value>
        </member>
        <member name="P:CommonTools.Components.Caching.IClusteredCacheController.ApplicationId">
            <summary>
            Gets or sets the application id of the application which uses the clustered cache component. Use
            this property if you have to synchronize multiple autonomous applications within one database
            </summary>
            <value>The application id.</value>
        </member>
        <member name="T:CommonTools.Components.Caching.ClusteredCachingMode">
            <summary>
            Defines which caching mode to use for keeping the HttpRuntime.Cache objects synchronized.
            </summary>
        </member>
        <member name="F:CommonTools.Components.Caching.ClusteredCachingMode.ServiceBroker">
            <summary>
            This mode uses SQL Server 2005 service broker query notifications to keep all machines
            synchronized on the cluster. It's the most performant way of doing the synchronization,
            but you need to run SQL Server 2005 Enterprise edition to make this work.
            </summary>
        </member>
        <member name="F:CommonTools.Components.Caching.ClusteredCachingMode.CheckAtRequest">
            <summary>
            This mode stores the 'LastUpdate' state of each cache item as an unremovable hashtable
            at each machine's HttpRuntime.Cache. Each time a cache item is requested, this value is
            checked against the database.
            This approach is less performant than the ServiceBroker mode, but it works on all SQL
            versions (2000 and 2005).
            </summary>
        </member>
        <member name="T:CommonTools.Components.Caching.CacheControllerFactory">
            <summary>
            This is the class that's capable of enumerating the cache section of your app.config.
            </summary>
        </member>
        <member name="F:CommonTools.Components.Caching.CacheControllerFactory.SECTION_NAME">
            <summary>
            The configuration's configsection key
            </summary>
        </member>
        <member name="M:CommonTools.Components.Caching.CacheControllerFactory.CreateCacheController">
            <summary>
            Gets the Cache section settings of the app.config
            </summary>
        </member>
        <member name="T:CommonTools.Web.UI.CacheViewTheme">
            <summary>
            Provides the theme for the Cache visualiser control.
            </summary>
        </member>
        <member name="F:CommonTools.Web.UI.CacheViewTheme.None">
            <summary>
            
            </summary>
        </member>
        <member name="F:CommonTools.Web.UI.CacheViewTheme.Default">
            <summary>
            Set the theme to the default cache visualiser.
            </summary>
        </member>
        <member name="T:CommonTools.Web.Navigation.UrlRewriteModule">
            <summary>
            Module for rewriting urls
            </summary>
        </member>
        <member name="M:CommonTools.Web.Navigation.UrlRewriteModule.Dispose">
            <summary>
            Disposes of the resources (other than memory) used by the module that implements <see cref="T:System.Web.IHttpModule"/>.
            </summary>
        </member>
        <member name="M:CommonTools.Web.Navigation.UrlRewriteModule.Init(System.Web.HttpApplication)">
            <summary>
            Initializes a module and prepares it to handle requests.
            </summary>
            <param name="context">An <see cref="T:System.Web.HttpApplication"/> that provides access to the methods, properties, and events common to all application objects within an ASP.NET application</param>
        </member>
        <member name="M:CommonTools.Web.Navigation.UrlRewriteModule.Rewrite_BeginRequest(System.Object,System.EventArgs)">
            <summary>
            Handles the BeginRequest event of the Rewrite control.
            </summary>
            <param name="sender">The source of the event.</param>
            <param name="args">The <see cref="T:System.EventArgs"/> instance containing the event data.</param>
        </member>
        <member name="T:CommonTools.IO.Directory">
            <summary>
            
            </summary>
        </member>
        <member name="M:CommonTools.IO.Directory.GetFilenames(System.String,System.String,CommonTools.IO.FilenameFormatOptions)">
            <summary>
            Gets a list of filenames (with absolute path) in a directory
            </summary>
            <param name="path">The absolute path of the directory to search files for</param>
            <param name="fileExtensions">Allowed file extensions. Must be in the following format: flv|avi|mpg|xml</param>
            <param name="option">formating option</param>
            <returns></returns>
        </member>
        <member name="T:CommonTools.Components.Threading.Job">
            <summary>
            Configurable IJob descritpion
            </summary>
        </member>
        <member name="M:CommonTools.Components.Threading.Job.OnPreJob">
            <summary>
            Called when before a job executes
            </summary>
        </member>
        <member name="M:CommonTools.Components.Threading.Job.OnPostJob">
            <summary>
            Called after a job has executes
            </summary>
        </member>
        <member name="M:CommonTools.Components.Threading.Job.PreciseTimerCallback(System.Object)">
            <summary>
            Precises the timer callback.
            </summary>
            <param name="state">The state.</param>
        </member>
        <member name="M:CommonTools.Components.Threading.Job.TimerThread(System.Object)">
            <summary>
            Internal call back which is responsible for firing IJob.Execute()
            </summary>
            <param name="state"></param>
        </member>
        <member name="M:CommonTools.Components.Threading.Job.GetOptionsClone">
            <summary>
            Gets a cloned version of this job's options dictionary
            </summary>
            <returns></returns>
        </member>
        <member name="M:CommonTools.Components.Threading.Job.CreateJobInstance">
            <summary>
            Attempts to create an instance of the IJob. If the type
            can not be created, this Job will be disabled.
            </summary>
            <returns></returns>
        </member>
        <member name="M:CommonTools.Components.Threading.Job.InitializeTimer">
            <summary>
            Creates the timer and sets the callback if it is enabled
            </summary>
        </member>
        <member name="M:CommonTools.Components.Threading.Job.ExecuteJob">
            <summary>
            Performs the task of executing the job.
            </summary>
        </member>
        <member name="M:CommonTools.Components.Threading.Job.#ctor(System.Type,CommonTools.Components.Threading.IJobItem,System.Collections.Generic.Dictionary{System.String,System.String})">
            <summary>
            
            </summary>
            <param name="ijob"></param>
            <param name="element"></param>
            <param name="options"></param>
        </member>
        <member name="M:CommonTools.Components.Threading.Job.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
        </member>
        <member name="P:CommonTools.Components.Threading.Job.DailyLocalizedExecutionTimeZoneInfo">
            <summary>
            Gets the daily localized execution time zone info.
            </summary>
        </member>
        <member name="P:CommonTools.Components.Threading.Job.DailyLocalizedExecutionTime">
            <summary>
            Gets the daily localized execution time.
            </summary>
        </member>
        <member name="P:CommonTools.Components.Threading.Job.DailyExecutionDateTimeKind">
            <summary>
            Gets the kind of the daily execution date time.
            </summary>
            <value>
            The kind of the daily execution date time.
            </value>
        </member>
        <member name="P:CommonTools.Components.Threading.Job.IsRunning">
            <summary>
            Gets a value indicating whether this instance is running.
            </summary>
            <value>
            	<c>true</c> if this instance is running; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:CommonTools.Components.Threading.Job.LastStarted">
            <summary>
            Gets the last started.
            </summary>
            <value>The last started.</value>
        </member>
        <member name="P:CommonTools.Components.Threading.Job.LastEnd">
            <summary>
            Gets the last end.
            </summary>
            <value>The last end.</value>
        </member>
        <member name="P:CommonTools.Components.Threading.Job.LastSuccess">
            <summary>
            Gets the last success.
            </summary>
            <value>The last success.</value>
        </member>
        <member name="P:CommonTools.Components.Threading.Job.ExecuteOnOwnThread">
            <summary>
            Gets a value indicating whether this job is ExecuteOnOwnThreaded or not.
            </summary>
            <value><c>true</c> if ExecuteOnOwnThreaded; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:CommonTools.Components.Threading.Job.JobType">
            <summary>
            Named type of class which implements IJob
            </summary>
        </member>
        <member name="P:CommonTools.Components.Threading.Job.EnableShutDown">
            <summary>
            Gets a value indicating whether the job gets shut down when an exception occured during it's execution.
            </summary>
            <value><c>true</c> if the job gets shut down when an exception occured during it's execution; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:CommonTools.Components.Threading.Job.Name">
            <summary>
            Name of Job
            </summary>
        </member>
        <member name="P:CommonTools.Components.Threading.Job.Enabled">
            <summary>
            Is this job enabled
            </summary>
        </member>
        <member name="P:CommonTools.Components.Threading.Job.ExecuteDaily">
            <summary>
            Gets or sets a value indicating whether to execute this job daily at a determined time.
            </summary>
            <value><c>true</c> if [execute daily]; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:CommonTools.Components.Threading.Job.DailyUTCExecutionTime">
            <summary>
            Gets or sets the time of the day that this job should execute on a daily basis.
            </summary>
            <value>The execute daily at.</value>
        </member>
        <member name="P:CommonTools.Components.Threading.Job.FirstRunAtInitialization">
            <summary>
            Determines whether this job should execute immediately at the global Jobs instanciation or
            wait for the first interval.
            </summary>
            <example>
            
                Job A: Minutes = 10, FirstRunAtInitialization = true
                Job B: Minutes = 10, FirstRunAtInitialization = false
            
            CommonTools.Components.Threading.Jobs.Instance().Start(); // executed at 14:00:00.000
            
            Job A executes at 14:00:00.000, 14:10:00.000, 14:20:00.000, ...
            Job B executes at 14:10:00.000, 14:20:00.000, 14:30:00.000, ...
            
            </example>
        </member>
        <member name="P:CommonTools.Components.Threading.Job.Interval">
            <summary>
            Specified the interval to run the job. ie. run the job every five minutes.
            </summary>
        </member>
        <member name="P:CommonTools.Components.Threading.Job.UsePreciseTimer">
            <summary>
            Gets a value indicating whether [use precise timer].
            </summary>
            <value>
              <c>true</c> if [use precise timer]; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:CommonTools.Components.Threading.Job.PreciseTimerCallbackMode">
            <summary>
            Gets the precise timer callback mode.
            </summary>
        </member>
        <member name="E:CommonTools.Components.Threading.Job.PreJob">
            <summary>
            Event fired when the job is about to start.
            </summary>
        </member>
        <member name="E:CommonTools.Components.Threading.Job.PostJob">
            <summary>
            Event fired when the job has returned from its execute method.
            </summary>
        </member>
        <member name="T:CommonTools.Components.Testing.DummyUser">
            <summary>
            A simple user profile class
            </summary>
        </member>
        <member name="M:CommonTools.Components.Testing.DummyUser.ToDebugString">
            <summary>
            Returns this dummy user properties in a string.
            </summary>
            <returns></returns>
        </member>
        <member name="M:CommonTools.Components.Testing.DummyUser.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:CommonTools.Components.Testing.DummyUser"/> class.
            </summary>
        </member>
        <member name="P:CommonTools.Components.Testing.DummyUser.Username">
            <summary>
            Gets or sets the username.
            </summary>
            <value>The username.</value>
        </member>
        <member name="P:CommonTools.Components.Testing.DummyUser.Password">
            <summary>
            Gets or sets the password.
            </summary>
            <value>The password.</value>
        </member>
        <member name="P:CommonTools.Components.Testing.DummyUser.Surname">
            <summary>
            Gets or sets the surname.
            </summary>
            <value>The surname.</value>
        </member>
        <member name="P:CommonTools.Components.Testing.DummyUser.Firstname">
            <summary>
            Gets or sets the firstname.
            </summary>
            <value>The firstname.</value>
        </member>
        <member name="P:CommonTools.Components.Testing.DummyUser.DateOfBirth">
            <summary>
            Gets or sets the date of birth.
            </summary>
            <value>The date of birth.</value>
        </member>
        <member name="P:CommonTools.Components.Testing.DummyUser.Street">
            <summary>
            Gets or sets the street.
            </summary>
            <value>The street.</value>
        </member>
        <member name="P:CommonTools.Components.Testing.DummyUser.City">
            <summary>
            Gets or sets the city.
            </summary>
            <value>The city.</value>
        </member>
        <member name="P:CommonTools.Components.Testing.DummyUser.Postcode">
            <summary>
            Gets or sets the postcode.
            </summary>
            <value>The postcode.</value>
        </member>
        <member name="P:CommonTools.Components.Testing.DummyUser.Telephone">
            <summary>
            Gets or sets the telephone.
            </summary>
            <value>The telephone.</value>
        </member>
        <member name="P:CommonTools.Components.Testing.DummyUser.Mobile">
            <summary>
            Gets or sets the mobile.
            </summary>
            <value>The mobile.</value>
        </member>
        <member name="P:CommonTools.Components.Testing.DummyUser.Email">
            <summary>
            Gets or sets the email.
            </summary>
            <value>The email.</value>
        </member>
        <member name="P:CommonTools.Components.Testing.DummyUser.Gender">
            <summary>
            Gets or sets the gender.
            </summary>
            <value>The gender.</value>
        </member>
        <member name="T:CommonTools.Web.WebException">
            <summary>
            
            </summary>
        </member>
        <member name="M:CommonTools.Web.WebException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:CommonTools.Web.WebException"/> class.
            </summary>
            <param name="message">The message.</param>
        </member>
        <member name="M:CommonTools.Web.WebException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:CommonTools.Web.WebException"/> class.
            </summary>
            <param name="message">The message.</param>
            <param name="innerException">The inner exception.</param>
        </member>
        <member name="T:CommonTools.IO.Csv.MalformedCsvException">
            <summary>
            Represents the exception that is thrown when a CSV file is malformed.
            </summary>
        </member>
        <member name="F:CommonTools.IO.Csv.MalformedCsvException._message">
            <summary>
            Contains the message that describes the error.
            </summary>
        </member>
        <member name="F:CommonTools.IO.Csv.MalformedCsvException._rawData">
            <summary>
            Contains the raw data when the error occured.
            </summary>
        </member>
        <member name="F:CommonTools.IO.Csv.MalformedCsvException._currentFieldIndex">
            <summary>
            Contains the current field index.
            </summary>
        </member>
        <member name="F:CommonTools.IO.Csv.MalformedCsvException._currentRecordIndex">
            <summary>
            Contains the current record index.
            </summary>
        </member>
        <member name="F:CommonTools.IO.Csv.MalformedCsvException._currentPosition">
            <summary>
            Contains the current position in the raw data.
            </summary>
        </member>
        <member name="M:CommonTools.IO.Csv.MalformedCsvException.#ctor">
            <summary>
            Initializes a new instance of the MalformedCsvException class.
            </summary>
        </member>
        <member name="M:CommonTools.IO.Csv.MalformedCsvException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the MalformedCsvException class.
            </summary>
            <param name="message">The message that describes the error.</param>
        </member>
        <member name="M:CommonTools.IO.Csv.MalformedCsvException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the MalformedCsvException class.
            </summary>
            <param name="message">The message that describes the error.</param>
            <param name="innerException">The exception that is the cause of the current exception.</param>
        </member>
        <member name="M:CommonTools.IO.Csv.MalformedCsvException.#ctor(System.String,System.Int32,System.Int64,System.Int32)">
            <summary>
            Initializes a new instance of the MalformedCsvException class.
            </summary>
            <param name="rawData">The raw data when the error occured.</param>
            <param name="currentPosition">The current position in the raw data.</param>
            <param name="currentRecordIndex">The current record index.</param>
            <param name="currentFieldIndex">The current field index.</param>
        </member>
        <member name="M:CommonTools.IO.Csv.MalformedCsvException.#ctor(System.String,System.Int32,System.Int64,System.Int32,System.Exception)">
            <summary>
            Initializes a new instance of the MalformedCsvException class.
            </summary>
            <param name="rawData">The raw data when the error occured.</param>
            <param name="currentPosition">The current position in the raw data.</param>
            <param name="currentRecordIndex">The current record index.</param>
            <param name="currentFieldIndex">The current field index.</param>
            <param name="innerException">The exception that is the cause of the current exception.</param>
        </member>
        <member name="M:CommonTools.IO.Csv.MalformedCsvException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the MalformedCsvException class with serialized data.
            </summary>
            <param name="info">The <see cref="T:SerializationInfo"/> that holds the serialized object data about the exception being thrown.</param>
            <param name="context">The <see cref="T:StreamingContext"/> that contains contextual information about the source or destination.</param>
        </member>
        <member name="M:CommonTools.IO.Csv.MalformedCsvException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            When overridden in a derived class, sets the <see cref="T:SerializationInfo"/> with information about the exception.
            </summary>
            <param name="info">The <see cref="T:SerializationInfo"/> that holds the serialized object data about the exception being thrown.</param>
            <param name="context">The <see cref="T:StreamingContext"/> that contains contextual information about the source or destination.</param>
        </member>
        <member name="P:CommonTools.IO.Csv.MalformedCsvException.RawData">
            <summary>
            Gets the raw data when the error occured.
            </summary>
            <value>The raw data when the error occured.</value>
        </member>
        <member name="P:CommonTools.IO.Csv.MalformedCsvException.CurrentPosition">
            <summary>
            Gets the current position in the raw data.
            </summary>
            <value>The current position in the raw data.</value>
        </member>
        <member name="P:CommonTools.IO.Csv.MalformedCsvException.CurrentRecordIndex">
            <summary>
            Gets the current record index.
            </summary>
            <value>The current record index.</value>
        </member>
        <member name="P:CommonTools.IO.Csv.MalformedCsvException.CurrentFieldIndex">
            <summary>
            Gets the current field index.
            </summary>
            <value>The current record index.</value>
        </member>
        <member name="P:CommonTools.IO.Csv.MalformedCsvException.Message">
            <summary>
            Gets a message that describes the current exception.
            </summary>
            <value>A message that describes the current exception.</value>
        </member>
        <member name="T:CommonTools.Core.CompareDelegate`1">
            <summary>
            
            </summary>
        </member>
        <member name="T:CommonTools.Core.UtilityHelper">
            <summary>
            This class contains general utility methods
            </summary>
        </member>
        <member name="M:CommonTools.Core.UtilityHelper.GetEnums``1">
            <summary>
            Gets a list of enums of a specified enum type.
            </summary>
            <typeparam name="T"></typeparam>
            <returns></returns>
            <exception cref="T:System.ArgumentException">Throws a System.ArgumentException if the specified generic type is not an enum.</exception>
        </member>
        <member name="M:CommonTools.Core.UtilityHelper.MergeOrderedList``1(System.Collections.Generic.List{``0},System.Collections.Generic.List{``0},CommonTools.Core.CompareDelegate{``0})">
            <summary>
            Merges two ordered lists
            </summary>
            <typeparam name="T"></typeparam>
            <param name="a">A.</param>
            <param name="b">The b.</param>
            <param name="comparison">The comparison.</param>
            <returns></returns>
        </member>
        <member name="T:CommonTools.Components.Graphics.CaptchaImage">
             <summary>
             Summary description for CaptchaImage.
             </summary>
             <example>
             <![CDATA[
             // Insert the following code into the codebehind of an aspx page:      
            
             protected void Page_Load(object sender, System.EventArgs e)
             {
             	// Get the text to render from the querystring
             	string text = Request.QueryString["v"];
             
             	if (!string.IsNullOrEmpty(text))
             	{
             		CaptchaImage ci = new CaptchaImage(
             			text
             			, 160, 40
             			, "Verdana"
             			, WarpStrength.Strong
             			, Color.BlueViolet, Color.Beige, Color.White, Color.Turquoise);
                  
             		this.Response.Clear();
             		this.Response.ContentType = "image/jpeg";
             
             		// Render the page's output as the captcha image
             		ci.Image.Save(this.Response.OutputStream, ImageFormat.Jpeg);
             
             		ci.Dispose();
             	}
             }
             ]]>
             </example>
        </member>
        <member name="M:CommonTools.Components.Graphics.CaptchaImage.#ctor(System.String,System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the CaptchaImage class
            </summary>
            <param name="s">The text for the captcha class.</param>
            <param name="width">The width of the control.</param>
            <param name="height">The height of the control.</param>
        </member>
        <member name="M:CommonTools.Components.Graphics.CaptchaImage.#ctor(System.String,System.Int32,System.Int32,System.String)">
            <summary>
            Overloaded. Initializes a new instance of the CaptchaImage class using the
            specified text, width, height and font family.
            </summary>
            <param name="s">The text of the catcha control.</param>
            <param name="width">The width of the control.</param>
            <param name="height">The height of the control.</param>
            <param name="familyName">The Font to use</param>
        </member>
        <member name="M:CommonTools.Components.Graphics.CaptchaImage.#ctor(System.String,System.Int32,System.Int32,System.String,CommonTools.Components.Graphics.WarpStrength,System.Drawing.Color,System.Drawing.Color,System.Drawing.Color,System.Drawing.Color)">
            <summary>
            Initializes a new instance of the CaptchaImage class using the specified text,
            width, height, and font family.
            </summary>
            <param name="pText">The text for the captcha control.</param>
            <param name="pWidth">The width of the captcha control.</param>
            <param name="pHeight">The height of the captcha control.</param>
            <param name="pFamilyName">The font family to use.</param>
            <param name="pWarpStrength">One of the WarpStrength values that indicate the noise
            strength to use.</param>
            <param name="pFontColor">The colour for the text.</param>
            <param name="pDotColor">The colour of the noise dots.</param>
            <param name="pBGColor">The colour of the background.</param>
            <param name="pTextDistortioncolor">The secondary colour for the text.</param>
        </member>
        <member name="M:CommonTools.Components.Graphics.CaptchaImage.Finalize">
            <summary>
            Implements object.Finalize()
            </summary>
        </member>
        <member name="M:CommonTools.Components.Graphics.CaptchaImage.Dispose">
            <summary>
            Implements the IDisposable interface. Releases all resources used by this object.
            </summary>
        </member>
        <member name="M:CommonTools.Components.Graphics.CaptchaImage.Dispose(System.Boolean)">
            <summary>
            Custom Dispose method to clean up unmanaged resources.
            </summary>
            <param name="disposing"></param>
        </member>
        <member name="M:CommonTools.Components.Graphics.CaptchaImage.SetDimensions(System.Int32,System.Int32)">
            <summary>
            Sets the image width and height.
            </summary>
            <param name="width">width of the control</param>
            <param name="height">The height of the control.</param>
        </member>
        <member name="M:CommonTools.Components.Graphics.CaptchaImage.SetFamilyName(System.String)">
            <summary>
            Sets the font used for the image text.
            </summary>
            <param name="familyName">The font family name.</param>
        </member>
        <member name="P:CommonTools.Components.Graphics.CaptchaImage.Text">
            <summary>
            Gets the text containing the answer of the control.
            </summary>
        </member>
        <member name="P:CommonTools.Components.Graphics.CaptchaImage.Image">
            <summary>
            Gets the image bitmap of the Captcha image.
            </summary>
        </member>
        <member name="P:CommonTools.Components.Graphics.CaptchaImage.Width">
            <summary>
            Gets the image width.
            </summary>
        </member>
        <member name="P:CommonTools.Components.Graphics.CaptchaImage.Height">
            <summary>
            Gets the image height.
            </summary>
        </member>
        <member name="T:CommonTools.Components.Threading.JobControllerFactory">
            <summary>
            
            </summary>
        </member>
        <member name="F:CommonTools.Components.Threading.JobControllerFactory.SECTION_NAME">
            <summary>
            The configuration's configsection key
            </summary>
        </member>
        <member name="M:CommonTools.Components.Threading.JobControllerFactory.CreateJobController">
            <summary>
            Gets the Job section settings of the app.config
            </summary>
        </member>
        <member name="T:CommonTools.Components.TextResources.TextResourceManager">
            <summary>
            This class acts as an interface to text content stored at xml files. It expects xml tags of the
            format <![CDATA[<MyResourceTag MyResourceKey="resourceKey">This is some content</MyResourceTag>]]> and
            offers methods to easily access these keys. 
            
            This component supports localizeable resource content with a gracefull fallback mechanism in case a 
            certain resource is not present at all languages. To achieve this, you have to store your resource file
            in the following folder structure: 
            
                    { RootFolder }\{ culture }\{ file path },
                    
            (e.g.:  C:\MyProject\TextResources\en-gb\Alerts\MyAlerts.xml, 
                    C:\MyProject\TextResources\de-at\Alerts\MyAlerts.xml,
                    C:\MyProject\TextResources\en-gb\CommonContent.xml ...)
                    
            When a resourcekey can't be found at a specified culture, the resourcekey will be looked up at the 
            specified 'DefaultCulture'.
            
            The component comes with a handy literl web control to easily integrate text resources into aspx
            files. E.g.:
            
            Code behind:
            <![CDATA[
            public class WebResourceManager : TextResourceManager
            {
                protected override string GetResourceNotFoundString(string key)
                {
                        return "<strong>Resource " + key + " not found</strong>";
                }
            
                public WebResourceManager()
                    : base("tr_Resources.TwoCultures.xml"
                            , @"C:\VSS\CommonTools.3.5.root\CommonTools.TestSuite\Languages\"
                            , "Resources.TwoCultures.xml"
                            , "en-gb"
                            , "resource"
                            , "key")
                { }
            }
            
            public class CommonToolsTextResource : TextResourceLiteral
            {
                private TextResourceManager _Resources;
                protected override TextResourceManager TextResourceManager
                {
                    get
                    {
                        return _Resources;
                    }
                }
            
                public CommonToolsTextResource()
                {
                    _Resources = new WebResourceManager();
                }
            }]]>
            
            WebPage:
            <![CDATA[<ct:CommonToolsTextResource id="ctr" runat="server" ResourceKey="resource1" />]]>
            
            </summary>
        </member>
        <member name="M:CommonTools.Components.TextResources.TextResourceManager.GetResourceFilePath(System.String)">
            <summary>
            Gets the resource file path.
            </summary>
            <param name="culture">The culture.</param>
            <returns></returns>
        </member>
        <member name="M:CommonTools.Components.TextResources.TextResourceManager.GetAllAvailableCultures">
            <summary>
            Gets all available cultures.
            </summary>
            <returns></returns>
        </member>
        <member name="M:CommonTools.Components.TextResources.TextResourceManager.GetResourceFilePathsFromAllCultures">
            <summary>
            Gets the resource file paths from all cultures.
            </summary>
            <returns></returns>
        </member>
        <member name="M:CommonTools.Components.TextResources.TextResourceManager.SetCache(System.Collections.Generic.Dictionary{System.String,System.Collections.Generic.Dictionary{System.String,System.String}})">
            <summary>
            Sets the cache.
            </summary>
            <param name="resources">The resources.</param>
        </member>
        <member name="M:CommonTools.Components.TextResources.TextResourceManager.PurgeFromCache">
            <summary>
            Purges the dictionary from cache.
            </summary>
        </member>
        <member name="M:CommonTools.Components.TextResources.TextResourceManager.GetResourceDictionaries">
            <summary>
            This method returns a dictionary with all localized resource text dictionaries. Format:
            <![CDATA[Dictionary<{ culture }, Dictionary<{ resourceKey }, { content }>>]]>
            </summary>
            <returns>A dictionary with all localized resource text dictionaries</returns>
            <exception cref="T:CommonTools.Components.TextResources.TextResourceManagerException">Thrown when there is an error loading
            an xml file or there are resource keys are not unique at the resource file.</exception>
        </member>
        <member name="M:CommonTools.Components.TextResources.TextResourceManager.GetResourceNotFoundString(System.String)">
            <summary>
            This method returns a generic resource string if the spefied resource can't be found. It
            can be overwritten in deriving classes.
            </summary>
            <param name="key">The key.</param>
            <returns></returns>
        </member>
        <member name="M:CommonTools.Components.TextResources.TextResourceManager.GetFormattedResourceText(System.String,System.Object[])">
            <summary>
            Gets the formatted resource text.
            </summary>
            <param name="key">The resource key.</param>
            <param name="args">An System.Object array containing zero or more objects to format.</param>
            <returns></returns>
        </member>
        <member name="M:CommonTools.Components.TextResources.TextResourceManager.GetFormattedResourceText(System.String,System.String,System.Object[])">
            <summary>
            Gets the formatted resource text.
            </summary>
            <param name="key">The resource key.</param>
            <param name="culture">The culture.</param>
            <param name="args">An System.Object array containing zero or more objects to format.</param>
            <returns></returns>
        </member>
        <member name="M:CommonTools.Components.TextResources.TextResourceManager.GetResourceText(System.String)">
            <summary>
            Gets the resource text.
            </summary>
            <param name="key">The resource key.</param>
            <returns></returns>
        </member>
        <member name="M:CommonTools.Components.TextResources.TextResourceManager.GetResourceText(System.String,System.String)">
            <summary>
            Gets the resource text.
            </summary>
            <param name="key">The key.</param>
            <param name="culture">The culture.</param>
            <returns></returns>
        </member>
        <member name="M:CommonTools.Components.TextResources.TextResourceManager.#ctor(System.String,System.String,System.String,System.String,System.String,System.String)">
            <summary>
            This constructor creates a new instance of the TextResourceManager class.
            </summary>
            <param name="cacheKey">The key for storing resource files as dictionary at the HttpRuntime.Cache</param>
            <param name="absoluteResourceFolder">The root folder of all resources. Subfolders of this
            path must be folders representing culture keys. E.g: The absolute resource folder of the resource
            file 'C:\MyProject\TextResources\en-gb\Alerts\MyAlerts.xml' is ''C:\MyProject\TextResources\'</param>
            <param name="relativeFilePath">The filepath relative to the culture folder. E.g: The relative resource
            file path of the resource file 'C:\MyProject\TextResources\en-gb\Alerts\MyAlerts.xml' is 'Alerts\MyAlerts.xml'</param>
            <param name="defaultCulture">The default culture to use for gracefull fallbacks when a resource key is not
            found at a specific culture.</param>
            <param name="tagname">The name of a resource tag at the resource xml file. E.g.: The tag name of
            the xml document schema
            <![CDATA[
            <Resources>
                <resource key="mykey1">some content</resource>
                <resource key="mykey2">some other content</resource>
            </Resources>
            ]]>
            is 'resource'.
            </param>
            <param name="nodeIdentifier">The name of a resource tag identification attribute. E.g.: The nodeIdentifier of
            the xml document schema
            <![CDATA[
            <Resources>
                <resource key="mykey1">some content</resource>
                <resource key="mykey2">some other content</resource>
            </Resources>
            ]]>
            is 'key'.</param>
        </member>
        <member name="P:CommonTools.Components.TextResources.TextResourceManager.Resources">
            <summary>
            Gets a dictionary with all resources.
            </summary>
            <value>The resources.</value>
        </member>
        <member name="T:CommonTools.Components.RegularExpressions.ValidationExpressions">
            <summary>
            This class contains regular expression validation strings
            </summary>
        </member>
        <member name="F:CommonTools.Components.RegularExpressions.ValidationExpressions.EmailAddress">
            <summary>
            Validates a valid email
            </summary>
        </member>
        <member name="F:CommonTools.Components.RegularExpressions.ValidationExpressions.UKMobilePhoneNumber">
            <summary>
            
            </summary>
        </member>
        <member name="M:CommonTools.Components.RegularExpressions.ValidationExpressions.IsValidUKMobilePhoneNumber(System.String)">
            <summary>
            Determines whether [is valid UK mobile phone number] [the specified phone number].
            </summary>
            <param name="phoneNumber">The phone number.</param>
            <returns>
            	<c>true</c> if [is valid UK mobile phone number] [the specified phone number]; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:CommonTools.Components.RegularExpressions.ValidationExpressions.IsValidEmail(System.String)">
            <summary>
            Determines whether [the specified email] [is valid] .
            </summary>
            <param name="email">The email.</param>
            <returns>
            	<c>true</c> if [is valid email] [the specified email]; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:CommonTools.Components.RegularExpressions.ValidationExpressions.AreValidEmails(System.String,System.Char)">
            <summary>
            Determines whether the specified email addresses, provided with a specified delimiter are valid.
            </summary>
            <param name="emails">The emails in the following format: email1@test.com{delimiter}email2@test.com{delimiter}...</param>
            <param name="delimiter">The delimiter.</param>
            <returns></returns>
        </member>
        <member name="T:CommonTools.Components.Reflection.ReflectionHelper">
            <summary>
            This class has helper methods for reflection
            </summary>
        </member>
        <member name="M:CommonTools.Components.Reflection.ReflectionHelper.CreateDataTableInstance(System.Type)">
            <summary>
            Creates an instance of a strongly typed DataSet's underlying data table. This method assumes that the given DataSet has 
            only one data table implemented -> otherwise it will return an instance of the first datatable of the DataSet.
            </summary>
            <param name="stronglyTypedDataSet">The type of the strongly typed data set.</param>
            <returns>The underlying data table.</returns>
        </member>
        <member name="M:CommonTools.Components.Reflection.ReflectionHelper.CreateTableAdapterInstance(System.Type)">
            <summary>
            Gets an instance of a given table adapter from it's type.
            </summary>
            <param name="tableAdapterType">Type of the table adapter.</param>
            <returns>An instance of a given table adapter from it's type</returns>
        </member>
        <member name="M:CommonTools.Components.Reflection.ReflectionHelper.GetTypeFromAssembly(System.String,System.Reflection.Assembly)">
            <summary>
            Gets a type from a given assembly from it's string representation.
            </summary>
            <param name="typeName">The type.</param>
            <param name="assembly">The assembly to get the type from.</param>
            <returns>The type from a given assembly, null if the type could not be found.</returns>
        </member>
        <member name="M:CommonTools.Components.Reflection.ReflectionHelper.GetTypeFromAssembly(System.String,System.Type[])">
            <summary>
            Gets a type from a given assembly's exported types from it's string representation.
            </summary>
            <param name="typeName">The type.</param>
            <param name="assemblyTypes">The exported types of an assembly.</param>
            <returns>The type from a given assembly, null if the type could not be found.</returns>
        </member>
        <member name="M:CommonTools.Components.Reflection.ReflectionHelper.LoadAssembly(System.String)">
            <summary>
            This method returns an assembly without locking it.
            </summary>
            <param name="filename">The filename (full path).</param>
            <returns>An assembly extracted from the given filename.</returns>
        </member>
        <member name="T:CommonTools.Components.Flash.OpenFlashChart.YAxisLabels">
            <summary>
            
            </summary>
        </member>
        <member name="M:CommonTools.Components.Flash.OpenFlashChart.YAxisLabels.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:CommonTools.Components.Flash.OpenFlashChart.XAxisLabels"/> class.
            </summary>
        </member>
        <member name="P:CommonTools.Components.Flash.OpenFlashChart.YAxisLabels.AxisLabelValues">
            <summary>
            Gets or sets the axis label values.
            </summary>
            <value>The axis label values.</value>
        </member>
        <member name="P:CommonTools.Components.Flash.OpenFlashChart.YAxisLabels.Color">
            <summary>
            Gets or sets the color.
            </summary>
            <value>The color.</value>
        </member>
        <member name="T:CommonTools.Xml.XmlSerializationHelper`1">
            <summary>
            This class exposes general help methods dealing with xml serialization.
            </summary>
            <typeparam name="T">The returntype used for some serialization methods.</typeparam>
        </member>
        <member name="M:CommonTools.Xml.XmlSerializationHelper`1.SaveAsXmlFile(`0,System.String)">
            <summary>
            Saves an object as it's serialized XML represenetation at a given file.
            </summary>
            <param name="settings">The T object to serialize.</param>
            <param name="file">The file to save the serialized object to.</param>
            <returns>true is successfull, otherwise false.</returns>
        </member>
        <member name="M:CommonTools.Xml.XmlSerializationHelper`1.SaveAsXmlFile(`0,System.String,System.String@)">
            <summary>
            Saves an object as it's serialized XML represenetation at a given file.
            </summary>
            <param name="settings">The T object to serialize.</param>
            <param name="file">The file to save the serialized object to.</param>
            <param name="errormessage">The errormessage if an error occurred. Returns string.Empty if successfull.</param>
            <returns>true is successfull, otherwise false.</returns>
        </member>
        <member name="M:CommonTools.Xml.XmlSerializationHelper`1.ConvertToXElement(`0)">
            <summary>
            This method converts a T object to an XElement
            </summary>
            <param name="obj">The object to convert.</param>
            <returns></returns>
        </member>
        <member name="M:CommonTools.Xml.XmlSerializationHelper`1.ConvertToXml(`0)">
            <summary>
            This method serializes a T object to a xml string representation.
            </summary>
            <param name="settings">The T object to serialize</param>
            <returns>The xml representation of the specified object, string.Empty if an error occurred.</returns>
        </member>
        <member name="M:CommonTools.Xml.XmlSerializationHelper`1.ConvertToXml(`0,System.Boolean,System.Boolean)">
            <summary>
            This method serializes a T object to a xml string representation.
            </summary>
            <param name="settings">The T object to serialize</param>
            <param name="omitNamespace">if set to <c>true</c> the namespace declaration withing the root node will be omitted.</param>
            <param name="omitXmlDeclaration">if set to <c>true</c> the xml declaration at the beginning of the string will be omitted.</param>
            <returns>
            The xml representation of the specified object, string.Empty if an error occurred.
            </returns>
        </member>
        <member name="M:CommonTools.Xml.XmlSerializationHelper`1.ConvertFromXml(System.String)">
            <summary>
            This method returns a T object from it's serialized xml representation.
            </summary>
            <param name="xml">The serialized xml representation of this T object</param>
            <returns>The T object, null if an error occurred.</returns>
        </member>
        <member name="M:CommonTools.Xml.XmlSerializationHelper`1.ConvertFromXml(System.String,System.String@)">
            <summary>
            This method returns a T object from it's serialized xml representation.
            </summary>
            <param name="xml">The serialized xml representation of this T object</param>
            <param name="errormessage">The errormessage when an error occurred. Returns string.Empty if the conversion succeeded.</param>
            <returns>The T object, null if an error occurred.</returns>
        </member>
        <member name="M:CommonTools.Xml.XmlSerializationHelper`1.ConvertFromXml(System.Xml.Linq.XElement)">
            <summary>
            This method returns a T object from it's serialized xml representation.
            </summary>
            <param name="element">The XElement representation of this T object</param>
            <returns>The T object, null if an error occurred.</returns>
        </member>
        <member name="M:CommonTools.Xml.XmlSerializationHelper`1.ConvertFromXml(System.Xml.Linq.XElement,System.String@)">
            <summary>
            This method returns a T object from it's serialized xml representation.
            </summary>
            <param name="element">The XElement representation of this T object</param>
            <param name="errormessage">The errormessage when an error occurred. Returns string.Empty if the conversion succeeded.</param>
            <returns>The T object, null if an error occurred.</returns>
        </member>
        <member name="M:CommonTools.Xml.XmlSerializationHelper`1.ConvertFromFile(System.String)">
            <summary>
            This method returns a T object from it's serialized xml representation stored at a specified file.
            </summary>
            <param name="filename">The file (absolute path) that holds the serialized xml representation of this T object.</param>
            <returns>The T object, null if an error occurred.</returns>
        </member>
        <member name="M:CommonTools.Xml.XmlSerializationHelper`1.ConvertFromFile(System.String,System.String@)">
            <summary>
            This method returns a T object from it's serialized xml representation stored at a specified file.
            </summary>
            <param name="filename">The file (absolute path) that holds the serialized xml representation of this T object.</param>
            <param name="errormessage">The errormessage when an error occurred. Returns string.Empty if the conversion succeeded.</param>
            <returns>The T object, null if an error occurred.</returns>
        </member>
        <member name="T:CommonTools.Web.Navigation.UrlManager">
            <summary>
            This static class includes methods that are helpful for web navigation.
            </summary>
        </member>
        <member name="M:CommonTools.Web.Navigation.UrlManager.GetIntegerFromQueryString(System.String)">
            <summary>
            This method returns an integer that holds the value of a given querystring key. If
            the querystring-key was not provided or malicious, this methods returns null
            </summary>
            <param name="key">The QueryString key</param>
            <returns>
            An integer that holds the value of a given querystring key. If the querystring-key
            was not provided or malicious, this methods returns null
            </returns>
        </member>
        <member name="T:CommonTools.Data.DataAccessManagerConnectionStringException">
            <summary>
            Exception that gets thrown by the CommonTools.Components.Caching namespace
            </summary>
        </member>
        <member name="M:CommonTools.Data.DataAccessManagerConnectionStringException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:CommonTools.Data.DataAccessManagerConnectionStringException"/> class.
            </summary>
            <param name="message">The message</param>
        </member>
        <member name="M:CommonTools.Data.DataAccessManagerConnectionStringException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:CommonTools.Data.DataAccessManagerConnectionStringException"/> class.
            </summary>
            <param name="message">The message.</param>
            <param name="inner">The inner.</param>
        </member>
        <member name="T:CommonTools.Components.Caching.CacheObject`1">
            <summary>
            Provides the base class for objects which are to be cached.
            </summary>
            <typeparam name="T">The type of the object to be cached.</typeparam>
        </member>
        <member name="M:CommonTools.Components.Caching.CacheObject`1.GetObject">
            <summary>
            Gets the object to be cached.
            </summary>
            <returns></returns>
        </member>
        <member name="M:CommonTools.Components.Caching.CacheObject`1.SetEnumerationKey(System.String)">
            <summary>
            Sets the enumeration key. The enumeration key can only be set if the CacheObject was instanciated with the 'waitForInitialization'
            flag set to false. 
            </summary>
            <param name="key">
            The enumeration key is necessary for objects that must be instanciated with an identifier, e.g.:
            
                myApplicationUser user1 = new myApplicationUser(15);    // where the passed parameter '15' is the ID of the application user.
                myApplicationUser user2 = new myApplicationUser(367);   // ...
            
            Such object's cache keys are stored in the following format: { enumeration key } + { suffix }
                -> e.g.: '15_MySuffix' and '367_MySuffix' (where the string '_MySuffix' is used as the suffix)
            
            A benefit from this is that all cached objects of a specific type can be removed from cache by calling 
            the 'PurgeAllEnumeratingObjects();' method. 
            </param>
        </member>
        <member name="M:CommonTools.Components.Caching.CacheObject`1.Fetch">
            <summary>
            this method gets the requested object from cache. If the object can't be found at the Cache,
            a new object gets instanciated and then inserted into the system cache.
            </summary>
            <returns>the requested object</returns>
        </member>
        <member name="M:CommonTools.Components.Caching.CacheObject`1.Fetch(System.Boolean)">
            <summary>
            this method gets the requested object from cache. If the object can't be found at the Cache,
            a new object gets instanciated and then inserted into the system cache.
            </summary>
            <param name="useCache">
            Determines whether the requested object should be fetched from cache or newly instanciated.
            If this value is false, the requested object won't be inserted into the system cache either. 
            </param>
            <returns>the requested object</returns>
        </member>
        <member name="M:CommonTools.Components.Caching.CacheObject`1.Fetch(System.Boolean,System.Boolean)">
            <summary>
            this method gets the requested object from cache. If the object can't be found at the Cache,
            a new object gets instanciated and then inserted into the system cache.
            </summary>
            <param name="useCache">
            Determines whether the requested object should be fetched from cache or newly instanciated.
            If this value is false, the requested object won't be inserted into the system cache either. 
            </param>
            <param name="flushAfterFetch">
            Determines whether the fetched object should be removed from the system cache after it was 
            fetched from cache.
            </param>
            <returns>the requested object</returns>
        </member>
        <member name="M:CommonTools.Components.Caching.CacheObject`1.PurgeItemFromCache">
            <summary>
            This method removes this instanciated object from cache.
            </summary>
        </member>
        <member name="M:CommonTools.Components.Caching.CacheObject`1.PurgeAllEnumeratingObjects">
            <summary>
            This method removes all objects of this object's type from cache.
            </summary>
        </member>
        <member name="M:CommonTools.Components.Caching.CacheObject`1.SetCache(`0)">
            <summary>
            sets the current cache object
            </summary>
            <param name="cacheObject">object to cache</param>
        </member>
        <member name="M:CommonTools.Components.Caching.CacheObject`1.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:CommonTools.Components.Caching.CacheObject`1"/> class.
            </summary>
            <param name="waitForEnumerationKey">if set to true, the enumeration key is not set. In order to use
            this class, the enumeration key must be set via the SetEnumerationKey(string) method, otherwise an exception will be thrown.</param>
        </member>
        <member name="M:CommonTools.Components.Caching.CacheObject`1.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:CommonTools.Components.Caching.CacheObject`1"/> class.
            </summary>
        </member>
        <member name="M:CommonTools.Components.Caching.CacheObject`1.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:CommonTools.Components.Caching.CacheObject`1"/> class.
            </summary>
            <param name="enumerationKey">
            The enumeration key is necessary for objects that must be instanciated with an identifier, e.g.:
            
                myApplicationUser user1 = new myApplicationUser(15);    // where the passed parameter '15' is the ID of the application user.
                myApplicationUser user2 = new myApplicationUser(367);   // ...
            
            Such object's cache keys are stored in the following format: { enumeration key } + { suffix }
                -&gt; e.g.: '15_MySuffix' and '367_MySuffix' (where the string '_MySuffix' is used as the suffix)
            
            A benefit from this is that all cached objects of a specific type can be removed from cache by calling 
            the 'PurgeAllEnumeratingObjects();' method.     
            </param>
        </member>
        <member name="P:CommonTools.Components.Caching.CacheObject`1.CacheKey">
            <summary>
            Gets the cache key.
            </summary>
            <value>The cache key.</value>
        </member>
        <member name="T:CommonTools.Core.DataStoreException">
            <summary>
            
            </summary>
        </member>
        <member name="M:CommonTools.Core.DataStoreException.#ctor(System.Exception,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:CommonTools.Core.DataStoreException"/> class.
            </summary>
            <param name="innerException">The inner exception.</param>
            <param name="isLogged">if set to <c>true</c> [is logged].</param>
        </member>
        <member name="M:CommonTools.Core.DataStoreException.#ctor(System.String,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:CommonTools.Core.DataStoreException"/> class.
            </summary>
            <param name="message">The message.</param>
            <param name="isLogged">if set to <c>true</c> [is logged].</param>
        </member>
        <member name="M:CommonTools.Core.DataStoreException.#ctor(System.String,System.Exception,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:CommonTools.Core.DataStoreException"/> class.
            </summary>
            <param name="message">The message.</param>
            <param name="innerException">The inner exception.</param>
            <param name="isLogged">if set to <c>true</c> [is logged].</param>
        </member>
        <member name="T:CommonTools.Components.BusinessTier.BusinessObjectPropertyAttribute">
            <summary>
            This attribute can be used for BaseBusinessObject properties in order to enforce constraints.
            </summary>
        </member>
        <member name="M:CommonTools.Components.BusinessTier.BusinessObjectPropertyAttribute.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:CommonTools.Components.BusinessTier.BusinessObjectPropertyAttribute"/> class.
            </summary>
        </member>
        <member name="P:CommonTools.Components.BusinessTier.BusinessObjectPropertyAttribute.PropagateValidation">
            <summary>
            Gets or sets a value indicating whether [propagate validation].
            </summary>
            <value><c>true</c> if [propagate validation]; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:CommonTools.Components.BusinessTier.BusinessObjectPropertyAttribute.IsMandatoryForInstance">
            <summary>
            Gets or sets a value indicating whether this property needs to be set before it can be
            created at the database.
            </summary>
            <value>
            	<c>true</c> if this property is mandatory for instance; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:CommonTools.Components.BusinessTier.BusinessObjectPropertyAttribute.DefaultValue">
            <summary>
            Gets or sets the default value for this property if it doesn not get set before database creation.
            </summary>
            <value>The default value.</value>
        </member>
        <member name="P:CommonTools.Components.BusinessTier.BusinessObjectPropertyAttribute.ValidatorInstance">
            <summary>
            Gets the validator attribute instance.
            </summary>
            <value></value>
            <returns>The current <see cref="T:System.Configuration.ConfigurationValidatorBase"></see>.</returns>
        </member>
        <member name="T:CommonTools.Components.Threading.Jobs">
            <summary>
            Class that handles jobs defined in web.config 
            </summary>
        </member>
        <member name="M:CommonTools.Components.Threading.Jobs.Start">
            <summary>
            Starts this instance.
            </summary>
        </member>
        <member name="M:CommonTools.Components.Threading.Jobs.Start(CommonTools.Components.Threading.IJobController)">
            <summary>
            Finds and Starts all jobs. Any existing jobs are shutdown first
            </summary>
            <param name="controller">The controller.</param>
        </member>
        <member name="M:CommonTools.Components.Threading.Jobs.Stop">
            <summary>
            Calls dispose on all current jobs and clears the job list
            </summary>
        </member>
        <member name="M:CommonTools.Components.Threading.Jobs.Instance">
            <summary>
            Returns a reference to the current instance of Jobs
            </summary>
            <returns></returns>
        </member>
        <member name="M:CommonTools.Components.Threading.Jobs.ToString">
            <summary>
            Overridden. Shows the job status in the debugger visualiser.
            </summary>
            <returns>A job status.</returns>
        </member>
        <member name="M:CommonTools.Components.Threading.Jobs.IsJobEnabled(System.String)">
            <summary>
            Checks to see whether the specified job is currently enabled or disabled.
            </summary>
            <param name="jobName">The name of the job</param>
            <returns>bool</returns>
        </member>
        <member name="M:CommonTools.Components.Threading.Jobs.IsJobRunning(System.String)">
            <summary>
            Determines whether the specified job is currently running.
            </summary>
            <param name="jobName">Name of the job.</param>
            <returns>
            	<c>true</c> if the specified job is currently running; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:CommonTools.Components.Threading.Jobs.SingleThreadTimerCallback(System.Object)">
            <summary>
            Callback used to iterate over jobs when they are not excuted on their own Timer
            </summary>
            <param name="state"></param>
        </member>
        <member name="M:CommonTools.Components.Threading.Jobs.ExecuteFirstRuns">
            <summary>
            Executes all jobs that should run at this object's instanciation. After this first execute call,
            all jobs will execute on their intervals.
            </summary>
        </member>
        <member name="M:CommonTools.Components.Threading.Jobs.#ctor">
            <summary>
            Do not allow direct creation
            </summary>
        </member>
        <member name="P:CommonTools.Components.Threading.Jobs.CurrentJobs">
            <summary>
            Gets the current list of jobs available on the server.
            </summary>
        </member>
        <member name="P:CommonTools.Components.Threading.Jobs.Created">
            <summary>
            Gets the time the job was created.
            </summary>
        </member>
        <member name="P:CommonTools.Components.Threading.Jobs.LastStart">
            <summary>
            Returns the last time the job was started.
            </summary>
        </member>
        <member name="P:CommonTools.Components.Threading.Jobs.LastStop">
            <summary>
            Returns the time the job was last stopped.
            </summary>
        </member>
        <member name="P:CommonTools.Components.Threading.Jobs.IsRunning">
            <summary>
            Whether the job is running
            </summary>
        </member>
        <member name="P:CommonTools.Components.Threading.Jobs.Minutes">
            <summary>
            The time the job has run.
            </summary>
        </member>
        <member name="P:CommonTools.Components.Threading.Jobs.CurrentStats">
            <summary>
            Returns the current stats for the job.
            </summary>
        </member>
        <member name="T:CommonTools.Components.Security.RijndaelSimpleHashAlgorithm">
            <summary>
            Enumeration for all possible algorithms to be used at RijndaelSimple class
            </summary>
        </member>
        <member name="F:CommonTools.Components.Security.RijndaelSimpleHashAlgorithm.MD5">
            <summary>
            MD5 algorithm
            </summary>
        </member>
        <member name="F:CommonTools.Components.Security.RijndaelSimpleHashAlgorithm.SHA1">
            <summary>
            SHA1 algorithm (slower than MD5 but better results)
            </summary>
        </member>
        <member name="T:CommonTools.Components.Security.SafeNativeMethods">
            <summary>
            All Win32 DllImports go here.
            </summary>
        </member>
        <member name="F:CommonTools.Components.Security.SafeNativeMethods.LOGON32_LOGON_INTERACTIVE">
            <summary>
            Log in interactively
            </summary>
        </member>
        <member name="F:CommonTools.Components.Security.SafeNativeMethods.LOGON32_PROVIDER_DEFAULT">
            <summary>
            Log in using the default.
            </summary>
        </member>
        <member name="T:CommonTools.Web.Navigation.GenericSiteMapMenuController`2">
            <summary>
            This class can act as an abstract base class for a SiteMapMenu Controller.
            </summary>
            <typeparam name="TISiteMapMenu">The type of the IISiteMapMenu to create</typeparam>
            <typeparam name="TISiteMapMenuItem">The type of the ISiteMapMenuItem to create</typeparam>
        </member>
        <member name="F:CommonTools.Web.Navigation.GenericSiteMapMenuController`2._SiteMapMenus">
            <summary>
            
            </summary>
        </member>
        <member name="M:CommonTools.Web.Navigation.GenericSiteMapMenuController`2.CreateSiteMapMenuControllerInstance(CommonTools.Web.Navigation.IUrlRewriteController)">
            <summary>
            Creates an instance of this object's default controller.
            </summary>
            <param name="urlRewriteController">The URL rewrite controller.</param>
            <returns></returns>
        </member>
        <member name="M:CommonTools.Web.Navigation.GenericSiteMapMenuController`2.GetSiteMapMenu(System.String)">
            <summary>
            Gets an ISiteMapMenuItem from the ISiteMapMenuItem collection by name
            </summary>
            <param name="name">The name</param>
            <returns></returns>
        </member>
        <member name="M:CommonTools.Web.Navigation.GenericSiteMapMenuController`2.GetMatchingSiteMapMenuItem(CommonTools.Web.Navigation.ISiteMapMenuItem,System.String)">
            <summary>
            Gets the matching site map menu item.
            </summary>
            <param name="item">The item.</param>
            <param name="name">The name.</param>
            <returns></returns>
        </member>
        <member name="M:CommonTools.Web.Navigation.GenericSiteMapMenuController`2.LoadRewriteItems(CommonTools.Web.Navigation.ISiteMapMenuItem)">
            <summary>
            Loads the rewrite items.
            </summary>
            <param name="item">The item.</param>
        </member>
        <member name="M:CommonTools.Web.Navigation.GenericSiteMapMenuController`2.GetMenuItemsRecursive(CommonTools.Web.Navigation.ISiteMapMenuItem,System.Collections.Generic.List{CommonTools.Web.Navigation.ISiteMapMenuItem},System.Xml.Linq.XElement)">
            <summary>
            Gets generic site map menus from a given XmlReader.
            </summary>
            <param name="parent">The parent.</param>
            <param name="items">The items.</param>
            <param name="menuNode">The menu node.</param>
            <returns></returns>
        </member>
        <member name="M:CommonTools.Web.Navigation.GenericSiteMapMenuController`2.GetGenericSiteMapMenusFromXml(System.Xml.XmlReader)">
            <summary>
            Gets generic site map menus from a given XmlReader. The specified types must have an empty default constructor in order
            to make this method work.
            </summary>
            <param name="reader">The reader.</param>
            <returns></returns>
        </member>
        <member name="M:CommonTools.Web.Navigation.GenericSiteMapMenuController`2.GetSchema">
            <summary>
            This method is reserved and should not be used. When implementing the IXmlSerializable interface, you should return null (Nothing in Visual Basic) from this method, and instead, if specifying a custom schema is required, apply the <see cref="T:System.Xml.Serialization.XmlSchemaProviderAttribute"/> to the class.
            </summary>
            <returns>
            An <see cref="T:System.Xml.Schema.XmlSchema"/> that describes the XML representation of the object that is produced by the <see cref="M:System.Xml.Serialization.IXmlSerializable.WriteXml(System.Xml.XmlWriter)"/> method and consumed by the <see cref="M:System.Xml.Serialization.IXmlSerializable.ReadXml(System.Xml.XmlReader)"/> method.
            </returns>
        </member>
        <member name="M:CommonTools.Web.Navigation.GenericSiteMapMenuController`2.ReadXml(System.Xml.XmlReader)">
            <summary>
            Generates an object from its XML representation.
            </summary>
            <param name="reader">The <see cref="T:System.Xml.XmlReader"/> stream from which the object is deserialized.</param>
        </member>
        <member name="M:CommonTools.Web.Navigation.GenericSiteMapMenuController`2.WriteXml(System.Xml.XmlWriter)">
            <summary>
            Converts an object into its XML representation.
            </summary>
            <param name="writer">The <see cref="T:System.Xml.XmlWriter"/> stream to which the object is serialized.</param>
        </member>
        <member name="P:CommonTools.Web.Navigation.GenericSiteMapMenuController`2.SiteMapMenus">
            <summary>
            Gets the site map menus. Format: Key -&gt; name of the menu, Value -&gt; the menu
            </summary>
            <value>The site map menus.</value>
        </member>
        <member name="P:CommonTools.Web.Navigation.GenericSiteMapMenuController`2.UrlRewriteController">
            <summary>
            Gets the URL rewrite controller.
            </summary>
            <value>The URL rewrite controller.</value>
        </member>
        <member name="T:CommonTools.Web.JavaScript.JsonSerializationException">
            <summary>
            
            </summary>
        </member>
        <member name="M:CommonTools.Web.JavaScript.JsonSerializationException.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:CommonTools.Web.JavaScript.JsonSerializationException"/> class.
            </summary>
        </member>
        <member name="M:CommonTools.Web.JavaScript.JsonSerializationException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:CommonTools.Web.JavaScript.JsonSerializationException"/> class.
            </summary>
            <param name="message">The message.</param>
        </member>
        <member name="M:CommonTools.Web.JavaScript.JsonSerializationException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:CommonTools.Web.JavaScript.JsonSerializationException"/> class.
            </summary>
            <param name="message">The message.</param>
            <param name="innerException">The inner exception.</param>
        </member>
        <member name="M:CommonTools.Web.JavaScript.JsonSerializationException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:CommonTools.Web.JavaScript.JsonSerializationException"/> class.
            </summary>
            <param name="info">The object that holds the serialized object data.</param>
            <param name="context">The contextual information about the source or destination.</param>
        </member>
        <member name="T:CommonTools.Web.JavaScript.JsonDeserializationException">
            <summary>
            
            </summary>
        </member>
        <member name="M:CommonTools.Web.JavaScript.JsonDeserializationException.#ctor(System.String,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:CommonTools.Web.JavaScript.JsonDeserializationException"/> class.
            </summary>
            <param name="message">The message.</param>
            <param name="index">The index.</param>
        </member>
        <member name="M:CommonTools.Web.JavaScript.JsonDeserializationException.#ctor(System.String,System.Exception,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:CommonTools.Web.JavaScript.JsonDeserializationException"/> class.
            </summary>
            <param name="message">The message.</param>
            <param name="innerException">The inner exception.</param>
            <param name="index">The index.</param>
        </member>
        <member name="M:CommonTools.Web.JavaScript.JsonDeserializationException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:CommonTools.Web.JavaScript.JsonDeserializationException"/> class.
            </summary>
            <param name="info">The object that holds the serialized object data.</param>
            <param name="context">The contextual information about the source or destination.</param>
        </member>
        <member name="M:CommonTools.Web.JavaScript.JsonDeserializationException.GetLineAndColumn(System.String,System.Int32@,System.Int32@)">
            <summary>
            Helper method which converts the index into Line and Column numbers
            </summary>
            <param name="source"></param>
            <param name="line"></param>
            <param name="col"></param>
        </member>
        <member name="P:CommonTools.Web.JavaScript.JsonDeserializationException.Index">
            <summary>
            Gets the character position in the stream where the error occurred.
            </summary>
        </member>
        <member name="T:CommonTools.IO.ApplicationDataStorageMode">
            <summary>
            
            </summary>
        </member>
        <member name="F:CommonTools.IO.ApplicationDataStorageMode.AllUsers">
            <summary>
            
            </summary>
        </member>
        <member name="F:CommonTools.IO.ApplicationDataStorageMode.User">
            <summary>
            
            </summary>
        </member>
        <member name="T:CommonTools.Finance.RegularExpressions.ValidationExpressions">
            <summary>
            This class contains validation expressions and methods to validate financial terminologies
            </summary>
        </member>
        <member name="M:CommonTools.Finance.RegularExpressions.ValidationExpressions.IsISINValid(System.String)">
            <summary>
            Determines whether the specified ISIN is valid according to the following definition -> An ISIN consists of 
            three parts: Generally, a two letter country code, a nine character alpha-numeric national security 
            identifier, and a single check digit. The country code is the ISO 3166-1 alpha-2 code for the country of 
            issue, which is not necessarily the country in which the issuing company is domiciled. International securities 
            cleared through Clearstream or Euroclear, which are Europe-wide, use "XS" as the country code.
            </summary>
            <param name="isin">The isin.</param>
            <returns>
            	<c>true</c> if [is ISIN valid] [the specified isin]; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:CommonTools.Finance.RegularExpressions.ValidationExpressions.CreateISINChecksum(System.String)">
            <summary>
            This method creates the checksum for a specified ISIN. If you pass in a full 12 character ISIN, the checksum returned by this
            method should equal the last character.
            </summary>
            <param name="isin">The isin.</param>
            <returns></returns>
        </member>
        <member name="M:CommonTools.Finance.RegularExpressions.ValidationExpressions.IsSedolValid(System.String)">
            <summary>
            Determines whether the specified SEDOL is valid according to the following definition -&gt; SEDOLs are seven
            characters in length, consisting of two parts: a six-place alphanumeric code and a trailing check digit.
            
            SEDOLs issued prior to January 26, 2004 were composed only of numbers. For those older SEDOLs, those
            from Asia and Africa typically begin with 6, those from the UK and Ireland (until Ireland joined the EU)
            typically begin with 0 or 3 those from Europe typically began with 4, 5 or 7 and those from the Americas
            began with 2.
            
            After January 26, 2004, SEDOLs were changed to be alpha-numeric and are issued sequentially,
            beginning with B000009. At each character position numbers precede letters and vowels are never used.
            All new SEDOLs, therefore, begin with a letter. Ranges beginning with 9 are reserved for end user allocation.
            </summary>
            <param name="sedol">The sedol.</param>
            <returns>
            	<c>true</c> if the SEDOL is valid; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:CommonTools.Finance.RegularExpressions.ValidationExpressions.CreateSedolChecksum(System.String)">
            <summary>
            This method creates the checksum for a specified Sedol. If you pass in a full 7 character Sedol, the checksum returned by this
            method should equal the last character.
            </summary>
            <param name="sedol">The sedol.</param>
            <returns></returns>
        </member>
        <member name="T:CommonTools.Finance.MagicFields">
            <summary>
            
            </summary>
        </member>
        <member name="F:CommonTools.Finance.MagicFields.DATEFORMAT">
            <summary>
            
            </summary>
        </member>
        <member name="F:CommonTools.Finance.MagicFields.RENDEZVOUS_DATEFORMAT">
            <summary>
            
            </summary>
        </member>
        <member name="F:CommonTools.Finance.MagicFields.RENDEZVOUS_DATEFORMAT_SHORT">
            <summary>
            
            </summary>
        </member>
        <member name="F:CommonTools.Finance.MagicFields.MESSAGEFILE_DATEFORMAT">
            <summary>
            
            </summary>
        </member>
        <member name="T:CommonTools.Extensions.Extensions">
            <summary>
            
            </summary>
        </member>
        <member name="M:CommonTools.Extensions.Extensions.NextRandom``1(System.Collections.Generic.IEnumerable{``0},System.Random)">
            <summary>
            Nexts the random.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="source">The source.</param>
            <param name="random">The random.</param>
            <returns></returns>
        </member>
        <member name="M:CommonTools.Extensions.Extensions.RandomizeList``1(``0,System.Random)">
            <summary>
            Randomizes the list.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="inputList">The input list.</param>
            <param name="random">The random.</param>
            <returns></returns>
        </member>
        <member name="M:CommonTools.Extensions.Extensions.ToCanonical(System.DateTime)">
            <summary>
            Converts this datetime object to a canonical formated string that
            can be recognized by SQL. ()Format: MM.DD.YYYY hh:mm:ss.ms
            </summary>
            <param name="dt">The datetime object</param>
            <returns></returns>
        </member>
        <member name="M:CommonTools.Extensions.Extensions.ToSqlSmallDateTime(System.DateTime)">
            <summary>
            Converts this object to a SqlSmallDateTime (cuts off the seconds and milliseconds)
            </summary>
            <param name="dateTime">The date time.</param>
            <returns></returns>
        </member>
        <member name="M:CommonTools.Extensions.Extensions.Round(System.DateTime)">
            <summary>
            Rounds the specified date time.
            </summary>
            <param name="dateTime">The date time.</param>
            <returns></returns>
        </member>
        <member name="M:CommonTools.Extensions.Extensions.Round(System.DateTime,CommonTools.Extensions.DateTimeRoundingAccuracy)">
            <summary>
            Rounds the specified date time.
            </summary>
            <param name="dateTime">The date time.</param>
            <param name="dateTimeRoundingAccuracy">The date time rounding accuracy.</param>
            <returns></returns>
        </member>
        <member name="M:CommonTools.Extensions.Extensions.Round(System.DateTime,CommonTools.Extensions.DateTimeRoundingAccuracy,System.MidpointRounding)">
            <summary>
            Rounds the specified date time.
            </summary>
            <param name="dateTime">The date time.</param>
            <param name="dateTimeRoundingAccuracy">The date time rounding accuracy.</param>
            <param name="midpointRounding">The midpoint rounding.</param>
            <returns></returns>
        </member>
        <member name="M:CommonTools.Extensions.Extensions.GetQuotedSearchKeywords(System.String)">
            <summary>
            Gets the quoted search keywords.
            </summary>
            <param name="text">The text.</param>
            <returns></returns>
        </member>
        <member name="M:CommonTools.Extensions.Extensions.Format(System.String,CommonTools.TextFormatOptions[])">
            <summary>
            Formats a given text with some specified options.
            </summary>
            <param name="text">The text to format</param>
            <param name="options">The options to use in order to format the text.</param>
            <returns>A with the specified options formated string.</returns>
        </member>
        <member name="M:CommonTools.Extensions.Extensions.ToLoweredInitalString(System.String)">
            <summary>
            Gets a string with a lower-case initial letter, e.g.: ThisIsMyString -> thisIsMyString
            </summary>
            <param name="text">The string to convert</param>
            <returns>a string with a lower-case initial letter</returns>
        </member>
        <member name="M:CommonTools.Extensions.Extensions.ToUpperCaseWordsString(System.String)">
            <summary>
            Converts the given string to upper case only words, e.g.: this is My STRING -> This Is My String
            </summary>
            <param name="text">The string to convert</param>
            <returns>to upper case only words converted string</returns>
        </member>
        <member name="M:CommonTools.Extensions.Extensions.ToQuerystringParameter(System.String,System.String)">
            <summary>
            This method gets a special-character safe querystring parameter
            </summary>
            <param name="id">The ID of the parameter</param>
            <param name="text">The value of the parameter</param>
            <returns>a special-character safe querystring parameter in the format {id}={value}</returns>
        </member>
        <member name="M:CommonTools.Extensions.Extensions.UrlEncode(System.String)">
            <summary>
            Transforms a given string to its querystring-safe representation.
            </summary>
            <param name="text">The string to convert</param>
            <returns>The querystring-safe representation of a given string</returns>
        </member>
        <member name="M:CommonTools.Extensions.Extensions.UrlDecode(System.String)">
            <summary>
            Converts a string that has been encoded for transmission in a URL into a
            decoded string.
            </summary>
            <param name="text">The string to convert</param>
            <returns>The querystring-safe representation of a given string</returns>
        </member>
        <member name="M:CommonTools.Extensions.Extensions.SplitLongWords(System.String,System.String,System.Int32)">
            <summary>
            Splits long words using the splitter supplied, and limiting word lengths to whatever is specified.
            </summary>
            <param name="text">the text to check</param>
            <param name="splitter">the splitter</param>
            <param name="maxWordLength">maximum word length</param>
            <returns></returns>
        </member>
        <member name="M:CommonTools.Extensions.Extensions.ToFriendlyMailAddress(System.String,System.String)">
            <summary>
            Gets a friendly mail address.
            </summary>
            <param name="mailAddress">The mail address</param>
            <param name="friendlyName">Name of the p friendly.</param>
            <returns>A string in the friendly address name format</returns>
        </member>
        <member name="M:CommonTools.Extensions.Extensions.ConvertTextBoxToHtml(System.String,System.Int32,System.Boolean)">
            <summary>
            Converts all returns ( \r\n ) from an asp:TextBox to HTML &lt;br /&gt;. Additionally, words that
            contain more characters than defined in the maxWordLength parameter get splitted by a blank
            character.
            </summary>
            <param name="text">The text to convert</param>
            <param name="maxWordLength">The maximum length of a word before it gets splitted by a blank character</param>
            <param name="removeBadTags">Set to true to also strip out invalid tags.</param>
            <returns></returns>
        </member>
        <member name="M:CommonTools.Extensions.Extensions.ConvertTextBoxToHtml(System.String)">
            <summary>
            Converts all returns ( \r\n ) from an asp:TextBox to HTML &lt;br /&gt;.
            </summary>
            <param name="text">The text to convert</param>
            <returns></returns>
        </member>
        <member name="M:CommonTools.Extensions.Extensions.ConvertTextBoxToHtml(System.String,System.Int32)">
            <summary>
            Converts all returns ( \r\n ) from an asp:TextBox to HTML &lt;br /&gt;.
            </summary>
            <param name="text">The text to convert</param>
            <param name="maxWordLength">Cut off after this many bytes (-1 to use infinite).</param>
            <returns></returns>
        </member>
        <member name="M:CommonTools.Extensions.Extensions.RemoveMaliciousTags(System.String,System.String)">
            <summary>
            Removes bad tags from string.
            </summary>
            <param name="text">The string to replace bad tags from</param>
            <param name="maliciousTags">bad tags in the following format: "tagname|tagname|tagname|...|tagname"</param>
            <returns>the input string without the specified bad tags</returns>
        </member>
        <member name="M:CommonTools.Extensions.Extensions.RemoveMaliciousTags(System.String)">
            <summary>
            Removes the following tags from string a string: 
            abbr|acronym|address|applet|area|base|basefont|bdo|big|body|button|
            caption|center|cite|code|col|colgroup|dd|del|dir|div|dfn|dl|dt|embed|
            fieldset|font|form|frame|frameset|head|html|iframe|img|input|ins|
            isindex|kbd|label|legend|link|map|menu|meta|noframes|noscript|object|
            optgroup|option|param|pre|q|s|samp|script|select|small|span|strike|
            style|table|tbody|td|textarea|tfoot|th|thead|title|tr|tt|var|xmp
            </summary>
            <param name="text">The string to replace bad tags from</param>
            <returns>A "bad-tag-free" string.</returns>
        </member>
        <member name="M:CommonTools.Extensions.Extensions.ConvertHtmlToTextBox(System.String)">
            <summary>
            Converts HTML markup to a string that can be displayed safely in a text input field or textarea
            </summary>
            <param name="text">The HTML markup text</param>
            <returns>A string that can be displayed safely in a text input field or textarea</returns>
        </member>
        <member name="M:CommonTools.Extensions.Extensions.RemoveLineBreaks(System.String)">
            <summary>
            Removes all line breaks inside a given string.
            </summary>
            <param name="text">The text to remove the line-breaks from</param>
            <returns>A text without linebreaks.</returns>
        </member>
        <member name="M:CommonTools.Extensions.Extensions.HighlightWord(System.String,System.String,System.String)">
            <summary>
            Highlights a specified text pattern inside a string by wrapping it with a span that has the associated
            Css Class.
            </summary>
            <param name="text">The text to highlight content from</param>
            <param name="wordToHighlight">The text to highlight</param>
            <param name="highlightCssClass">The CSS class responsible for highlighting</param>
            <returns></returns>
        </member>
        <member name="M:CommonTools.Extensions.Extensions.RemoveTags(System.String)">
            <summary>
            Removes all html/xml tags from a specified string.
            </summary>
            <param name="text">String to be cleaned from tags</param>
            <returns>The specified string without tags</returns>
        </member>
        <member name="M:CommonTools.Extensions.Extensions.RemoveScriptTags(System.String)">
            <summary>
            This methods removes all javascript script tags from the given string
            </summary>
            <param name="text">Text to be cleaned for script tags</param>
            <returns>Clean text with no script tags.</returns>
        </member>
        <member name="M:CommonTools.Extensions.Extensions.DefuseScriptTags(System.String)">
            <summary>
            This method defuses script tags by replacing the opening tag bracket with &lt;.
            </summary>
            <param name="text">Text to be cleaned for script tags</param>
            <returns>Clean text with no script tags.</returns>
        </member>
        <member name="M:CommonTools.Extensions.Extensions.RemoveMaliciousSQLCharacters(System.String)">
            <summary>
            Removes characters that can be used for SQL injections.
            </summary>
            <param name="text">The text to remove the bad characters from</param>
            <returns>A bad SQL character clean string</returns>
        </member>
        <member name="M:CommonTools.Extensions.Extensions.RemoveNonNumericCharacters(System.String)">
            <summary>
            Removes non-numeric characters from a string.
            </summary>
            <param name="text">The text to remove the non-numerics from</param>
            <returns>A numeric string</returns>
        </member>
        <member name="M:CommonTools.Extensions.Extensions.Abbreviate(System.String,System.Int32,System.String)">
            <summary>
            This method cuts a string if it exceeds a given maximum length. Optionally, you can define
            a suffix (e.g.: "...") to be attached when the string is to long.
            </summary>
            <param name="text">The string to format</param>
            <param name="maxLength">The maximum length of the string</param>
            <param name="suffix">The text to attach if the word exceeds the maximum length.</param>
            <example>
            <![CDATA[
                string text = "abcdefghijklmn"; 
                
                // convert text to "abcd..."
                text = text.Abbreviate(7, "...");
            ]]>
            </example>
            <returns></returns>
        </member>
        <member name="M:CommonTools.Extensions.Extensions.Abbreviate(System.String,System.Int32)">
            <summary>
            This method cuts a string if it exceeds a given maximum length. Optionally, you can define
            a suffix (e.g.: "...") to be attached when the string is to long.
            </summary>
            <param name="text">The string to format</param>
            <param name="maxLength">The maximum length of the string</param>
            <returns></returns>
        </member>
        <member name="M:CommonTools.Extensions.Extensions.Abbreviate(System.String,System.Int32,System.Boolean)">
            <summary>
            This method cuts a string if it exceeds a given maximum length. Optionally, you can define
            a suffix (e.g.: "...") to be attached when the string is to long.
            </summary>
            <param name="text">The string to format</param>
            <param name="maxLength">The maximum length of the string</param>
            <param name="attachPoints">if true, "..." is attached when the string is too long.</param>
            <returns></returns>
        </member>
        <member name="M:CommonTools.Extensions.Extensions.ToDebugString``2(System.Collections.Generic.Dictionary{``0,``1},CommonTools.TextFormat)">
            <summary>
            Converts a Dictionary to a debug string
            </summary>
            <typeparam name="TKey">The type of the key.</typeparam>
            <typeparam name="TValue">The type of the value.</typeparam>
            <param name="dictionary">The dictionary.</param>
            <param name="format">The format.</param>
            <returns></returns>
        </member>
        <member name="M:CommonTools.Extensions.Extensions.ToQueryStringInteger(System.String)">
            <summary>
            This method returns an integer extracted from a querystring parameter. 
            </summary>
            <example>
            You can use this extension in the following way ->
            
            int? myPostID = HttpContext.Current.Request.QueryString["postId"].ToQueryStringInteger();
            if (myPostID != null)
            {
                // ... do something
            }
            
            </example>
            <param name="text">The text.</param>
            <returns></returns>
        </member>
        <member name="M:CommonTools.Extensions.Extensions.ToQueryStringShort(System.String)">
            <summary>
            This method returns a short extracted from a querystring parameter. 
            </summary>
            <example>
            You can use this extension in the following way ->
            
            short? myPostID = HttpContext.Current.Request.QueryString["postId"].ToQueryStringShort();
            if (myPostID != null)
            {
                // ... do something
            }
            
            </example>
            <param name="text">The text.</param>
            <returns></returns>
        </member>
        <member name="M:CommonTools.Extensions.Extensions.ToQueryStringDate(System.String)">
            <summary>
            This method returns a datetime extracted from a querystring parameter.
            </summary>
            <example>
            You can use this extension in the following way ->
            
            DateTime? postdate = HttpContext.Current.Request.QueryString["postdate"].ToQueryStringDate();
            if (postdate != null)
            {
                // ... do something
            }
            
            </example>
            <param name="text">The text.</param>
            <returns></returns>
        </member>
        <member name="M:CommonTools.Extensions.Extensions.ToSplittedCamelCase(System.String)">
            <summary>
            Converts this text into a splitted camel case string
            </summary>
            <example>
            <![CDATA[
            Text: ThisIsMyExample
            Outcome: This Is My Example
            ]]>
            </example>
            <param name="text">The text.</param>
            <returns></returns>
        </member>
        <member name="M:CommonTools.Extensions.Extensions.XmlEncode(System.String)">
            <summary>
            Encodes an XML value
            </summary>
            <param name="text">The text to encode.</param>
            <returns></returns>
        </member>
        <member name="M:CommonTools.Extensions.Extensions.SetXElementNodeList(System.Xml.Linq.XElement,System.Xml.Linq.XName,System.Collections.IList)">
            <summary>
            Sets the X element node list.
            </summary>
            <param name="container">The container.</param>
            <param name="name">The name.</param>
            <param name="obj">The obj.</param>
        </member>
        <member name="M:CommonTools.Extensions.Extensions.SetXElementNodeLookup(System.Xml.Linq.XElement,System.Xml.Linq.XName,System.Collections.IDictionary)">
            <summary>
            Sets the X element node lookup.
            </summary>
            <param name="container">The container.</param>
            <param name="name">The name.</param>
            <param name="obj">The obj.</param>
        </member>
        <member name="M:CommonTools.Extensions.Extensions.ParseXElementNodeLookup``1(System.Xml.Linq.XElement,System.Xml.Linq.XName,``0)">
            <summary>
            Parses the X element node lookup.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="container">The container.</param>
            <param name="name">The name.</param>
            <param name="defaultValue">The default value.</param>
            <returns></returns>
        </member>
        <member name="M:CommonTools.Extensions.Extensions.ParseXElementNodeList``1(System.Xml.Linq.XElement,System.Xml.Linq.XName,``0)">
            <summary>
            Parses the X element node list.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="container">The container.</param>
            <param name="name">The name.</param>
            <param name="defaultValue">The default value.</param>
            <returns></returns>
        </member>
        <member name="M:CommonTools.Extensions.Extensions.ParseXElementNode``1(System.Xml.Linq.XElement,System.Xml.Linq.XName,``0)">
            <summary>
            Parses the X element node to the specified type.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="container">The parent XElement that contains the tag.</param>
            <param name="name">The name of the tag.</param>
            <param name="defaultValue">The default value if the tag can't be found at the default element (can be null with
            nullable objects).</param>
            <returns>
            The object parsed from the tag, the default value if the tag was not found or invalid.
            </returns>
            <exception cref="T:System.FormatException">Throws a System.FormatException if the specified generic type could not be parsed.</exception>
        </member>
        <member name="M:CommonTools.Extensions.Extensions.GetField``1(System.Collections.Generic.IDictionary{System.String,System.Object},System.String)">
            <summary>
            Gets a generic field from a specified dictionary.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="dictionary">The dictionary.</param>
            <param name="fieldName">Name of the field.</param>
            <returns></returns>
        </member>
        <member name="M:CommonTools.Extensions.Extensions.GetField``1(System.Collections.Generic.IDictionary{System.String,System.Object},System.String,System.Boolean)">
            <summary>
            Gets a generic field from a specified dictionary.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="dictionary">The dictionary.</param>
            <param name="fieldName">Name of the field.</param>
            <param name="upperCase">if set to <c>true</c> [upper case].</param>
            <returns></returns>
        </member>
        <member name="M:CommonTools.Extensions.Extensions.GetField``1(System.Collections.Generic.IDictionary{System.String,System.Object},System.String,System.Boolean,``0)">
            <summary>
            Gets a generic field from a specified dictionary.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="dictionary">The dictionary.</param>
            <param name="fieldName">Name of the field.</param>
            <param name="upperCase">if set to <c>true</c> [upper case].</param>
            <param name="defaultValue">The default value.</param>
            <returns></returns>
        </member>
        <member name="M:CommonTools.Extensions.Extensions.GetField``1(System.Collections.Generic.IDictionary{System.String,System.String},System.String)">
            <summary>
            Gets a generic field from a specified dictionary.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="dictionary">The dictionary.</param>
            <param name="fieldName">Name of the field.</param>
            <returns></returns>
        </member>
        <member name="M:CommonTools.Extensions.Extensions.GetField``1(System.Collections.Generic.IDictionary{System.String,System.String},System.String,System.Boolean)">
            <summary>
            Gets a generic field from a specified dictionary.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="dictionary">The dictionary.</param>
            <param name="fieldName">Name of the field.</param>
            <param name="upperCase">if set to <c>true</c> [upper case].</param>
            <returns></returns>
        </member>
        <member name="M:CommonTools.Extensions.Extensions.GetField``1(System.Collections.Generic.IDictionary{System.String,System.String},System.String,System.Boolean,``0)">
            <summary>
            Gets a generic field from a specified dictionary.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="dictionary">The dictionary.</param>
            <param name="fieldName">Name of the field.</param>
            <param name="upperCase">if set to <c>true</c> [upper case].</param>
            <param name="defaultValue">The default value.</param>
            <returns></returns>
        </member>
        <member name="M:CommonTools.Extensions.Extensions.ToSqlExecStatement(System.Data.SqlClient.SqlCommand)">
            <summary>
            Creates a Sql EXEC statement for the specified command.
            </summary>
            <param name="cmd">The command.</param>
            <returns></returns>
        </member>
        <member name="T:CommonTools.Components.Testing.GlobalStopwatchSingleThread">
            <summary>
            
            </summary>
        </member>
        <member name="M:CommonTools.Components.Testing.GlobalStopwatchSingleThread.Reset(System.String)">
            <summary>
            Resets the specified stopwatch id.
            </summary>
            <param name="stopwatchId">The stopwatch id.</param>
        </member>
        <member name="M:CommonTools.Components.Testing.GlobalStopwatchSingleThread.Start(System.String)">
            <summary>
            Starts the specified stopwatch id.
            </summary>
            <param name="stopwatchId">The stopwatch id.</param>
        </member>
        <member name="M:CommonTools.Components.Testing.GlobalStopwatchSingleThread.Stop(System.String)">
            <summary>
            Stops the specified stopwatch id.
            </summary>
            <param name="stopwatchId">The stopwatch id.</param>
        </member>
        <member name="M:CommonTools.Components.Testing.GlobalStopwatchSingleThread.GetElapsedTime(System.String)">
            <summary>
            Gets the elapsed time.
            </summary>
            <param name="stopwatchId">The stopwatch id.</param>
            <returns></returns>
        </member>
        <member name="M:CommonTools.Components.Testing.GlobalStopwatchSingleThread.GetElapsedTimeFormatted(System.String)">
            <summary>
            Gets the elapsed time formatted.
            </summary>
            <param name="stopwatchId">The stopwatch id.</param>
            <returns></returns>
        </member>
        <member name="M:CommonTools.Components.Testing.GlobalStopwatchSingleThread.GetAllElapsedTimesFormatted">
            <summary>
            Gets all elapsed times formatted.
            </summary>
            <returns></returns>
        </member>
        <member name="T:CommonTools.Components.Testing.GlobalStopwatchSingleThread.StopwatchInfo">
            <summary>
            
            </summary>
        </member>
        <member name="M:CommonTools.Components.Testing.GlobalStopwatchSingleThread.StopwatchInfo.GetElapsedTimeFormatted">
            <summary>
            Gets the elapsed time formatted.
            </summary>
            <returns></returns>
        </member>
        <member name="M:CommonTools.Components.Testing.GlobalStopwatchSingleThread.StopwatchInfo.GetElapsed">
            <summary>
            Gets the elapsed.
            </summary>
            <returns></returns>
        </member>
        <member name="M:CommonTools.Components.Testing.GlobalStopwatchSingleThread.StopwatchInfo.Start">
            <summary>
            Starts this instance.
            </summary>
        </member>
        <member name="M:CommonTools.Components.Testing.GlobalStopwatchSingleThread.StopwatchInfo.Stop">
            <summary>
            Stops this instance.
            </summary>
        </member>
        <member name="M:CommonTools.Components.Testing.GlobalStopwatchSingleThread.StopwatchInfo.Reset">
            <summary>
            Resets this instance.
            </summary>
        </member>
        <member name="M:CommonTools.Components.Testing.GlobalStopwatchSingleThread.StopwatchInfo.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:CommonTools.Components.Testing.GlobalStopwatchSingleThread.StopwatchInfo"/> class.
            </summary>
            <param name="name">The name.</param>
        </member>
        <member name="T:CommonTools.Components.Localization.TimeZoneUtility">
            <summary>
            This class contains time zone utility methods. It stores the following time zone definitions:
            
            Morocco Standard Time,
            GMT Standard Time,
            Greenwich Standard Time,
            W. Europe Standard Time,
            Central Europe Standard Time,
            Romance Standard Time,
            Central European Standard Time,
            W. Central Africa Standard Time,
            Jordan Standard Time,
            GTB Standard Time,
            Middle East Standard Time,
            Egypt Standard Time,
            South Africa Standard Time,
            FLE Standard Time,
            Israel Standard Time,
            E. Europe Standard Time,
            Namibia Standard Time,
            Arabic Standard Time,
            Arab Standard Time,
            Russian Standard Time,
            E. Africa Standard Time,
            Georgian Standard Time,
            Iran Standard Time,
            Arabian Standard Time,
            Azerbaijan Standard Time,
            Caucasus Standard Time,
            Mauritius Standard Time,
            Armenian Standard Time,
            Afghanistan Standard Time,
            Ekaterinburg Standard Time,
            Pakistan Standard Time,
            West Asia Standard Time,
            India Standard Time,
            Sri Lanka Standard Time,
            Nepal Standard Time,
            N. Central Asia Standard Time,
            Central Asia Standard Time,
            Myanmar Standard Time,
            SE Asia Standard Time,
            North Asia Standard Time,
            China Standard Time,
            North Asia East Standard Time,
            Singapore Standard Time,
            W. Australia Standard Time,
            Taipei Standard Time,
            Tokyo Standard Time,
            Korea Standard Time,
            Yakutsk Standard Time,
            Cen. Australia Standard Time,
            AUS Central Standard Time,
            E. Australia Standard Time,
            AUS Eastern Standard Time,
            West Pacific Standard Time,
            Tasmania Standard Time,
            Vladivostok Standard Time,
            Central Pacific Standard Time,
            New Zealand Standard Time,
            Fiji Standard Time,
            Tonga Standard Time,
            Azores Standard Time,
            Cape Verde Standard Time,
            Mid-Atlantic Standard Time,
            E. South America Standard Time,
            Argentina Standard Time,
            SA Eastern Standard Time,
            Greenland Standard Time,
            Montevideo Standard Time,
            Newfoundland Standard Time,
            Atlantic Standard Time,
            SA Western Standard Time,
            Central Brazilian Standard Time,
            Pacific SA Standard Time,
            Venezuela Standard Time,
            SA Pacific Standard Time,
            Eastern Standard Time,
            US Eastern Standard Time,
            Central America Standard Time,
            Central Standard Time,
            Central Standard Time (Mexico),
            Mexico Standard Time,
            Canada Central Standard Time,
            US Mountain Standard Time,
            Mountain Standard Time (Mexico),
            Mexico Standard Time 2,
            Mountain Standard Time,
            Pacific Standard Time,
            Pacific Standard Time (Mexico),
            Alaskan Standard Time,
            Hawaiian Standard Time,
            Samoa Standard Time,
            Dateline Standard Time,
            UTC
            </summary>
        </member>
        <member name="F:CommonTools.Components.Localization.TimeZoneUtility._TimeZoneInfos">
            <summary>
            
            </summary>
        </member>
        <member name="M:CommonTools.Components.Localization.TimeZoneUtility.GetGMTStandardTimeZone">
            <summary>
            Gets the GMT standard time zone.
            </summary>
            <returns>The GMT standard time zon</returns>
            <exception cref="T:System.TimeZoneNotFoundException">Throws a System.TimeZoneNotFoundException if the gmt standard time can't be found.</exception>
        </member>
        <member name="M:CommonTools.Components.Localization.TimeZoneUtility.GetTimeZoneInfo(System.String)">
            <summary>
            Gets the time zone info.
            </summary>
            <param name="timeZoneName">Name of the time zone.</param>
            <returns></returns>
            <exception cref="T:System.TimeZoneNotFoundException">Throws a System.TimeZoneNotFoundException if the timezone was not found.</exception>
        </member>
        <member name="M:CommonTools.Components.Localization.TimeZoneUtility.HasTimeZone(System.String)">
            <summary>
            Determines whether a specified timezone if present at this instance
            </summary>
            <param name="timeZoneName">Name of the time zone.</param>
            <returns>
            	<c>true</c> if a specified timezone if present at this instance; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:CommonTools.Components.Localization.TimeZoneUtility.GetAllTimeZoneNames">
            <summary>
            Gets all time zone names.
            </summary>
            <returns></returns>
        </member>
        <member name="M:CommonTools.Components.Localization.TimeZoneUtility.TryConvertUTCDateToLocalizedDate(System.DateTime,System.String,System.DateTime@)">
            <summary>
            Tries the convert a UTC date to a localized date.
            </summary>
            <param name="utcDate">The UTC date.</param>
            <param name="timeZoneName">Name of the time zone.</param>
            <param name="localizedDate">The localized date.</param>
            <returns></returns>
        </member>
        <member name="M:CommonTools.Components.Localization.TimeZoneUtility.ConvertUTCDateToLocalizedDate(System.DateTime,System.TimeZoneInfo)">
            <summary>
            Converts the UTC date to localized date.
            </summary>
            <param name="utcDate">The UTC date.</param>
            <param name="timeZoneInfo">The time zone info.</param>
            <returns></returns>
        </member>
        <member name="M:CommonTools.Components.Localization.TimeZoneUtility.TryConvertLocalizedDateToUTC(System.DateTime,System.String,System.DateTime@)">
            <summary>
            Tries the convert a local date to UTC.
            </summary>
            <param name="localDate">The local date.</param>
            <param name="timeZoneName">Name of the time zone.</param>
            <param name="utcDate">The UTC date.</param>
            <returns></returns>
        </member>
        <member name="M:CommonTools.Components.Localization.TimeZoneUtility.ConvertLocalizedDateToUTC(System.DateTime,System.TimeZoneInfo)">
            <summary>
            Converts the localized date to UTC.
            </summary>
            <param name="localDate">The local date.</param>
            <param name="timeZoneInfo">The time zone info.</param>
            <returns></returns>
        </member>
        <member name="T:CommonTools.Components.Caching.ClusteredCacheSection">
            <summary>
            Provides the handler for the ClusteredCache section of app.config.
            </summary>
        </member>
        <member name="M:CommonTools.Components.Caching.ClusteredCacheSection.CreateClusteredCacheControllerInstance">
            <summary>
            Creates the clustered cache controller instance.
            </summary>
            <returns></returns>
        </member>
        <member name="P:CommonTools.Components.Caching.ClusteredCacheSection.ConnectionStringName">
            <summary>
            Gets or sets the name of the connection string.
            </summary>
            <value>The name of the connection string.</value>
        </member>
        <member name="P:CommonTools.Components.Caching.ClusteredCacheSection.StoredProcedurePrefix">
            <summary>
            Gets or sets the stored procedure prefix.
            </summary>
            <value>The stored procedure prefix.</value>
        </member>
        <member name="P:CommonTools.Components.Caching.ClusteredCacheSection.ClusteredCacheSectionProviderType">
            <summary>
            Gets or sets the type of the log section provider.
            </summary>
            <value>The type of the log section provider.</value>
        </member>
        <member name="P:CommonTools.Components.Caching.ClusteredCacheSection.ClusteredCachingMode">
            <summary>
            Gets or sets the clustered caching mode to use to synchronize the cache. See the documentation
            for further info.
            </summary>
            <value>The clustered caching mode.</value>
        </member>
        <member name="P:CommonTools.Components.Caching.ClusteredCacheSection.CheckAtRequestCacheKey">
            <summary>
            Gets or sets the CheckAtRequest cache key for storing the cache dictionary.
            </summary>
            <value>The check at request cache key.</value>
        </member>
        <member name="P:CommonTools.Components.Caching.ClusteredCacheSection.MillisecondsToSleepAfterCachePurge">
            <summary>
            Gets or sets the milliseconds to sleep after a purge cache call. This value can be
            used to force the purge cache calling thread to sleep for a certain amount of time
            in order to wait for the sql dependency to fire. Normally, this event should fire quite
            instantanously, but if you expirience any delays adjust this value. Set this value to
            -1 if you want to disable the thread sleep.
            </summary>
            <value>The milliseconds to sleep after cache purge.</value>
        </member>
        <member name="P:CommonTools.Components.Caching.ClusteredCacheSection.CheckAtRequestIsUpToDateDelayInMilliseconds">
            <summary>
            This value defines how often the clustered cache mechanism checks against the database whether
            the current synchronyzed value of the cached item is up to date. If this value is not set or set
            to a value &lt;= 0, at each object request a call is made to the database to check whether
            the requested cached object is up to date. If this value is greater than 0, every xxx milliseconds
            after the last call the clustered cache manager makes a call to the database to check whether we are
            up to date.
            This can improve performance significally if you have a very busy site (E.g.: if there are 10000
            object requests a second, if this value is set to 200, the database is only called 5 times whereas it
            is called 10000 times if this property is not used or &lt;= 0).
            </summary>
            <value>The check at request is up to date delay.</value>
        </member>
        <member name="P:CommonTools.Components.Caching.ClusteredCacheSection.ApplicationId">
            <summary>
            Gets or sets the application id of the application which uses the clustered cache component. Use
            this property if you have to synchronize multiple autonomous applications within one database
            </summary>
            <value>The application id.</value>
        </member>
        <member name="T:CommonTools.Components.Logging.LogManager">
            <summary>
            This class handles event and exception logging.
            </summary>
        </member>
        <member name="M:CommonTools.Components.Logging.LogManager.LogEvent(System.Int32,System.Int32,System.String)">
            <summary>
            Logs an event.
            </summary>
            <param name="appLocation">The Application location. This parameter should represent where in your application the event occurred, e.g. MyEnum.BusinessLayer or MyEnum.UserCreation</param>
            <param name="eventType">Type of the event. This parameter should represent the type of your event, e.g. MyEnum.Information</param>
            <param name="message">The event message.</param>
        </member>
        <member name="M:CommonTools.Components.Logging.LogManager.LogEvent(System.Enum,System.Enum,System.String)">
            <summary>
            Logs an event.
            </summary>
            <param name="appLocation">The Application location. This parameter should represent where in your application the event occurred, e.g. MyEnum.BusinessLayer or MyEnum.UserCreation</param>
            <param name="eventType">Type of the event. This parameter should represent the type of your event, e.g. MyEnum.Information</param>
            <param name="message">The event message.</param>
        </member>
        <member name="M:CommonTools.Components.Logging.LogManager.LogEvent(System.Enum,System.Enum,System.String,System.String)">
            <summary>
            Logs an event.
            </summary>
            <param name="appLocation">The Application location. This parameter should represent where in your application the event occurred, e.g. MyEnum.BusinessLayer or MyEnum.UserCreation</param>
            <param name="eventType">Type of the event. This parameter should represent the type of your event, e.g. MyEnum.Information</param>
            <param name="message">The event message.</param>
            <param name="authenticatedUserId">The authenticated user id.</param>
        </member>
        <member name="M:CommonTools.Components.Logging.LogManager.LogEvent(System.Int32,System.Int32,System.Int32,System.String)">
            <summary>
            Logs an event.
            </summary>
            <param name="applicationId">The application id.</param>
            <param name="appLocation">The Application location. This parameter should represent where in your application the event occurred, e.g. MyEnum.BusinessLayer or MyEnum.UserCreation</param>
            <param name="eventType">Type of the event. This parameter should represent the type of your event, e.g. MyEnum.Information</param>
            <param name="message">The event message.</param>
        </member>
        <member name="M:CommonTools.Components.Logging.LogManager.LogEvent(System.Int32,System.Enum,System.Enum,System.String)">
            <summary>
            Logs an event.
            </summary>
            <param name="applicationId">The application id.</param>
            <param name="appLocation">The Application location. This parameter should represent where in your application the event occurred, e.g. MyEnum.BusinessLayer or MyEnum.UserCreation</param>
            <param name="eventType">Type of the event. This parameter should represent the type of your event, e.g. MyEnum.Information</param>
            <param name="message">The event message.</param>
        </member>
        <member name="M:CommonTools.Components.Logging.LogManager.LogEvent(System.Int32,System.Enum,System.Enum,System.String,System.String)">
            <summary>
            Logs an event.
            </summary>
            <param name="applicationId">The application id.</param>
            <param name="appLocation">The Application location. This parameter should represent where in your application the event occurred, e.g. MyEnum.BusinessLayer or MyEnum.UserCreation</param>
            <param name="eventType">Type of the event. This parameter should represent the type of your event, e.g. MyEnum.Information</param>
            <param name="message">The event message.</param>
            <param name="authenticatedUserId">The authenticated user id.</param>
        </member>
        <member name="M:CommonTools.Components.Logging.LogManager.LogEvent(System.Int32,System.Int32,System.Int32,System.String,System.String)">
            <summary>
            Logs an event.
            </summary>
            <param name="applicationId">The application id.</param>
            <param name="appLocation">The Application location. This parameter should represent where in your application the event occurred, e.g. MyEnum.BusinessLayer or MyEnum.UserCreation</param>
            <param name="eventType">Type of the event. This parameter should represent the type of your event, e.g. MyEnum.Information</param>
            <param name="message">The event message.</param>
            <param name="authenticatedUserId">The authenticated user id.</param>
        </member>
        <member name="M:CommonTools.Components.Logging.LogManager.LogException(System.Enum,System.Exception)">
            <summary>
            Logs an exception.
            </summary>
            <param name="appLocation">The Application location. This parameter should represent where in your application the event occurred, e.g. MyEnum.BusinessLayer or MyEnum.UserCreation</param>
            <param name="e">The exception to log.</param>
        </member>
        <member name="M:CommonTools.Components.Logging.LogManager.LogException(System.Int32,System.Exception)">
            <summary>
            Logs an exception.
            </summary>
            <param name="appLocation">The Application location. This parameter should represent where in your application the event occurred, e.g. MyEnum.BusinessLayer or MyEnum.UserCreation</param>
            <param name="e">The exception to log.</param>
        </member>
        <member name="M:CommonTools.Components.Logging.LogManager.LogException(System.Enum,System.Exception,System.String)">
            <summary>
            Logs an exception.
            </summary>
            <param name="appLocation">The Application location. This parameter should represent where in your application the event occurred, e.g. MyEnum.BusinessLayer or MyEnum.UserCreation</param>
            <param name="e">The exception to log.</param>
            <param name="authenticatedUserId">The authenticated user id.</param>
        </member>
        <member name="M:CommonTools.Components.Logging.LogManager.LogException(System.Int32,System.Exception,System.String)">
            <summary>
            Logs an exception.
            </summary>
            <param name="appLocation">The Application location. This parameter should represent where in your application the event occurred, e.g. MyEnum.BusinessLayer or MyEnum.UserCreation</param>
            <param name="e">The exception to log.</param>
            <param name="authenticatedUserId">The authenticated user id.</param>
        </member>
        <member name="M:CommonTools.Components.Logging.LogManager.LogException(System.Enum,CommonTools.Components.Logging.ExceptionHandlingStatus,System.Exception)">
            <summary>
            Logs an exception.
            </summary>
            <param name="appLocation">The Application location. This parameter should represent where in your application the event occurred, e.g. MyEnum.BusinessLayer or MyEnum.UserCreation</param>
            <param name="handlindStatus">The handling status of this exception.</param>
            <param name="e">The exception to log.</param>
        </member>
        <member name="M:CommonTools.Components.Logging.LogManager.LogException(System.Enum,CommonTools.Components.Logging.ExceptionHandlingStatus,System.Exception,System.String)">
            <summary>
            Logs an exception.
            </summary>
            <param name="appLocation">The Application location. This parameter should represent where in your application the event occurred, e.g. MyEnum.BusinessLayer or MyEnum.UserCreation</param>
            <param name="handlindStatus">The handling status of this exception.</param>
            <param name="e">The exception to log.</param>
            <param name="authenticatedUserId">The authenticated user id.</param>
        </member>
        <member name="M:CommonTools.Components.Logging.LogManager.LogException(System.Int32,CommonTools.Components.Logging.ExceptionHandlingStatus,System.Exception)">
            <summary>
            Logs an exception.
            </summary>
            <param name="appLocation">The Application location. This parameter should represent where in your application the event occurred, e.g. MyEnum.BusinessLayer or MyEnum.UserCreation</param>
            <param name="handlindStatus">The handling status of this exception.</param>
            <param name="e">The exception to log.</param>
        </member>
        <member name="M:CommonTools.Components.Logging.LogManager.LogException(System.Int32,System.Enum,System.Exception)">
            <summary>
            Logs an exception.
            </summary>
            <param name="applicationId">The application id.</param>
            <param name="appLocation">The Application location. This parameter should represent where in your application the event occurred, e.g. MyEnum.BusinessLayer or MyEnum.UserCreation</param>
            <param name="e">The exception to log.</param>
        </member>
        <member name="M:CommonTools.Components.Logging.LogManager.LogException(System.Int32,System.Int32,System.Exception)">
            <summary>
            Logs an exception.
            </summary>
            <param name="applicationId">The application id.</param>
            <param name="appLocation">The Application location. This parameter should represent where in your application the event occurred, e.g. MyEnum.BusinessLayer or MyEnum.UserCreation</param>
            <param name="e">The exception to log.</param>
        </member>
        <member name="M:CommonTools.Components.Logging.LogManager.LogException(System.Int32,System.Enum,System.Exception,System.String)">
            <summary>
            Logs an exception.
            </summary>
            <param name="applicationId">The application id.</param>
            <param name="appLocation">The Application location. This parameter should represent where in your application the event occurred, e.g. MyEnum.BusinessLayer or MyEnum.UserCreation</param>
            <param name="e">The exception to log.</param>
            <param name="authenticatedUserId">The authenticated user id.</param>
        </member>
        <member name="M:CommonTools.Components.Logging.LogManager.LogException(System.Int32,System.Int32,System.Exception,System.String)">
            <summary>
            Logs an exception.
            </summary>
            <param name="applicationId">The application id.</param>
            <param name="appLocation">The Application location. This parameter should represent where in your application the event occurred, e.g. MyEnum.BusinessLayer or MyEnum.UserCreation</param>
            <param name="e">The exception to log.</param>
            <param name="authenticatedUserId">The authenticated user id.</param>
        </member>
        <member name="M:CommonTools.Components.Logging.LogManager.LogException(System.Int32,System.Enum,CommonTools.Components.Logging.ExceptionHandlingStatus,System.Exception)">
            <summary>
            Logs an exception.
            </summary>
            <param name="applicationId">The application id.</param>
            <param name="appLocation">The Application location. This parameter should represent where in your application the event occurred, e.g. MyEnum.BusinessLayer or MyEnum.UserCreation</param>
            <param name="handlindStatus">The handling status of this exception.</param>
            <param name="e">The exception to log.</param>
        </member>
        <member name="M:CommonTools.Components.Logging.LogManager.LogException(System.Int32,System.Enum,CommonTools.Components.Logging.ExceptionHandlingStatus,System.Exception,System.String)">
            <summary>
            Logs an exception.
            </summary>
            <param name="applicationId">The application id.</param>
            <param name="appLocation">The Application location. This parameter should represent where in your application the event occurred, e.g. MyEnum.BusinessLayer or MyEnum.UserCreation</param>
            <param name="handlindStatus">The handling status of this exception.</param>
            <param name="e">The exception to log.</param>
            <param name="authenticatedUserId">The authenticated user id.</param>
        </member>
        <member name="M:CommonTools.Components.Logging.LogManager.LogException(System.Int32,System.Int32,CommonTools.Components.Logging.ExceptionHandlingStatus,System.Exception)">
            <summary>
            Logs an exception.
            </summary>
            <param name="applicationId">The application id.</param>
            <param name="appLocation">The Application location. This parameter should represent where in your application the event occurred, e.g. MyEnum.BusinessLayer or MyEnum.UserCreation</param>
            <param name="handlindStatus">The handling status of this exception.</param>
            <param name="e">The exception to log.</param>
        </member>
        <member name="M:CommonTools.Components.Logging.LogManager.LogException(System.Int32,System.Int32,CommonTools.Components.Logging.ExceptionHandlingStatus,System.Exception,System.String)">
            <summary>
            Logs an exception.
            </summary>
            <param name="applicationId">The application id.</param>
            <param name="appLocation">The Application location. This parameter should represent where in your application the event occurred, e.g. MyEnum.BusinessLayer or MyEnum.UserCreation</param>
            <param name="handlindStatus">The handling status of this exception.</param>
            <param name="e">The exception to log.</param>
            <param name="authenticatedUserId">The authenticated user id.</param>
        </member>
        <member name="M:CommonTools.Components.Logging.LogManager.DeleteException(System.Int64)">
            <summary>
            Deletes an exception.
            </summary>
            <param name="exceptionId">The ExceptionId of the exception record to delete</param>
        </member>
        <member name="M:CommonTools.Components.Logging.LogManager.DeleteExceptionByDate(System.Int32,System.Int32)">
            <summary>
            Deletes exception records older than a specific amount of days.
            </summary>
            <param name="applicationId">The application id.</param>
            <param name="olderThanInDays">The amount of days.</param>
        </member>
        <member name="M:CommonTools.Components.Logging.LogManager.DeleteExceptionByDate(System.Int32)">
            <summary>
            Deletes the exception by date.
            </summary>
            <param name="olderThanInDays">The older than in days.</param>
        </member>
        <member name="M:CommonTools.Components.Logging.LogManager.DeleteEvent(System.Int64)">
            <summary>
            Deletes an event record.
            </summary>
            <param name="eventId">The EventId of the record to delete.</param>
        </member>
        <member name="M:CommonTools.Components.Logging.LogManager.DeleteEventByDate(System.Int32,System.Int32)">
            <summary>
            Deletes event records older than a specific amount of days.
            </summary>
            <param name="applicationId">The application id.</param>
            <param name="olderThanInDays">The amount of days.</param>
        </member>
        <member name="M:CommonTools.Components.Logging.LogManager.DeleteEventByDate(System.Int32)">
            <summary>
            Deletes event records older than a specific amount of days.
            </summary>
            <param name="olderThanInDays">The amount of days.</param>
        </member>
        <member name="M:CommonTools.Components.Logging.LogManager.GetEventPage(System.Int32,System.Int32,System.Nullable{System.Int32}@)">
            <summary>
            Gets a record page of all events.
            </summary>
            <param name="pageSize">The amount of record rows to retrieve.</param>
            <param name="pageIndex">The index of the page to retrieve.</param>
            <param name="rowCount">The total amount of rows of the event table.</param>
            <returns></returns>
        </member>
        <member name="M:CommonTools.Components.Logging.LogManager.GetEventPage(System.Int32,System.Int32,System.Nullable{System.Int32}@,System.Enum,System.Enum)">
            <summary>
            Gets a record page of all events.
            </summary>
            <param name="pageSize">The amount of record rows to retrieve.</param>
            <param name="pageIndex">The index of the page to retrieve.</param>
            <param name="rowCount">The total amount of rows of the event table.</param>
            <param name="appLocationFilter">The ApplicationLocation to filter. Set this value to -1 if you don't want to filter by application locations.</param>
            <param name="eventTypeFilter">The EventType to filter. Set this value to -1 if you don't want to filter by event types.</param>
            <returns></returns>
        </member>
        <member name="M:CommonTools.Components.Logging.LogManager.GetEventPage(System.Int32,System.Int32,System.Nullable{System.Int32}@,System.Int32,System.Int32)">
            <summary>
            Gets the event page.
            </summary>
            <param name="pageSize">Size of the page.</param>
            <param name="pageIndex">Index of the page.</param>
            <param name="rowCount">The row count.</param>
            <param name="appLocationFilter">The app location filter.</param>
            <param name="eventTypeFilter">The event type filter.</param>
            <returns></returns>
        </member>
        <member name="M:CommonTools.Components.Logging.LogManager.GetEventPage(System.Int32,System.Int32,System.Int32,System.Nullable{System.Int32}@)">
            <summary>
            Gets a record page of all events.
            </summary>
            <param name="applicationId">The application id.</param>
            <param name="pageSize">The amount of record rows to retrieve.</param>
            <param name="pageIndex">The index of the page to retrieve.</param>
            <param name="rowCount">The total amount of rows of the event table.</param>
            <returns></returns>
        </member>
        <member name="M:CommonTools.Components.Logging.LogManager.GetEventPage(System.Int32,System.Int32,System.Int32,System.Nullable{System.Int32}@,System.Enum,System.Enum)">
            <summary>
            Gets a record page of all events.
            </summary>
            <param name="applicationId">The application id.</param>
            <param name="pageSize">The amount of record rows to retrieve.</param>
            <param name="pageIndex">The index of the page to retrieve.</param>
            <param name="rowCount">The total amount of rows of the event table.</param>
            <param name="appLocationFilter">The ApplicationLocation to filter. Set this value to -1 if you don't want to filter by application locations.</param>
            <param name="eventTypeFilter">The EventType to filter. Set this value to -1 if you don't want to filter by event types.</param>
            <returns></returns>
        </member>
        <member name="M:CommonTools.Components.Logging.LogManager.GetEventPage(System.Int32,System.Int32,System.Int32,System.Nullable{System.Int32}@,System.Int32,System.Int32)">
            <summary>
            Gets a record page of all events.
            </summary>
            <param name="applicationId">The application id.</param>
            <param name="pageSize">The amount of record rows to retrieve.</param>
            <param name="pageIndex">The index of the page to retrieve.</param>
            <param name="rowCount">The total amount of rows of the event table.</param>
            <param name="appLocationFilter">The ApplicationLocation to filter. Set this value to -1 if you don't want to filter by application locations.</param>
            <param name="eventTypeFilter">The EventType to filter. Set this value to -1 if you don't want to filter by event types.</param>
            <returns></returns>
        </member>
        <member name="M:CommonTools.Components.Logging.LogManager.GetEventPage(System.Int32,System.Int32,System.Int32,System.Nullable{System.Int32}@,System.Int32,System.Int32,System.Int32,System.DateTime,System.DateTime)">
            <summary>
            Gets the event page.
            </summary>
            <param name="applicationId">The application id.</param>
            <param name="pageSize">Size of the page.</param>
            <param name="pageIndex">Index of the page.</param>
            <param name="rowCount">The row count.</param>
            <param name="appLocationFilter">The app location filter.</param>
            <param name="eventTypeFilter">The event type filter.</param>
            <param name="userId">The user id.</param>
            <param name="startDate">The start date.</param>
            <param name="endDate">The end date.</param>
            <returns></returns>
        </member>
        <member name="M:CommonTools.Components.Logging.LogManager.GetExceptionPage(System.Int32,System.Int32,System.Nullable{System.Int32}@)">
            <summary>
            Gets the exception page.
            </summary>
            <param name="pageSize">The amount of record rows to retrieve.</param>
            <param name="pageIndex">The index of the page to retrieve.</param>
            <param name="rowCount">The total amount of rows of the exception table.</param>
            <returns></returns>
        </member>
        <member name="M:CommonTools.Components.Logging.LogManager.GetExceptionPage(System.Int32,System.Int32,System.Nullable{System.Int32}@,System.Enum)">
            <summary>
            Gets the exception page.
            </summary>
            <param name="pageSize">The amount of record rows to retrieve.</param>
            <param name="pageIndex">The index of the page to retrieve.</param>
            <param name="rowCount">The total amount of rows of the exception table.</param>
            <param name="appLocationFilter">The ApplicationLocation to filter. Set this value to -1 if you don't want to filter by application locations.</param>
            <returns></returns>
        </member>
        <member name="M:CommonTools.Components.Logging.LogManager.GetExceptionPage(System.Int32,System.Int32,System.Nullable{System.Int32}@,System.Enum,CommonTools.Components.Logging.ExceptionHandlingStatus)">
            <summary>
            Gets the exception page.
            </summary>
            <param name="pageSize">The amount of record rows to retrieve.</param>
            <param name="pageIndex">The index of the page to retrieve.</param>
            <param name="rowCount">The total amount of rows of the exception table.</param>
            <param name="appLocationFilter">The ApplicationLocation to filter. Set this value to -1 if you don't want to filter by application locations.</param>
            <param name="handlingStatus">The handling status of this exception</param>
            <returns></returns>
        </member>
        <member name="M:CommonTools.Components.Logging.LogManager.GetExceptionPage(System.Int32,System.Int32,System.Nullable{System.Int32}@,System.Int32,System.Int32,CommonTools.Components.Logging.LogManager.ExceptionsOrderBy)">
            <summary>
            Gets the exception page.
            </summary>
            <param name="pageSize">Size of the page.</param>
            <param name="pageIndex">Index of the page.</param>
            <param name="rowCount">The row count.</param>
            <param name="appLocationFilter">The app location filter.</param>
            <param name="handlingStatus">The handling status.</param>
            <param name="orderBy">The order by.</param>
            <returns></returns>
        </member>
        <member name="M:CommonTools.Components.Logging.LogManager.GetExceptionPage(System.Int32,System.Int32,System.Int32,System.Nullable{System.Int32}@)">
            <summary>
            Gets the exception page.
            </summary>
            <param name="applicationId">The application id.</param>
            <param name="pageSize">The amount of record rows to retrieve.</param>
            <param name="pageIndex">The index of the page to retrieve.</param>
            <param name="rowCount">The total amount of rows of the exception table.</param>
            <returns></returns>
        </member>
        <member name="M:CommonTools.Components.Logging.LogManager.GetExceptionPage(System.Int32,System.Int32,System.Int32,System.Nullable{System.Int32}@,System.Enum)">
            <summary>
            Gets the exception page.
            </summary>
            <param name="applicationId">The application id.</param>
            <param name="pageSize">The amount of record rows to retrieve.</param>
            <param name="pageIndex">The index of the page to retrieve.</param>
            <param name="rowCount">The total amount of rows of the exception table.</param>
            <param name="appLocationFilter">The ApplicationLocation to filter. Set this value to -1 if you don't want to filter by application locations.</param>
            <returns></returns>
        </member>
        <member name="M:CommonTools.Components.Logging.LogManager.GetExceptionPage(System.Int32,System.Int32,System.Int32,System.Nullable{System.Int32}@,System.Enum,CommonTools.Components.Logging.ExceptionHandlingStatus)">
            <summary>
            Gets the exception page.
            </summary>
            <param name="applicationId">The application id.</param>
            <param name="pageSize">The amount of record rows to retrieve.</param>
            <param name="pageIndex">The index of the page to retrieve.</param>
            <param name="rowCount">The total amount of rows of the exception table.</param>
            <param name="appLocationFilter">The ApplicationLocation to filter. Set this value to -1 if you don't want to filter by application locations.</param>
            <param name="handlingStatus">The handling status of this exception</param>
            <returns></returns>
        </member>
        <member name="M:CommonTools.Components.Logging.LogManager.GetExceptionPage(System.Int32,System.Int32,System.Int32,System.Nullable{System.Int32}@,System.Int32,System.Int32,CommonTools.Components.Logging.LogManager.ExceptionsOrderBy)">
            <summary>
            Gets the exception page.
            </summary>
            <param name="applicationId">The application id.</param>
            <param name="pageSize">The amount of record rows to retrieve.</param>
            <param name="pageIndex">The index of the page to retrieve.</param>
            <param name="rowCount">The total amount of rows of the exception table.</param>
            <param name="appLocationFilter">The ApplicationLocation to filter. Set this value to -1 if you don't want to filter by application locations.</param>
            <param name="handlingStatus">The handling status of this exception. Set this value to -1 if you don't want to filter by handling status.</param>
            <param name="orderBy">The order by.</param>
            <returns></returns>
        </member>
        <member name="M:CommonTools.Components.Logging.LogManager.UpdateExceptionHandlingStatus(System.Int64,CommonTools.Components.Logging.ExceptionHandlingStatus)">
            <summary>
            Updates the exception handling status.
            </summary>
            <param name="exceptionId">The id of the exception record to update</param>
            <param name="handlingStatus">The new handlig status</param>
        </member>
        <member name="T:CommonTools.Components.Logging.LogManager.ExceptionsOrderBy">
            <summary>
            
            </summary>
        </member>
        <member name="F:CommonTools.Components.Logging.LogManager.ExceptionsOrderBy.DateLastOccurredDesc">
            <summary>
            
            </summary>
        </member>
        <member name="F:CommonTools.Components.Logging.LogManager.ExceptionsOrderBy.DateCreatedDesc">
            <summary>
            
            </summary>
        </member>
        <member name="F:CommonTools.Components.Logging.LogManager.ExceptionsOrderBy.TotalOccurrencesDesc">
            <summary>
            
            </summary>
        </member>
        <member name="F:CommonTools.Components.Logging.LogManager.ExceptionsOrderBy.DateLastOccurredAsc">
            <summary>
            
            </summary>
        </member>
        <member name="F:CommonTools.Components.Logging.LogManager.ExceptionsOrderBy.DateCreatedAsc">
            <summary>
            
            </summary>
        </member>
        <member name="F:CommonTools.Components.Logging.LogManager.ExceptionsOrderBy.TotalOccurrencesAsc">
            <summary>
            
            </summary>
        </member>
        <member name="T:CommonTools.Web.UI.SiteMapLink">
            <summary>
            
            </summary>
        </member>
        <member name="M:CommonTools.Web.UI.SiteMapLink.Render(System.Web.UI.HtmlTextWriter)">
            <summary>
            Renders the control to the specified HTML writer.
            </summary>
            <param name="writer">The <see cref="T:System.Web.UI.HtmlTextWriter"/> object that receives the control content.</param>
        </member>
        <member name="P:CommonTools.Web.UI.SiteMapLink.Host">
            <summary>
            Gets or sets the host.
            </summary>
            <value>The host.</value>
        </member>
        <member name="P:CommonTools.Web.UI.SiteMapLink.Item">
            <summary>
            Gets or sets the item.
            </summary>
            <value>The item.</value>
        </member>
        <member name="P:CommonTools.Web.UI.SiteMapLink.CurrentContext">
            <summary>
            Gets or sets the current context.
            </summary>
            <value>The current context.</value>
        </member>
        <member name="P:CommonTools.Web.UI.SiteMapLink.PlaceholderValues">
            <summary>
            Gets or sets the placeholder values.
            </summary>
            <value>The placeholder values.</value>
        </member>
        <member name="P:CommonTools.Web.UI.SiteMapLink.Text">
            <summary>
            Gets or sets the text content of a control.
            </summary>
            <value></value>
            <returns>The text content of a control.</returns>
        </member>
        <member name="T:CommonTools.Web.Navigation.CachedSiteMapUrls">
            <summary>
            This class handles sitemap nodes.
            </summary>
        </member>
        <member name="M:CommonTools.Web.Navigation.CachedSiteMapUrls.FindNodeByResourceKey(System.String)">
            <summary>
            Finds the node by resource key.
            </summary>
            <param name="name">The name.</param>
            <returns></returns>
        </member>
        <member name="M:CommonTools.Web.Navigation.CachedSiteMapUrls.GetPath(System.String)">
            <summary>
            Gets the path.
            </summary>
            <param name="key">The resourceKey of the sitemapnode</param>
            <returns></returns>
        </member>
        <member name="M:CommonTools.Web.Navigation.CachedSiteMapUrls.GetPath(System.String,System.String[])">
            <summary>
            Gets the path.
            </summary>
            <param name="key">The resourceKey of the sitemapnode</param>
            <param name="args">The arguments to replace the path of the SitemapNode with.</param>
            <returns></returns>
        </member>
        <member name="M:CommonTools.Web.Navigation.CachedSiteMapUrls.GetMatchingRewrite(System.String)">
            <summary>
            Gets the matching rewrite.
            </summary>
            <param name="pattern">The pattern to match</param>
            <returns></returns>
        </member>
        <member name="M:CommonTools.Web.Navigation.CachedSiteMapUrls.GetMatchingRewriteItem(System.String)">
            <summary>
            Gets the matching rewrite item. This method is intended for testing, don't use it in production because it is
            inefficient.
            </summary>
            <param name="pathAndQuery">The path and query url.</param>
            <returns></returns>
        </member>
        <member name="M:CommonTools.Web.Navigation.CachedSiteMapUrls.Reload">
            <summary>
            Reloads the site map.
            </summary>
        </member>
        <member name="M:CommonTools.Web.Navigation.CachedSiteMapUrls.Instance">
            <summary>
            Instances this instance.
            </summary>
            <returns></returns>
        </member>
        <member name="M:CommonTools.Web.Navigation.CachedSiteMapUrls.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:CommonTools.Web.Navigation.SiteMapUrls"/> class.
            </summary>
        </member>
        <member name="P:CommonTools.Web.Navigation.CachedSiteMapUrls.Controller">
            <summary>
            Gets the controller.
            </summary>
            <value>The controller.</value>
        </member>
        <member name="P:CommonTools.Web.Navigation.CachedSiteMapUrls.Item(System.String)">
            <summary>
            Gets the <see cref="T:CommonTools.Web.Navigation.IUrlRewriteItem"/> with the specified resource key.
            </summary>
            <value></value>
        </member>
        <member name="T:CommonTools.IO.Csv.ParseErrorAction">
            <summary>
            Specifies the action to take when a parsing error has occured.
            </summary>
        </member>
        <member name="F:CommonTools.IO.Csv.ParseErrorAction.RaiseEvent">
            <summary>
            Raises the <see cref="M:CsvReader.ParseError"/> event.
            </summary>
        </member>
        <member name="F:CommonTools.IO.Csv.ParseErrorAction.AdvanceToNextLine">
            <summary>
            Tries to advance to next line.
            </summary>
        </member>
        <member name="F:CommonTools.IO.Csv.ParseErrorAction.ThrowException">
            <summary>
            Throws an exception.
            </summary>
        </member>
        <member name="T:CommonTools.IO.Csv.MissingFieldCsvException">
            <summary>
            Represents the exception that is thrown when a there is a missing field in a record of the CSV file.
            </summary>
            <remarks>
            MissingFieldException would have been a better name, but there is already a <see cref="T:System.MissingFieldException"/>.
            </remarks>
        </member>
        <member name="M:CommonTools.IO.Csv.MissingFieldCsvException.#ctor">
            <summary>
            Initializes a new instance of the MissingFieldCsvException class.
            </summary>
        </member>
        <member name="M:CommonTools.IO.Csv.MissingFieldCsvException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the MissingFieldCsvException class.
            </summary>
            <param name="message">The message that describes the error.</param>
        </member>
        <member name="M:CommonTools.IO.Csv.MissingFieldCsvException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the MissingFieldCsvException class.
            </summary>
            <param name="message">The message that describes the error.</param>
            <param name="innerException">The exception that is the cause of the current exception.</param>
        </member>
        <member name="M:CommonTools.IO.Csv.MissingFieldCsvException.#ctor(System.String,System.Int32,System.Int64,System.Int32)">
            <summary>
            Initializes a new instance of the MissingFieldCsvException class.
            </summary>
            <param name="rawData">The raw data when the error occured.</param>
            <param name="currentPosition">The current position in the raw data.</param>
            <param name="currentRecordIndex">The current record index.</param>
            <param name="currentFieldIndex">The current field index.</param>
        </member>
        <member name="M:CommonTools.IO.Csv.MissingFieldCsvException.#ctor(System.String,System.Int32,System.Int64,System.Int32,System.Exception)">
            <summary>
            Initializes a new instance of the MissingFieldCsvException class.
            </summary>
            <param name="rawData">The raw data when the error occured.</param>
            <param name="currentPosition">The current position in the raw data.</param>
            <param name="currentRecordIndex">The current record index.</param>
            <param name="currentFieldIndex">The current field index.</param>
            <param name="innerException">The exception that is the cause of the current exception.</param>
        </member>
        <member name="M:CommonTools.IO.Csv.MissingFieldCsvException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the MissingFieldCsvException class with serialized data.
            </summary>
            <param name="info">The <see cref="T:SerializationInfo"/> that holds the serialized object data about the exception being thrown.</param>
            <param name="context">The <see cref="T:StreamingContext"/> that contains contextual information about the source or destination.</param>
        </member>
        <member name="T:CommonTools.Components.Graphics.WarpStrength">
            <summary>
            Identifies the strength of the Catcha image.
            </summary>
        </member>
        <member name="F:CommonTools.Components.Graphics.WarpStrength.Light">
            <summary>
            Light noise. Recommended for low and medium traffic sites.
            </summary>
        </member>
        <member name="F:CommonTools.Components.Graphics.WarpStrength.Normal">
            <summary>
            Medium noise.
            </summary>
        </member>
        <member name="F:CommonTools.Components.Graphics.WarpStrength.Strong">
            <summary>
            High noise.
            </summary>
        </member>
        <member name="T:CommonTools.Core.Collections.Generic.LimitedQueue`1">
            <summary>
            This class contains all limited queue related data
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:CommonTools.Core.Collections.Generic.LimitedQueue`1.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:CommonTools.Core.Collections.Generic.LimitedQueue`1"/> class.
            </summary>
            <param name="limit">The limit.</param>
        </member>
        <member name="M:CommonTools.Core.Collections.Generic.LimitedQueue`1.Enqueue(`0)">
            <summary>
            Adds an object to the end of the <see cref="T:System.Collections.Generic.Queue`1"/>.
            </summary>
            <param name="item">The object to add to the <see cref="T:System.Collections.Generic.Queue`1"/>. The value can be null for reference types.</param>
        </member>
        <member name="P:CommonTools.Core.Collections.Generic.LimitedQueue`1.Limit">
            <summary>
            Gets or sets the limit.
            </summary>
            <value>The limit.</value>
        </member>
        <member name="T:CommonTools.Components.Threading.JobSectionManager">
            <summary>
            
            </summary>
        </member>
        <member name="P:CommonTools.Components.Threading.JobSectionManager.JobSection">
            <summary>
            Gets the job section.
            </summary>
            <value>The job section.</value>
        </member>
        <member name="T:CommonTools.Components.Flash.OpenFlashChart.ChartTextElement">
            <summary>
            
            </summary>
        </member>
        <member name="M:CommonTools.Components.Flash.OpenFlashChart.ChartTextElement.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:CommonTools.Components.Flash.OpenFlashChart.ChartTextElement"/> class.
            </summary>
            <param name="text">The text.</param>
        </member>
        <member name="P:CommonTools.Components.Flash.OpenFlashChart.ChartTextElement.Text">
            <summary>
            Gets or sets the text.
            </summary>
            <value>The text.</value>
        </member>
        <member name="T:CommonTools.Components.Caching.CheckAtRequestInfo">
            <summary>
            
            </summary>
        </member>
        <member name="T:CommonTools.Components.BusinessTier.ObjectPropertyInfoContainer">
            <summary>
            This class contains all object property info container related data
            </summary>
        </member>
        <member name="M:CommonTools.Components.BusinessTier.ObjectPropertyInfoContainer.#ctor(System.Type)">
            <summary>
            Initializes a new instance of the <see cref="T:CommonTools.Components.BusinessTier.ObjectPropertyInfoContainer"/> class.
            </summary>
            <param name="type">The type.</param>
        </member>
        <member name="P:CommonTools.Components.BusinessTier.ObjectPropertyInfoContainer.ObjectPropertyInfos">
            <summary>
            Gets or sets the object property infos.
            </summary>
            <value>The object property infos.</value>
        </member>
        <member name="P:CommonTools.Components.BusinessTier.ObjectPropertyInfoContainer.Length">
            <summary>
            Gets or sets the length.
            </summary>
            <value>The length.</value>
        </member>
        <member name="T:CommonTools.Xml.XmlSettingsManager`1">
            <summary>
            This class handles the serialization/deserialization and caching of common settings classes that are [Serializable]. The object has to 
            be serializable, optionally you can use the IXmlSerializable interface on your object to take full control of the final xml representation.
            </summary>
            <typeparam name="T">The type of the object to serialize.</typeparam>
        </member>
        <member name="M:CommonTools.Xml.XmlSettingsManager`1.RefreshCache">
            <summary>
            This method removes the currently cashed object (if still present) from cache and assignes the current T Settings to the
            HttpRuntime.Cache.
            </summary>
        </member>
        <member name="M:CommonTools.Xml.XmlSettingsManager`1.LoadFromFile(System.String)">
            <summary>
            Loads the current Settings property from a specified xml file. The xml file must be a serialized version of the defined T object.
            </summary>
            <param name="filename">The filename (including the absolute path: C:\my\directory\filename.xml)</param>
        </member>
        <member name="M:CommonTools.Xml.XmlSettingsManager`1.LoadFromXml(System.String)">
            <summary>
            Loads the current Settings property from a specified xml string. The xml be a serialized version of the defined T object.
            </summary>
            <param name="xml">The serialized xml version of the T object to load</param>
        </member>
        <member name="M:CommonTools.Xml.XmlSettingsManager`1.LoadFromObject(`0)">
            <summary>
            Loads this instance's T settings object from a given object.
            </summary>
            <param name="settings">The T settings object to load.</param>
        </member>
        <member name="M:CommonTools.Xml.XmlSettingsManager`1.SaveAsXmlFile(System.String,System.String@)">
            <summary>
            Saves the currently loaded T Settings object as a serialized XML file.
            </summary>
            <param name="filename">The filename to save the serialized representation to (including the absolute path: C:\my\directory\filename.xml)</param>
            <param name="errorMessage">The errormessage if not successfull.</param>
            <returns>True if successfull, otherwise false.</returns>
        </member>
        <member name="M:CommonTools.Xml.XmlSettingsManager`1.PurgeItemFromCache">
            <summary>
            Removes the T object from cache. If caching is enabled, the next T Settings property get call will load the object from the specified source.
            </summary>
        </member>
        <member name="M:CommonTools.Xml.XmlSettingsManager`1.#ctor(System.String,System.TimeSpan,System.Web.Caching.CacheItemPriority,CommonTools.Xml.XmlSettingsManager{`0}.GetSettingsObjectDelegate)">
            <summary>
            Initializes a new instance of the <see cref="T:CommonTools.Xml.XmlSettingsManager`1"/> class. If this constructor is called, caching
            is enabled.
            </summary>
            <param name="cacheKey">The cache key to identify the object at the HttpRuntime.Cache</param>
            <param name="cacheDuration">The cache duration</param>
            <param name="cacheItemPriority">The cache item priority</param>
            <param name="settingsObject">The delegate to call when the object can't be found at HttpRuntime.Cache and therefor needs to be inserted again.</param>
        </member>
        <member name="M:CommonTools.Xml.XmlSettingsManager`1.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:CommonTools.Xml.XmlSettingsManager`1"/> class. If this constructor is called, a cache dependency is set
            to the specified file holding an xml serialized version of the T Settings object.
            </summary>
            <param name="cacheKey">The cache key to identify the object at the HttpRuntime.Cache</param>
            <param name="filename">The filename to load the object from and set a cache dependency on. Be aware that the System.Web.Caching.CacheDependency()
            class won't work when your local XmlSettingsManager&lt;T&gt; object instance is static (Don't know why, caching works fine, it's just the
            cachedependency that doesn't work...).</param>
        </member>
        <member name="P:CommonTools.Xml.XmlSettingsManager`1.Settings">
            <summary>
            Gets the currently loaded object of this XmlSettingsManager instance. This value is updated when calling one of the following methods:
                LoadFromFile(string, bool);
                LoadFromXml(string, bool);
                RegisterItemAtCache(T);
            </summary>
            <value>The T Settings if already loaded, otherwise null.</value>
        </member>
        <member name="T:CommonTools.Xml.XmlSettingsManager`1.GetSettingsObjectDelegate">
            <summary>
            This delegate gets called when caching is enabled and the cached object can't be retrieved from cache.  
            </summary>
            <returns>The T object.</returns>
        </member>
        <member name="T:CommonTools.Xml.CascadableAttribute">
            <summary>
            This class contains all XML extra info attribute related data
            </summary>
        </member>
        <member name="M:CommonTools.Xml.CascadableAttribute.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:CommonTools.Xml.CascadableAttribute"/> class.
            </summary>
        </member>
        <member name="P:CommonTools.Xml.CascadableAttribute.ValidatorInstance">
            <summary>
            Gets the validator attribute instance.
            </summary>
            <value></value>
            <returns>
            The current <see cref="T:System.Configuration.ConfigurationValidatorBase"/>.
            </returns>
        </member>
        <member name="T:CommonTools.Components.Caching.CachingException">
            <summary>
            Exception that gets thrown by the CommonTools.Components.Caching namespace
            </summary>
        </member>
        <member name="M:CommonTools.Components.Caching.CachingException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:CommonTools.Components.Caching.CachingException"/> class.
            </summary>
            <param name="message">The message</param>
        </member>
        <member name="M:CommonTools.Components.Caching.CachingException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:CommonTools.Components.Caching.CachingException"/> class.
            </summary>
            <param name="message">The message</param>
            <param name="inner">The inner exception</param>
        </member>
        <member name="T:CommonTools.Components.Security.RijndaelEnhanced">
            <summary>
            This class uses a symmetric key algorithm (Rijndael/AES) to encrypt and
            decrypt data. As long as it is initialized with the same constructor
            parameters, the class will use the same key. Before performing encryption,
            the class can prepend random bytes to plain text and generate different
            encrypted values from the same plain text, encryption key, initialization
            vector, and other parameters. This class is thread-safe.
            </summary>
            <remarks>
            Be careful when performing encryption and decryption. There is a bug
            ("feature"?) in .NET Framework, which causes corruption of encryptor/
            decryptor if a cryptographic exception occurs during encryption/
            decryption operation. To correct the problem, re-initialize the class
            instance when a cryptographic exception occurs.
            </remarks>
        </member>
        <member name="M:CommonTools.Components.Security.RijndaelEnhanced.#ctor(System.String)">
            <summary>
            Use this constructor if you are planning to perform encryption/
            decryption with 256-bit key, derived using 1 password iteration,
            hashing without salt, no initialization vector, electronic codebook
            (ECB) mode, SHA-1 hashing algorithm, and 4-to-8 byte long salt.
            </summary>
            <param name="passPhrase">
            Passphrase from which a pseudo-random password will be derived.
            The derived password will be used to generate the encryption key.
            Passphrase can be any string. In this example we assume that the
            passphrase is an ASCII string. Passphrase value must be kept in
            secret.
            </param>
            <remarks>
            This constructor is not recommended because it does not use
            initialization vector and uses the ECB cipher mode, which is less
            secure than the CBC mode.
            </remarks>
        </member>
        <member name="M:CommonTools.Components.Security.RijndaelEnhanced.#ctor(System.String,System.String)">
            <summary>
            Use this constructor if you are planning to perform encryption/
            decryption with 256-bit key, derived using 1 password iteration,
            hashing without salt, cipher block chaining (CBC) mode, SHA-1
            hashing algorithm, and 4-to-8 byte long salt.
            </summary>
            <param name="passPhrase">
            Passphrase from which a pseudo-random password will be derived.
            The derived password will be used to generate the encryption key.
            Passphrase can be any string. In this example we assume that the
            passphrase is an ASCII string. Passphrase value must be kept in
            secret.
            </param>
            <param name="initVector">
            Initialization vector (IV). This value is required to encrypt the
            first block of plaintext data. For RijndaelManaged class IV must be
            exactly 16 ASCII characters long. IV value does not have to be kept
            in secret.
            </param>
        </member>
        <member name="M:CommonTools.Components.Security.RijndaelEnhanced.#ctor(System.String,System.String,System.Int32)">
            <summary>
            Use this constructor if you are planning to perform encryption/
            decryption with 256-bit key, derived using 1 password iteration,
            hashing without salt, cipher block chaining (CBC) mode, SHA-1 
            hashing algorithm, and 0-to-8 byte long salt.
            </summary>
            <param name="passPhrase">
            Passphrase from which a pseudo-random password will be derived.
            The derived password will be used to generate the encryption key
            Passphrase can be any string. In this example we assume that the
            passphrase is an ASCII string. Passphrase value must be kept in
            secret.
            </param>
            <param name="initVector">
            Initialization vector (IV). This value is required to encrypt the
            first block of plaintext data. For RijndaelManaged class IV must be
            exactly 16 ASCII characters long. IV value does not have to be kept
            in secret.
            </param>
            <param name="minSaltLen">
            Min size (in bytes) of randomly generated salt which will be added at
            the beginning of plain text before encryption is performed. When this
            value is less than 4, the default min value will be used (currently 4
            bytes).
            </param>
        </member>
        <member name="M:CommonTools.Components.Security.RijndaelEnhanced.#ctor(System.String,System.String,System.Int32,System.Int32)">
            <summary>
            Use this constructor if you are planning to perform encryption/
            decryption with 256-bit key, derived using 1 password iteration,
            hashing without salt, cipher block chaining (CBC) mode, SHA-1
            hashing algorithm. Use the minSaltLen and maxSaltLen parameters to
            specify the size of randomly generated salt.
            </summary>
            <param name="passPhrase">
            Passphrase from which a pseudo-random password will be derived.
            The derived password will be used to generate the encryption key.
            Passphrase can be any string. In this example we assume that the
            passphrase is an ASCII string. Passphrase value must be kept in
            secret.
            </param>
            <param name="initVector">
            Initialization vector (IV). This value is required to encrypt the
            first block of plaintext data. For RijndaelManaged class IV must be
            exactly 16 ASCII characters long. IV value does not have to be kept
            in secret.
            </param>
            <param name="minSaltLen">
            Min size (in bytes) of randomly generated salt which will be added at
            the beginning of plain text before encryption is performed. When this
            value is less than 4, the default min value will be used (currently 4
            bytes).
            </param>
            <param name="maxSaltLen">
            Max size (in bytes) of randomly generated salt which will be added at
            the beginning of plain text before encryption is performed. When this
            value is negative or greater than 255, the default max value will be
            used (currently 8 bytes). If max value is 0 (zero) or if it is smaller
            than the specified min value (which can be adjusted to default value),
            salt will not be used and plain text value will be encrypted as is.
            In this case, salt will not be processed during decryption either.
            </param>
        </member>
        <member name="M:CommonTools.Components.Security.RijndaelEnhanced.#ctor(System.String,System.String,System.Int32,System.Int32,System.Int32)">
            <summary>
            Use this constructor if you are planning to perform encryption/
            decryption using the key derived from 1 password iteration,
            hashing without salt, cipher block chaining (CBC) mode, and
            SHA-1 hashing algorithm.
            </summary>
            <param name="passPhrase">
            Passphrase from which a pseudo-random password will be derived.
            The derived password will be used to generate the encryption key.
            Passphrase can be any string. In this example we assume that the
            passphrase is an ASCII string. Passphrase value must be kept in
            secret.
            </param>
            <param name="initVector">
            Initialization vector (IV). This value is required to encrypt the
            first block of plaintext data. For RijndaelManaged class IV must be
            exactly 16 ASCII characters long. IV value does not have to be kept
            in secret.
            </param>
            <param name="minSaltLen">
            Min size (in bytes) of randomly generated salt which will be added at
            the beginning of plain text before encryption is performed. When this
            value is less than 4, the default min value will be used (currently 4
            bytes).
            </param>
            <param name="maxSaltLen">
            Max size (in bytes) of randomly generated salt which will be added at
            the beginning of plain text before encryption is performed. When this
            value is negative or greater than 255, the default max value will be 
            used (currently 8 bytes). If max value is 0 (zero) or if it is smaller
            than the specified min value (which can be adjusted to default value),
            salt will not be used and plain text value will be encrypted as is.
            In this case, salt will not be processed during decryption either.
            </param>
            <param name="keySize">
            Size of symmetric key (in bits): 128, 192, or 256.
            </param>
        </member>
        <member name="M:CommonTools.Components.Security.RijndaelEnhanced.#ctor(System.String,System.String,System.Int32,System.Int32,System.Int32,System.String)">
            <summary>
            Use this constructor if you are planning to perform encryption/
            decryption using the key derived from 1 password iteration, hashing 
            without salt, and cipher block chaining (CBC) mode.
            </summary>
            <param name="passPhrase">
            Passphrase from which a pseudo-random password will be derived.
            The derived password will be used to generate the encryption key.
            Passphrase can be any string. In this example we assume that the
            passphrase is an ASCII string. Passphrase value must be kept in
            secret.
            </param>
            <param name="initVector">
            Initialization vector (IV). This value is required to encrypt the
            first block of plaintext data. For RijndaelManaged class IV must be
            exactly 16 ASCII characters long. IV value does not have to be kept
            in secret.
            </param>
            <param name="minSaltLen">
            Min size (in bytes) of randomly generated salt which will be added at
            the beginning of plain text before encryption is performed. When this
            value is less than 4, the default min value will be used (currently 4
            bytes).
            </param>
            <param name="maxSaltLen">
            Max size (in bytes) of randomly generated salt which will be added at
            the beginning of plain text before encryption is performed. When this
            value is negative or greater than 255, the default max value will be
            used (currently 8 bytes). If max value is 0 (zero) or if it is smaller
            than the specified min value (which can be adjusted to default value),
            salt will not be used and plain text value will be encrypted as is.
            In this case, salt will not be processed during decryption either.
            </param>
            <param name="keySize">
            Size of symmetric key (in bits): 128, 192, or 256.
            </param>
            <param name="hashAlgorithm">
            Hashing algorithm: "MD5" or "SHA1". SHA1 is recommended.
            </param>
        </member>
        <member name="M:CommonTools.Components.Security.RijndaelEnhanced.#ctor(System.String,System.String,System.Int32,System.Int32,System.Int32,System.String,System.String)">
            <summary>
            Use this constructor if you are planning to perform encryption/
            decryption using the key derived from 1 password iteration, and
            cipher block chaining (CBC) mode.
            </summary>
            <param name="passPhrase">
            Passphrase from which a pseudo-random password will be derived.
            The derived password will be used to generate the encryption key.
            Passphrase can be any string. In this example we assume that the
            passphrase is an ASCII string. Passphrase value must be kept in
            secret.
            </param>
            <param name="initVector">
            Initialization vector (IV). This value is required to encrypt the
            first block of plaintext data. For RijndaelManaged class IV must be
            exactly 16 ASCII characters long. IV value does not have to be kept
            in secret.
            </param>
            <param name="minSaltLen">
            Min size (in bytes) of randomly generated salt which will be added at
            the beginning of plain text before encryption is performed. When this
            value is less than 4, the default min value will be used (currently 4
            bytes).
            </param>
            <param name="maxSaltLen">
            Max size (in bytes) of randomly generated salt which will be added at
            the beginning of plain text before encryption is performed. When this
            value is negative or greater than 255, the default max value will be
            used (currently 8 bytes). If max value is 0 (zero) or if it is smaller
            than the specified min value (which can be adjusted to default value),
            salt will not be used and plain text value will be encrypted as is.
            In this case, salt will not be processed during decryption either.
            </param>
            <param name="keySize">
            Size of symmetric key (in bits): 128, 192, or 256.
            </param>
            <param name="hashAlgorithm">
            Hashing algorithm: "MD5" or "SHA1". SHA1 is recommended.
            </param>
            <param name="saltValue">
            Salt value used for password hashing during key generation. This is
            not the same as the salt we will use during encryption. This parameter
            can be any string.
            </param>
        </member>
        <member name="M:CommonTools.Components.Security.RijndaelEnhanced.#ctor(System.String,System.String,System.Int32,System.Int32,System.Int32,System.String,System.String,System.Int32)">
            <summary>
            Use this constructor if you are planning to perform encryption/
            decryption with the key derived from the explicitly specified
            parameters.
            </summary>
            <param name="passPhrase">
            Passphrase from which a pseudo-random password will be derived.
            The derived password will be used to generate the encryption key
            Passphrase can be any string. In this example we assume that the
            passphrase is an ASCII string. Passphrase value must be kept in
            secret.
            </param>
            <param name="initVector">
            Initialization vector (IV). This value is required to encrypt the
            first block of plaintext data. For RijndaelManaged class IV must be
            exactly 16 ASCII characters long. IV value does not have to be kept
            in secret.
            </param>
            <param name="minSaltLen">
            Min size (in bytes) of randomly generated salt which will be added at
            the beginning of plain text before encryption is performed. When this
            value is less than 4, the default min value will be used (currently 4
            bytes).
            </param>
            <param name="maxSaltLen">
            Max size (in bytes) of randomly generated salt which will be added at
            the beginning of plain text before encryption is performed. When this
            value is negative or greater than 255, the default max value will be
            used (currently 8 bytes). If max value is 0 (zero) or if it is smaller
            than the specified min value (which can be adjusted to default value),
            salt will not be used and plain text value will be encrypted as is.
            In this case, salt will not be processed during decryption either.
            </param>
            <param name="keySize">
            Size of symmetric key (in bits): 128, 192, or 256.
            </param>
            <param name="hashAlgorithm">
            Hashing algorithm: "MD5" or "SHA1". SHA1 is recommended.
            </param>
            <param name="saltValue">
            Salt value used for password hashing during key generation. This is
            not the same as the salt we will use during encryption. This parameter
            can be any string.
            </param>
            <param name="passwordIterations">
            Number of iterations used to hash password. More iterations are
            considered more secure but may take longer.
            </param>
        </member>
        <member name="M:CommonTools.Components.Security.RijndaelEnhanced.Encrypt(System.String)">
            <summary>
            Encrypts a string value generating a base64-encoded string.
            </summary>
            <param name="plainText">
            Plain text string to be encrypted.
            </param>
            <returns>
            Cipher text formatted as a base64-encoded string.
            </returns>
        </member>
        <member name="M:CommonTools.Components.Security.RijndaelEnhanced.Encrypt(System.Byte[])">
            <summary>
            Encrypts a byte array generating a base64-encoded string.
            </summary>
            <param name="plainTextBytes">
            Plain text bytes to be encrypted.
            </param>
            <returns>
            Cipher text formatted as a base64-encoded string.
            </returns>
        </member>
        <member name="M:CommonTools.Components.Security.RijndaelEnhanced.EncryptToBytes(System.String)">
            <summary>
            Encrypts a string value generating a byte array of cipher text.
            </summary>
            <param name="plainText">
            Plain text string to be encrypted.
            </param>
            <returns>
            Cipher text formatted as a byte array.
            </returns>
        </member>
        <member name="M:CommonTools.Components.Security.RijndaelEnhanced.EncryptToBytes(System.Byte[])">
            <summary>
            Encrypts a byte array generating a byte array of cipher text.
            </summary>
            <param name="plainTextBytes">
            Plain text bytes to be encrypted.
            </param>
            <returns>
            Cipher text formatted as a byte array.
            </returns>
        </member>
        <member name="M:CommonTools.Components.Security.RijndaelEnhanced.Decrypt(System.String)">
            <summary>
            Decrypts a base64-encoded cipher text value generating a string result.
            </summary>
            <param name="cipherText">
            Base64-encoded cipher text string to be decrypted.
            </param>
            <returns>
            Decrypted string value.
            </returns>
        </member>
        <member name="M:CommonTools.Components.Security.RijndaelEnhanced.Decrypt(System.Byte[])">
            <summary>
            Decrypts a byte array containing cipher text value and generates a
            string result.
            </summary>
            <param name="cipherTextBytes">
            Byte array containing encrypted data.
            </param>
            <returns>
            Decrypted string value.
            </returns>
        </member>
        <member name="M:CommonTools.Components.Security.RijndaelEnhanced.DecryptToBytes(System.String)">
            <summary>
            Decrypts a base64-encoded cipher text value and generates a byte array
            of plain text data.
            </summary>
            <param name="cipherText">
            Base64-encoded cipher text string to be decrypted.
            </param>
            <returns>
            Byte array containing decrypted value.
            </returns>
        </member>
        <member name="M:CommonTools.Components.Security.RijndaelEnhanced.DecryptToBytes(System.Byte[])">
            <summary>
            Decrypts a base64-encoded cipher text value and generates a byte array
            of plain text data.
            </summary>
            <param name="cipherTextBytes">
            Byte array containing encrypted data.
            </param>
            <returns>
            Byte array containing decrypted value.
            </returns>
        </member>
        <member name="M:CommonTools.Components.Security.RijndaelEnhanced.AddSalt(System.Byte[])">
            <summary>
            Adds an array of randomly generated bytes at the beginning of the
            array holding original plain text value.
            </summary>
            <param name="plainTextBytes">
            Byte array containing original plain text value.
            </param>
            <returns>
            Either original array of plain text bytes (if salt is not used) or a
            modified array containing a randomly generated salt added at the 
            beginning of the plain text bytes. 
            </returns>
        </member>
        <member name="M:CommonTools.Components.Security.RijndaelEnhanced.GenerateSalt">
            <summary>
            Generates an array holding cryptographically strong bytes.
            </summary>
            <returns>
            Array of randomly generated bytes.
            </returns>
            <remarks>
            Salt size will be defined at random or exactly as specified by the
            minSlatLen and maxSaltLen parameters passed to the object constructor.
            The first four bytes of the salt array will contain the salt length
            split into four two-bit pieces.
            </remarks>
        </member>
        <member name="M:CommonTools.Components.Security.RijndaelEnhanced.GenerateRandomNumber(System.Int32,System.Int32)">
            <summary>
            Generates random integer.
            </summary>
            <param name="minValue">
            Min value (inclusive).
            </param>
            <param name="maxValue">
            Max value (inclusive).
            </param>
            <returns>
            Random integer value between the min and max values (inclusive).
            </returns>
            <remarks>
            This methods overcomes the limitations of .NET Framework's Random
            class, which - when initialized multiple times within a very short
            period of time - can generate the same "random" number.
            </remarks>
        </member>
        <member name="T:CommonTools.Components.Security.RandomPassword">
            <summary>
            This class can generate random passwords, which do not include ambiguous 
            characters, such as I, l, and 1. The generated password will be made of
            7-bit ASCII symbols. Every four characters will include one lower case
            character, one upper case character, one number, and one special symbol
            (such as '%') in a random order. The password will always start with an
            alpha-numeric character; it will not start with a special symbol (we do
            this because some back-end systems do not like certain special
            characters in the first position).
            </summary>
        </member>
        <member name="M:CommonTools.Components.Security.RandomPassword.Generate">
            <summary>
            Generates a random password.
            </summary>
            <returns>
            Randomly generated password.
            </returns>
            <remarks>
            The length of the generated password will be determined at
            random. It will be no shorter than the minimum default and
            no longer than maximum default.
            </remarks>
        </member>
        <member name="M:CommonTools.Components.Security.RandomPassword.Generate(System.Int32)">
            <summary>
            Generates a random password of the exact length.
            </summary>
            <param name="length">
            Exact password length.
            </param>
            <returns>
            Randomly generated password.
            </returns>
        </member>
        <member name="M:CommonTools.Components.Security.RandomPassword.Generate(System.Int32,System.Int32)">
            <summary>
            Generates a random password.
            </summary>
            <param name="minLength">
            Minimum password length.
            </param>
            <param name="maxLength">
            Maximum password length.
            </param>
            <returns>
            Randomly generated password.
            </returns>
            <remarks>
            The length of the generated password will be determined at
            random and it will fall with the range determined by the
            function parameters.
            </remarks>
        </member>
        <member name="T:CommonTools.Components.Logging.ExceptionHandlingStatus">
            <summary>
            ExceptionHandlingStatus
            </summary>
        </member>
        <member name="F:CommonTools.Components.Logging.ExceptionHandlingStatus.Expected">
            <summary>
            this exception might occure but is expected and handled
            </summary>
        </member>
        <member name="F:CommonTools.Components.Logging.ExceptionHandlingStatus.HandledInCode">
            <summary>
            this exception should not be thrown but is handled in code
            </summary>
        </member>
        <member name="F:CommonTools.Components.Logging.ExceptionHandlingStatus.Unhandled">
            <summary>
            this was an unhandled exception, further investigation is necessary
            </summary>
        </member>
        <member name="F:CommonTools.Components.Logging.ExceptionHandlingStatus.Resolved">
            <summary>
            the error that caused this execption was resolved and should not occure any more
            </summary>
        </member>
        <member name="T:CommonTools.Components.Testing.DisposableStopwatch">
            <summary>
            This class contains all disposable stopwatch related data
            </summary>
        </member>
        <member name="M:CommonTools.Components.Testing.DisposableStopwatch.ResetAndStart">
            <summary>
            Resets the and start.
            </summary>
        </member>
        <member name="M:CommonTools.Components.Testing.DisposableStopwatch.Start">
            <summary>
            Starts this instance.
            </summary>
        </member>
        <member name="M:CommonTools.Components.Testing.DisposableStopwatch.Stop">
            <summary>
            Stops this instance.
            </summary>
        </member>
        <member name="M:CommonTools.Components.Testing.DisposableStopwatch.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
        </member>
        <member name="M:CommonTools.Components.Testing.DisposableStopwatch.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:CommonTools.Components.Testing.DisposableStopwatch"/> class.
            </summary>
        </member>
        <member name="M:CommonTools.Components.Testing.DisposableStopwatch.#ctor(System.String,CommonTools.Components.Testing.DisposableStopwatch.TraceMode)">
            <summary>
            Initializes a new instance of the <see cref="T:CommonTools.Components.Testing.DisposableStopwatch"/> class.
            </summary>
            <param name="name">The name.</param>
            <param name="traceMode">The trace mode.</param>
        </member>
        <member name="M:CommonTools.Components.Testing.DisposableStopwatch.#ctor(System.Boolean,System.String,CommonTools.Components.Testing.DisposableStopwatch.TraceMode)">
            <summary>
            Initializes a new instance of the <see cref="T:CommonTools.Components.Testing.DisposableStopwatch"/> class.
            </summary>
            <param name="startImmediately">if set to <c>true</c> [start immediately].</param>
            <param name="name">The name.</param>
            <param name="traceMode">The trace mode.</param>
        </member>
        <member name="T:CommonTools.Components.Testing.DisposableStopwatch.TraceMode">
            <summary>
            
            </summary>
        </member>
        <member name="F:CommonTools.Components.Testing.DisposableStopwatch.TraceMode.Milliseconds">
            <summary>
            
            </summary>
        </member>
        <member name="F:CommonTools.Components.Testing.DisposableStopwatch.TraceMode.FullTime">
            <summary>
            
            </summary>
        </member>
        <member name="T:CommonTools.Components.Flash.OpenFlashChart.YAxis">
            <summary>
            
            </summary>
        </member>
        <member name="M:CommonTools.Components.Flash.OpenFlashChart.YAxis.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:CommonTools.Components.Flash.OpenFlashChart.YAxis"/> class.
            </summary>
        </member>
        <member name="P:CommonTools.Components.Flash.OpenFlashChart.YAxis.TickLength">
            <summary>
            Gets or sets the length of the tick.
            </summary>
            <value>The length of the tick.</value>
        </member>
        <member name="P:CommonTools.Components.Flash.OpenFlashChart.YAxis.Offset">
            <summary>
            Gets or sets the offset.
            </summary>
            <value>The offset.</value>
        </member>
        <member name="P:CommonTools.Components.Flash.OpenFlashChart.YAxis.AxisLabelValues">
            <summary>
            Gets or sets the axis label values.
            </summary>
            <value>The axis label values.</value>
        </member>
        <member name="T:CommonTools.Components.Flash.OpenFlashChart.TipConstants">
            <summary>
            
            </summary>
        </member>
        <member name="F:CommonTools.Components.Flash.OpenFlashChart.TipConstants.VALUE">
            <summary>
            
            </summary>
        </member>
        <member name="F:CommonTools.Components.Flash.OpenFlashChart.TipConstants.TOTAL">
            <summary>
            
            </summary>
        </member>
        <member name="F:CommonTools.Components.Flash.OpenFlashChart.TipConstants.PERCENT">
            <summary>
            
            </summary>
        </member>
        <member name="F:CommonTools.Components.Flash.OpenFlashChart.TipConstants.LABEL">
            <summary>
            
            </summary>
        </member>
        <member name="T:CommonTools.Components.Combinatorics.Variations`1">
            <summary>
            Variations defines a meta-collection, typically a list of lists, of all possible 
            ordered subsets of a particular size from the set of values.  
            This list is enumerable and allows the scanning of all possible Variations using a simple 
            foreach() loop even though the variations are not all in memory.
            </summary>
            <remarks>
            The MetaCollectionType parameter of the constructor allows for the creation of
            normal Variations and Variations with Repetition.
            
            When given an input collect {A B C} and lower index of 2, the following sets are generated:
            MetaCollectionType.WithoutRepetition generates 6 sets: =>
                {A B}, {A B}, {B A}, {B C}, {C A}, {C B}
            MetaCollectionType.WithRepetition generates 9 sets:
                {A A}, {A B}, {A B}, {B A}, {B B }, {B C}, {C A}, {C B}, {C C}
            
            The equality of multiple inputs is not considered when generating variations.
            </remarks>
            <typeparam name="T">The type of the values within the list.</typeparam>
        </member>
        <member name="M:CommonTools.Components.Combinatorics.Variations`1.#ctor">
            <summary>
            No default constructor, must provided a list of values and size.
            </summary>
        </member>
        <member name="M:CommonTools.Components.Combinatorics.Variations`1.#ctor(System.Collections.Generic.IList{`0},System.Int32)">
            <summary>
            Create a variation set from the indicated list of values.
            The upper index is calculated as values.Count, the lower index is specified.
            Collection type defaults to MetaCollectionType.WithoutRepetition
            </summary>
            <param name="values">List of values to select Variations from.</param>
            <param name="lowerIndex">The size of each variation set to return.</param>
        </member>
        <member name="M:CommonTools.Components.Combinatorics.Variations`1.#ctor(System.Collections.Generic.IList{`0},System.Int32,CommonTools.Components.Combinatorics.GenerateOption)">
            <summary>
            Create a variation set from the indicated list of values.
            The upper index is calculated as values.Count, the lower index is specified.
            </summary>
            <param name="values">List of values to select variations from.</param>
            <param name="lowerIndex">The size of each vatiation set to return.</param>
            <param name="type">Type indicates whether to use repetition in set generation.</param>
        </member>
        <member name="M:CommonTools.Components.Combinatorics.Variations`1.GetEnumerator">
            <summary>
            Gets an enumerator for the collection of Variations.
            </summary>
            <returns>The enumerator.</returns>
        </member>
        <member name="M:CommonTools.Components.Combinatorics.Variations`1.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Gets an enumerator for the collection of Variations.
            </summary>
            <returns>The enumerator.</returns>
        </member>
        <member name="M:CommonTools.Components.Combinatorics.Variations`1.Initialize(System.Collections.Generic.IList{`0},System.Int32,CommonTools.Components.Combinatorics.GenerateOption)">
            <summary>
            Initialize the variations for constructors.
            </summary>
            <param name="values">List of values to select variations from.</param>
            <param name="lowerIndex">The size of each variation set to return.</param>
            <param name="type">The type of variations set to generate.</param>
        </member>
        <member name="F:CommonTools.Components.Combinatorics.Variations`1.myValues">
            <summary>
            Copy of values object is intialized with, required for enumerator reset.
            </summary>
        </member>
        <member name="F:CommonTools.Components.Combinatorics.Variations`1.myPermutations">
            <summary>
            Permutations object that handles permutations on int for variation inclusion and ordering.
            </summary>
        </member>
        <member name="F:CommonTools.Components.Combinatorics.Variations`1.myMetaCollectionType">
            <summary>
            The type of the variation collection.
            </summary>
        </member>
        <member name="F:CommonTools.Components.Combinatorics.Variations`1.myLowerIndex">
            <summary>
            The lower index defined in the constructor.
            </summary>
        </member>
        <member name="P:CommonTools.Components.Combinatorics.Variations`1.Count">
            <summary>
            The number of unique variations that are defined in this meta-collection.
            </summary>
            <remarks>
            Variations with repetitions does not behave like other meta-collections and it's
            count is equal to N^P, where N is the upper index and P is the lower index.
            </remarks>
        </member>
        <member name="P:CommonTools.Components.Combinatorics.Variations`1.Type">
            <summary>
            The type of Variations set that is generated.
            </summary>
        </member>
        <member name="P:CommonTools.Components.Combinatorics.Variations`1.UpperIndex">
            <summary>
            The upper index of the meta-collection, equal to the number of items in the initial set.
            </summary>
        </member>
        <member name="P:CommonTools.Components.Combinatorics.Variations`1.LowerIndex">
            <summary>
            The lower index of the meta-collection, equal to the number of items returned each iteration.
            </summary>
        </member>
        <member name="T:CommonTools.Components.Combinatorics.Variations`1.EnumeratorWithRepetition">
            <summary>
            An enumerator for Variations when the type is set to WithRepetition.
            </summary>
        </member>
        <member name="M:CommonTools.Components.Combinatorics.Variations`1.EnumeratorWithRepetition.#ctor(CommonTools.Components.Combinatorics.Variations{`0})">
            <summary>
            Construct a enumerator with the parent object.
            </summary>
            <param name="source">The source Variations object.</param>
        </member>
        <member name="M:CommonTools.Components.Combinatorics.Variations`1.EnumeratorWithRepetition.Reset">
            <summary>
            Resets the Variations enumerator to the first variation.  
            </summary>
        </member>
        <member name="M:CommonTools.Components.Combinatorics.Variations`1.EnumeratorWithRepetition.MoveNext">
            <summary>
            Advances to the next variation.
            </summary>
            <returns>True if successfully moved to next variation, False if no more variations exist.</returns>
            <remarks>
            Increments the internal myListIndexes collection by incrementing the last index
            and overflow/carrying into others just like grade-school arithemtic.  If the 
            finaly carry flag is set, then we would wrap around and are therefore done.
            </remarks>
        </member>
        <member name="M:CommonTools.Components.Combinatorics.Variations`1.EnumeratorWithRepetition.Dispose">
            <summary>
            Cleans up non-managed resources, of which there are none used here.
            </summary>
        </member>
        <member name="M:CommonTools.Components.Combinatorics.Variations`1.EnumeratorWithRepetition.ComputeCurrent">
            <summary>
            Computes the current list based on the internal list index.
            </summary>
        </member>
        <member name="F:CommonTools.Components.Combinatorics.Variations`1.EnumeratorWithRepetition.myParent">
            <summary>
            Parent object this is an enumerator for.
            </summary>
        </member>
        <member name="F:CommonTools.Components.Combinatorics.Variations`1.EnumeratorWithRepetition.myCurrentList">
            <summary>
            The current list of values, this is lazy evaluated by the Current property.
            </summary>
        </member>
        <member name="F:CommonTools.Components.Combinatorics.Variations`1.EnumeratorWithRepetition.myListIndexes">
            <summary>
            An enumertor of the parents list of lexicographic orderings.
            </summary>
        </member>
        <member name="P:CommonTools.Components.Combinatorics.Variations`1.EnumeratorWithRepetition.Current">
            <summary>
            The current variation
            </summary>
        </member>
        <member name="P:CommonTools.Components.Combinatorics.Variations`1.EnumeratorWithRepetition.System#Collections#IEnumerator#Current">
            <summary>
            The current variation.
            </summary>
        </member>
        <member name="T:CommonTools.Components.Combinatorics.Variations`1.EnumeratorWithoutRepetition">
            <summary>
            An enumerator for Variations when the type is set to WithoutRepetition.
            </summary>
        </member>
        <member name="M:CommonTools.Components.Combinatorics.Variations`1.EnumeratorWithoutRepetition.#ctor(CommonTools.Components.Combinatorics.Variations{`0})">
            <summary>
            Construct a enumerator with the parent object.
            </summary>
            <param name="source">The source Variations object.</param>
        </member>
        <member name="M:CommonTools.Components.Combinatorics.Variations`1.EnumeratorWithoutRepetition.Reset">
            <summary>
            Resets the Variations enumerator to the first variation.  
            </summary>
        </member>
        <member name="M:CommonTools.Components.Combinatorics.Variations`1.EnumeratorWithoutRepetition.MoveNext">
            <summary>
            Advances to the next variation.
            </summary>
            <returns>True if successfully moved to next variation, False if no more variations exist.</returns>
        </member>
        <member name="M:CommonTools.Components.Combinatorics.Variations`1.EnumeratorWithoutRepetition.Dispose">
            <summary>
            Cleans up non-managed resources, of which there are none used here.
            </summary>
        </member>
        <member name="M:CommonTools.Components.Combinatorics.Variations`1.EnumeratorWithoutRepetition.ComputeCurrent">
            <summary>
            Creates a list of original values from the int permutation provided.  
            The exception for accessing current (InvalidOperationException) is generated
            by the call to .Current on the underlying enumeration.
            </summary>
            <remarks>
            To compute the current list of values, the element to use is determined by 
            a permutation position with a non-MaxValue value.  It is placed at the position in the
            output that the index value indicates.
            
            E.g. Variations of 6 choose 3 without repetition
            Input array:   {A B C D E F}
            Permutations:  {- 1 - - 3 2} (- is Int32.MaxValue)
            Generates set: {B F E}
            </remarks>
        </member>
        <member name="F:CommonTools.Components.Combinatorics.Variations`1.EnumeratorWithoutRepetition.myParent">
            <summary>
            Parent object this is an enumerator for.
            </summary>
        </member>
        <member name="F:CommonTools.Components.Combinatorics.Variations`1.EnumeratorWithoutRepetition.myCurrentList">
            <summary>
            The current list of values, this is lazy evaluated by the Current property.
            </summary>
        </member>
        <member name="F:CommonTools.Components.Combinatorics.Variations`1.EnumeratorWithoutRepetition.myPermutationsEnumerator">
            <summary>
            An enumertor of the parents list of lexicographic orderings.
            </summary>
        </member>
        <member name="P:CommonTools.Components.Combinatorics.Variations`1.EnumeratorWithoutRepetition.Current">
            <summary>
            The current variation.
            </summary>
        </member>
        <member name="P:CommonTools.Components.Combinatorics.Variations`1.EnumeratorWithoutRepetition.System#Collections#IEnumerator#Current">
            <summary>
            The current variation.
            </summary>
        </member>
        <member name="T:CommonTools.Components.Caching.ClusteredCacheDatasets">
             <summary>
            Represents a strongly typed in-memory cache of data.
            </summary>
        </member>
        <member name="T:CommonTools.Components.Caching.ClusteredCacheDatasets.CacheKeysDataTable">
             <summary>
            Represents the strongly named DataTable class.
            </summary>
        </member>
        <member name="T:CommonTools.Components.Caching.ClusteredCacheDatasets.CacheKeysRow">
             <summary>
            Represents strongly named DataRow class.
            </summary>
        </member>
        <member name="T:CommonTools.Components.Caching.ClusteredCacheDatasets.CacheKeysRowChangeEvent">
             <summary>
            Row event argument class
            </summary>
        </member>
        <member name="T:CommonTools.Components.Caching.BusinessObjectManagerException">
            <summary>
            Exception that gets thrown by the CommonTools.Components.BusinessTier namespace
            </summary>
        </member>
        <member name="M:CommonTools.Components.Caching.BusinessObjectManagerException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:CommonTools.Components.Caching.CachingException"/> class.
            </summary>
            <param name="message">The message</param>
        </member>
        <member name="M:CommonTools.Components.Caching.BusinessObjectManagerException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:CommonTools.Components.Caching.CachingException"/> class.
            </summary>
            <param name="message">The message</param>
            <param name="inner">The inner exception</param>
        </member>
        <member name="T:CommonTools.Components.BusinessTier.BusinessObjectValidationResult">
            <summary>
            This class acts as a validation report that can be used for examining the validation result of a BusinessObjectManager.ValidateAction call.
            </summary>
        </member>
        <member name="M:CommonTools.Components.BusinessTier.BusinessObjectValidationResult.GetMandatoryFieldErrorMessage">
            <summary>
            Gets the mandatory field error message.
            </summary>
            <returns></returns>
        </member>
        <member name="M:CommonTools.Components.BusinessTier.BusinessObjectValidationResult.GetPropertyErrorsMessage(CommonTools.TextFormat)">
            <summary>
            Gets the property errors message.
            </summary>
            <param name="format">The format to use.</param>
            <returns></returns>
        </member>
        <member name="M:CommonTools.Components.BusinessTier.BusinessObjectValidationResult.ToString(CommonTools.TextFormat)">
            <summary>
            Converts this report to a string string.
            </summary>
            <param name="format">The format to use.</param>
            <returns></returns>
        </member>
        <member name="M:CommonTools.Components.BusinessTier.BusinessObjectValidationResult.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents the current <see cref="T:System.Object"/>.
            </summary>
            <returns>
            A <see cref="T:System.String"/> that represents the current <see cref="T:System.Object"/>.
            </returns>
        </member>
        <member name="M:CommonTools.Components.BusinessTier.BusinessObjectValidationResult.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:CommonTools.Components.BusinessTier.BusinessObjectValidationResult"/> class.
            </summary>
        </member>
        <member name="M:CommonTools.Components.BusinessTier.BusinessObjectValidationResult.#ctor(CommonTools.Components.BusinessTier.ValidationStatus)">
            <summary>
            Initializes a new instance of the <see cref="T:CommonTools.Components.BusinessTier.BusinessObjectValidationResult"/> class.
            </summary>
            <param name="status">The status to initialize this object with.</param>
        </member>
        <member name="P:CommonTools.Components.BusinessTier.BusinessObjectValidationResult.ValidationStatus">
            <summary>
            Gets or sets the validation status.
            </summary>
            <value>The validation status.</value>
        </member>
        <member name="P:CommonTools.Components.BusinessTier.BusinessObjectValidationResult.PropertyErrors">
            <summary>
            Gets the property errors.
            </summary>
            <value>The property errors.</value>
        </member>
        <member name="P:CommonTools.Components.BusinessTier.BusinessObjectValidationResult.MandatoryFieldViolations">
            <summary>
            Gets the mandatory field violations.
            </summary>
            <value>The mandatory field violations.</value>
        </member>
        <member name="P:CommonTools.Components.BusinessTier.BusinessObjectValidationResult.IsValid">
            <summary>
            Gets a value indicating whether this report is valid or not (it also test for property errors and mandatory 
            field violations).
            </summary>
            <value><c>true</c> if this instance is valid; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:CommonTools.Components.BusinessTier.BusinessObjectValidationResult.HasPropertyErrors">
            <summary>
            Gets a value indicating whether this instance has property errors.
            </summary>
            <value>
            	<c>true</c> if this instance has property errors; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:CommonTools.Components.BusinessTier.BusinessObjectValidationResult.HasMandatoryFieldViolations">
            <summary>
            Gets a value indicating whether this instance has mandatory field violations.
            </summary>
            <value>
            	<c>true</c> if this instance has mandatory field violations; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:CommonTools.Components.BusinessTier.BusinessObjectValidationResult.CustomErrorMessages">
            <summary>
            Gets or sets the custom error messages.
            </summary>
            <value>The custom error messages.</value>
        </member>
        <member name="T:CommonTools.Components.Threading.JobSection">
            <summary>
            Provides the handler for the jobpool section of app.config.
            </summary>
        </member>
        <member name="M:CommonTools.Components.Threading.JobSection.CreateJobControllerInstance">
            <summary>
            Creates an instance of this object's default controller.
            </summary>
            <returns></returns>
        </member>
        <member name="P:CommonTools.Components.Threading.JobSection.JobItemCollection">
            <summary>
            Gets the job pool.
            </summary>
        </member>
        <member name="P:CommonTools.Components.Threading.JobSection.JobControllerProviderType">
            <summary>
            The number of minutes to hold the cached object.
            </summary>
        </member>
        <member name="P:CommonTools.Components.Threading.JobSection.Minutes">
            <summary>
            Gets the execution interval in minutes for all IJobItems at this object's IJobItem collection. This value can be overwritten
            by the IJobItem itself.
            </summary>
            <value>The minutes.</value>
        </member>
        <member name="P:CommonTools.Components.Threading.JobSection.JobItems">
            <summary>
            Gets the IJobItem collection associated with this ICacheController.
            </summary>
            <value>The job items.</value>
        </member>
        <member name="T:CommonTools.Components.Threading.JobElements">
            <summary>
            Provides the handler for the job elements section of app.config.
            </summary>
        </member>
        <member name="M:CommonTools.Components.Threading.JobElements.CreateNewElement">
            <summary>
            Overridden. Creates a new job element in the child node of this section.
            </summary>
            <returns></returns>
        </member>
        <member name="M:CommonTools.Components.Threading.JobElements.GetElementKey(System.Configuration.ConfigurationElement)">
            <summary>
            Overridden. Gets the id of the JobElement for the specified JobElement.
            </summary>
            <param name="element">The JobElement to get.</param>
            <returns></returns>
        </member>
        <member name="P:CommonTools.Components.Threading.JobElements.Minutes">
            <summary>
            The number of minutes to run the job for.
            </summary>
        </member>
        <member name="T:CommonTools.Components.Threading.JobElement">
            <summary>
            Provides the handler for the jobelement config section.
            </summary>
        </member>
        <member name="P:CommonTools.Components.Threading.JobElement.AdditionalOptions">
            <summary>
            Any other options that may appear in the config file.
            </summary>
        </member>
        <member name="P:CommonTools.Components.Threading.JobElement.Enabled">
            <summary>
            
            </summary>
        </member>
        <member name="P:CommonTools.Components.Threading.JobElement.EnableShutDown">
            <summary>
            Shuts down the thread on close down.
            </summary>
        </member>
        <member name="P:CommonTools.Components.Threading.JobElement.Minutes">
            <summary>
            (Deprecated, use Period instead) Defines the interval for the thread.
            </summary>
        </member>
        <member name="P:CommonTools.Components.Threading.JobElement.Seconds">
            <summary>
            (Deprecated, use Period instead) Defines the interval for the thread.
            </summary>
        </member>
        <member name="P:CommonTools.Components.Threading.JobElement.Period">
            <summary>
            Gets or sets the period.
            </summary>
            <value>
            The period.
            </value>
        </member>
        <member name="P:CommonTools.Components.Threading.JobElement.UsePreciseTimer">
            <summary>
            Gets or sets a value indicating whether this job should use a precise timer. Set this value to true if you need millisecond precision
            job execution.
            </summary>
        </member>
        <member name="P:CommonTools.Components.Threading.JobElement.PreciseTimerCallbackMode">
            <summary>
            If the UsePreciseTimer flag is set to true, this value indicates whether the actual callbacks should be fired off as asynchonous delegates or
            iteratively. If you use Async, make sure that the callbacks are thread-safe.
            </summary>
        </member>
        <member name="P:CommonTools.Components.Threading.JobElement.ExecuteOnOwnThread">
            <summary>
            whether to run the job single threaded.
            </summary>
        </member>
        <member name="P:CommonTools.Components.Threading.JobElement.ExecuteDaily">
            <summary>
            Gets or sets a value indicating whether to execute this job daily at a determined time.
            </summary>
            <value><c>true</c> if [execute daily]; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:CommonTools.Components.Threading.JobElement.DailyUTCExecutionTime">
            <summary>
            Gets or sets the time of the day that this job should execute on a daily basis. The format must be the
            following -> 16:04:12.123  { = hh:mm:ss.ms }
            </summary>
            <value>The execute daily at.</value>
        </member>
        <member name="P:CommonTools.Components.Threading.JobElement.Name">
            <summary>
            The name of the job
            </summary>
        </member>
        <member name="P:CommonTools.Components.Threading.JobElement.DailyLocalizedExecutionTime">
            <summary>
            Gets or sets the daily localized execution time.
            </summary>
            <value>
            The daily localized execution time.
            </value>
        </member>
        <member name="P:CommonTools.Components.Threading.JobElement.DailyLocalizedExecutionTimeZoneName">
            <summary>
            Gets or sets the name of the daily localized execution time zone.
            </summary>
            <value>
            The name of the daily localized execution time zone.
            </value>
        </member>
        <member name="P:CommonTools.Components.Threading.JobElement.Type">
            <summary>
            The type of the job
            </summary>
        </member>
        <member name="P:CommonTools.Components.Threading.JobElement.FirstRunAtInitialization">
            <summary>
            Determines whether this job should execute immediately at the global Jobs instanciation or
            wait for the first interval.
            </summary>
            <example>
            
                Job A: Minutes = 10, FirstRunAtInitialization = true
                Job B: Minutes = 10, FirstRunAtInitialization = false
            
            CommonTools.Components.Threading.Jobs.Instance().Start(); // executed at 14:00:00.000
            
            Job A executes at 14:00:00.000, 14:10:00.000, 14:20:00.000, ...
            Job B executes at 14:10:00.000, 14:20:00.000, 14:30:00.000, ...
            
            </example>
            <value></value>
        </member>
        <member name="P:CommonTools.Components.Threading.JobElement.Options">
            <summary>
            Any other options that may appear in the config file.
            </summary>
            <value></value>
        </member>
        <member name="T:CommonTools.Web.Navigation.UrlRewriteSection">
            <summary>
            Provides the handler for the UrlRewrite section of app.config.
            </summary>
        </member>
        <member name="M:CommonTools.Web.Navigation.UrlRewriteSection.CreateUrlRewriteControllerInstance">
            <summary>
            Creates an instance of this object's default controller.
            </summary>
            <returns></returns>
        </member>
        <member name="M:CommonTools.Web.Navigation.UrlRewriteSection.GetUrlRewriteItem(System.String)">
            <summary>
            Gets an IUrlRewriteItem from the IUrlRewriteItem collection by name
            </summary>
            <param name="name">The name</param>
            <returns></returns>
        </member>
        <member name="P:CommonTools.Web.Navigation.UrlRewriteSection.UrlRewriteElementCollection">
            <summary>
            holds the collection of UrlRewrite objects in the app.config.
            </summary>
        </member>
        <member name="P:CommonTools.Web.Navigation.UrlRewriteSection.UrlRewriteControllerProviderType">
            <summary>
            The number of minutes to hold the UrlRewrited object.
            </summary>
        </member>
        <member name="P:CommonTools.Web.Navigation.UrlRewriteSection.SitemapUrlsCacheDurationInSeconds">
            <summary>
            Gets the _ sitemap urls cache duration in seconds.
            </summary>
            <value>The _ sitemap urls cache duration in seconds.</value>
        </member>
        <member name="P:CommonTools.Web.Navigation.UrlRewriteSection.SitemapUrlsCacheKey">
            <summary>
            Gets the _ sitemap urls cache key.
            </summary>
            <value>The _ sitemap urls cache key.</value>
        </member>
        <member name="P:CommonTools.Web.Navigation.UrlRewriteSection.SitemapUrlsCacheItemPriority">
            <summary>
            Gets the _ sitemap urls cache item priority.
            </summary>
            <value>The _ sitemap urls cache item priority.</value>
        </member>
        <member name="P:CommonTools.Web.Navigation.UrlRewriteSection.UrlRewriteItems">
            <summary>
            Gets the IUrlRewriteItem collection associated with this IUrlRewriteController.
            </summary>
            <value>The UrlRewrite items.</value>
        </member>
        <member name="T:CommonTools.Web.Navigation.UrlRewriteElements">
            <summary>
            Provides the handler for each individual UrlRewrite node in the UrlRewrite section of app.config.
            </summary>
        </member>
        <member name="M:CommonTools.Web.Navigation.UrlRewriteElements.CreateNewElement">
            <summary>
            Overridden. Creates a new UrlRewriteElement.
            </summary>
            <returns></returns>
        </member>
        <member name="M:CommonTools.Web.Navigation.UrlRewriteElements.GetElementKey(System.Configuration.ConfigurationElement)">
            <summary>
            Overridden. Retrieves the specified UrlRewrite element name for the given weak typed node.
            </summary>
            <param name="element">The node in app.config</param>
            <returns>The UrlRewrite element name located at the configuration element.</returns>
        </member>
        <member name="T:CommonTools.Web.Navigation.UrlRewriteElement">
            <summary>
            Provides the UrlRewrite element object as specified through app.config.
            </summary>
        </member>
        <member name="P:CommonTools.Web.Navigation.UrlRewriteElement.Pattern">
            <summary>
            A suffix to uniquely identify the UrlRewrite type.
            </summary>
        </member>
        <member name="P:CommonTools.Web.Navigation.UrlRewriteElement.Vanity">
            <summary>
            A suffix to uniquely identify the UrlRewrite type.
            </summary>
        </member>
        <member name="P:CommonTools.Web.Navigation.UrlRewriteElement.Path">
            <summary>
            A suffix to uniquely identify the UrlRewrite type.
            </summary>
        </member>
        <member name="P:CommonTools.Web.Navigation.UrlRewriteElement.Url">
            <summary>
            Gets the URL.
            </summary>
            <value>The URL.</value>
        </member>
        <member name="P:CommonTools.Web.Navigation.UrlRewriteElement.Name">
            <summary>
            The name of the UrlRewrite object.
            </summary>
        </member>
        <member name="P:CommonTools.Web.Navigation.UrlRewriteElement.ParentName">
            <summary>
            The name of the UrlRewrite object.
            </summary>
        </member>
        <member name="P:CommonTools.Web.Navigation.UrlRewriteElement.BreadcrumbTitle">
            <summary>
            The name of the UrlRewrite object.
            </summary>
        </member>
        <member name="P:CommonTools.Web.Navigation.UrlRewriteElement.Title">
            <summary>
            The name of the UrlRewrite object.
            </summary>
        </member>
        <member name="P:CommonTools.Web.Navigation.UrlRewriteElement.IsHttps">
            <summary>
            The name of the UrlRewrite object.
            </summary>
        </member>
        <member name="P:CommonTools.Web.Navigation.UrlRewriteElement.FullVirtualPath">
            <summary>
            Gets the name of the <see cref="T:CommonTools.Web.Navigation.IUrlRewriteItem"/>.
            </summary>
            <value>The name.</value>
        </member>
        <member name="T:CommonTools.Data.DbStatus">
            <summary>
            Used by the DataAccessFactory to return status results back to the client.
            </summary>
        </member>
        <member name="F:CommonTools.Data.DbStatus.Success">
            <summary>
            Successful return.
            </summary>
        </member>
        <member name="F:CommonTools.Data.DbStatus.UnableToParseObject">
            <summary>
            Unable to parse the return type.
            </summary>
        </member>
        <member name="F:CommonTools.Data.DbStatus.NoObjectReturned">
            <summary>
            
            </summary>
        </member>
        <member name="T:CommonTools.Data.DataAccessFactory">
            <summary>
            Provides a facade for creating and running Database queries on the server.
            </summary>
            <remarks>One of the disadvantages of generic database factories
            is that they provide only limited support for parametrised SQL queries.</remarks>
        </member>
        <member name="M:CommonTools.Data.DataAccessFactory.Select(System.String,System.Data.DataSet@)">
            <summary>
            Populates the referenced DataSet with data returned by specified select query. 
            Returns the number of rows affected by the query. It should also be noted that
            their stored procedure support is also somewhat limited.
            </summary>
            <param name="query">SQL query to run against the database</param>
            <param name="queryResult">DataSet with data returned by specified select query</param>
            <returns>The number of rows affected by the query</returns>
        </member>
        <member name="M:CommonTools.Data.DataAccessFactory.Select(System.String,System.Data.DataTable@)">
            <summary>
            Populates the referenced DataTable with data returned by specified select query. 
            Returns the number of rows affected by the query.
            </summary>
            <param name="query">SQL query to run against the database</param>
            <param name="queryResult">DataTable with data returned by specified select query</param>
            <returns>The number of rows affected by the query</returns>
        </member>
        <member name="M:CommonTools.Data.DataAccessFactory.ExecuteReader(System.String)">
            <summary>
            Returns a DbDataReader associated to the specified query. Make sure to open the connection
            before executing this method.
            </summary>
            <param name="query">The SQL statement.</param>
            <returns>A DbDataReader associated to the specified query.</returns>
        </member>
        <member name="M:CommonTools.Data.DataAccessFactory.ExecuteReader(System.String,System.Data.CommandBehavior)">
            <summary>
            Returns a DbDataReader associated to the specified query. Make sure to open the connection
            before executing this method.
            </summary>
            <param name="query">The SQL statement.</param>
            <param name="behavior">One of the System.Data.CommandBehavior values.</param>
            <returns>A DbDataReader associated to the specified query, null if the ConnectionState of
            the DB-Connection is not ConnectionState.Open.
            </returns>
        </member>
        <member name="M:CommonTools.Data.DataAccessFactory.ExecuteNonQuery(System.String)">
            <summary>
            Executes a SQL statement against a connection object.
            </summary>
            <param name="query">The SQL statement.</param>
            <returns>The number of rows affected.</returns>
        </member>
        <member name="M:CommonTools.Data.DataAccessFactory.ExecuteScalar``1(System.String,``0@)">
            <summary>
            Executes the query and references the first column of the first row in the result
            set returned by the query to the scalar parameter.
            </summary>
            <param name="query">The SQL statement.</param>
            <param name="scalar">The returned scalar object.</param>
            <returns>The DbStatus of the executed SQL statement</returns>
        </member>
        <member name="M:CommonTools.Data.DataAccessFactory.GetSchemaTable">
            <summary>
            Returns schema information for the data source of this System.Data.Common.DbConnection.
            </summary>
            <returns>A System.Data.DataTable that contains schema information.</returns>
        </member>
        <member name="M:CommonTools.Data.DataAccessFactory.GetSchemaTable(System.String)">
            <summary>
            Returns schema information for the data source of this System.Data.Common.DbConnection
            using the specified string for the schema name.
            </summary>
            <param name="collectionName">Specifies the name of the schema to return.</param>
            <returns>A System.Data.DataTable that contains schema information.</returns>
        </member>
        <member name="M:CommonTools.Data.DataAccessFactory.GetSchemaTable(System.String,System.String[])">
            <summary>
            Returns schema information for the data source of this System.Data.Common.DbConnection
            using the specified string for the schema name and the specified string array
            for the restriction values.
            </summary>
            <param name="collectionName">Specifies the name of the schema to return.</param>
            <param name="restrictionValues">TSpecifies a set of restriction values for the requested schema.</param>
            <returns>A System.Data.DataTable that contains schema information.</returns>
        </member>
        <member name="M:CommonTools.Data.DataAccessFactory.#ctor(System.String,System.String)">
            <summary>
            Default Constructor
            </summary>
            <param name="connectionString">The DB-ConnectionString to use.</param>
            <param name="providerInvariantName">The type of the provider. CodeReview: use Type instead?</param>
        </member>
        <member name="P:CommonTools.Data.DataAccessFactory.Connection">
            <summary>
            Gets the connection used by the factory.
            </summary>
        </member>
        <member name="T:CommonTools.Core.UnhandledException">
            <summary>
            
            </summary>
        </member>
        <member name="M:CommonTools.Core.UnhandledException.#ctor(System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:CommonTools.Core.UnhandledException"/> class.
            </summary>
            <param name="innerException">The inner exception.</param>
        </member>
        <member name="M:CommonTools.Core.UnhandledException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:CommonTools.Core.UnhandledException"/> class.
            </summary>
            <param name="message">The message.</param>
        </member>
        <member name="M:CommonTools.Core.UnhandledException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:CommonTools.Core.UnhandledException"/> class.
            </summary>
            <param name="message">The message.</param>
            <param name="innerException">The inner exception.</param>
        </member>
        <member name="T:CommonTools.Components.Testing.DebugUtility">
            <summary>
            This class provides help methods to facilitate debugging.
            </summary>
        </member>
        <member name="M:CommonTools.Components.Testing.DebugUtility.ArePropertyValuesEqual(System.Object,System.Object,System.String@)">
            <summary>
            Compares the property values of two objects.
            </summary>
            <param name="a">The object to compare with the other object</param>
            <param name="b">The object to compare with the other object</param>
            <param name="unequalProperties">A list of all unequal property values.</param>
            <returns>
            true if the property values of the specified objects are equal, otherwise false.
            </returns>
            <exception cref="T:System.ArgumentNullException">Throws System.ArgumentNullException if one or both of the specified objects is null.</exception>
              
            <exception cref="T:System.ArgumentException">Throws System.ArgumentException if the objects are not from the same type</exception>
        </member>
        <member name="M:CommonTools.Components.Testing.DebugUtility.ArePropertyValuesEqual(System.Object,System.Object,System.TimeSpan,System.String@)">
            <summary>
            Compares the property values of two objects.
            </summary>
            <param name="a">The object to compare with the other object</param>
            <param name="b">The object to compare with the other object</param>
            <param name="dateTimeWindow">The date time window.</param>
            <param name="unequalProperties">A list of all unequal property values.</param>
            <returns>
            true if the property values of the specified objects are equal, otherwise false.
            </returns>
            <exception cref="T:System.ArgumentNullException">Throws System.ArgumentNullException if one or both of the specified objects is null.</exception>
              
            <exception cref="T:System.ArgumentException">Throws System.ArgumentException if the objects are not from the same type</exception>
        </member>
        <member name="M:CommonTools.Components.Testing.DebugUtility.GetRandomEnum``1(System.Random)">
            <summary>
            Gets a random enum value from the specified generic Enum.
            </summary>
            <typeparam name="U"></typeparam>
            <param name="random">The random used to generate the random Enum from.</param>
            <returns>A random enum value</returns>
            <exception cref="T:System.ArgumentException">Throws a System.ArgumentException if the specified generic type is not an enum.</exception>
        </member>
        <member name="M:CommonTools.Components.Testing.DebugUtility.GetRandomEnum``1(System.Random,``0)">
            <summary>
            Gets a random enum value from the specified generic Enum.
            </summary>
            <typeparam name="U"></typeparam>
            <param name="random">The random used to generate the random Enum from.</param>
            <param name="exclude">The Enum value to from all possible enum values.</param>
            <returns>A random enum value</returns>
            <exception cref="T:System.ArgumentException">Throws a System.ArgumentException if the specified generic type is not an enum.</exception>
        </member>
        <member name="M:CommonTools.Components.Testing.DebugUtility.FlipCoin(System.Random)">
            <summary>
            Generates a random true or false boolean
            </summary>
            <param name="random">The random used to generate the random boolean from.</param>
            <returns>Either true or false</returns>
        </member>
        <member name="M:CommonTools.Components.Testing.DebugUtility.FlipRiggedCoin(System.Random,System.Double)">
            <summary>
            Generates a random true or false boolean, going in favor of the specified probability.
            </summary>
            <param name="random">The random used to generate the random boolean from.</param>
            <param name="probability">This value defines the probability that the returned value will be true. Set it to a value between 0 and 1.</param>
            <returns>Either true or false</returns>
        </member>
        <member name="M:CommonTools.Components.Testing.DebugUtility.GetEnums``1">
            <summary>
            Gets a list of enums of a specified enum type.
            </summary>
            <typeparam name="T"></typeparam>
            <returns></returns>
            <exception cref="T:System.ArgumentException">Throws a System.ArgumentException if the specified generic type is not an enum.</exception>
        </member>
        <member name="M:CommonTools.Components.Testing.DebugUtility.GetFilteredEnums``1(System.Random,System.Double)">
            <summary>
            Gets a list of enum types of a specified enum the filtered enums. The probability can be set in order to
            set the probablity of which an enum will occur in the return list.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="random">The random.</param>
            <param name="probability">The probability.</param>
            <returns></returns>
        </member>
        <member name="M:CommonTools.Components.Testing.DebugUtility.GetDebugString(System.Type)">
            <summary>
            Gets all the enum names of a specified enum type as a human readable string.
            </summary>
            <param name="enumType">Type of the enum.</param>
            <returns></returns>
        </member>
        <member name="M:CommonTools.Components.Testing.DebugUtility.GetDebugString(System.Collections.IEnumerable)">
            <summary>
            Gets all the enumerable object's values as a human readable string.
            </summary>
            <param name="obj">The obj.</param>
            <returns></returns>
        </member>
        <member name="M:CommonTools.Components.Testing.DebugUtility.GetDebugString(System.Collections.ICollection)">
            <summary>
            Gets all the collection's values as a human readable string.
            </summary>
            <param name="obj">The obj.</param>
            <returns></returns>
        </member>
        <member name="M:CommonTools.Components.Testing.DebugUtility.GetObjectString(System.Object)">
            <summary>
            Gets the object's property values formatted in a human readable string.
            </summary>
            <param name="obj">The obj.</param>
            <returns></returns>
        </member>
        <member name="M:CommonTools.Components.Testing.DebugUtility.GetObjectString(System.Object,CommonTools.TextFormat)">
            <summary>
            Gets the object string.
            </summary>
            <param name="obj">The obj.</param>
            <param name="textFormat">The text format.</param>
            <returns></returns>
        </member>
        <member name="M:CommonTools.Components.Testing.DebugUtility.TraceDataContractSerializableObject``1(``0)">
            <summary>
            Traces the data contract serializable object.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="obj">The obj.</param>
        </member>
        <member name="M:CommonTools.Components.Testing.DebugUtility.TraceDataContractJsonSerializableObject``1(``0)">
            <summary>
            Traces the data contract json serializable object.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="obj">The obj.</param>
            <returns></returns>
        </member>
        <member name="M:CommonTools.Components.Testing.DebugUtility.StopTime(CommonTools.Components.Testing.DebugUtility.MethodToExecuteDelegate,System.Int32)">
            <summary>
            Stops the time.
            </summary>
            <param name="methodToExecute">The method to execute.</param>
            <param name="repetitions">The repetitions.</param>
            <returns></returns>
        </member>
        <member name="T:CommonTools.Components.Testing.DebugUtility.MethodToExecuteDelegate">
            <summary>
            
            </summary>
        </member>
        <member name="T:CommonTools.Components.Logging.LogSectionManager">
            <summary>
            This is the class that's capable of enumerating the Log section of your app.config.
            </summary>
        </member>
        <member name="P:CommonTools.Components.Logging.LogSectionManager.LogSection">
            <summary>
            Gets the Log section settings of the app.config or web.config
            </summary>
        </member>
        <member name="T:CommonTools.Components.Graphics.CropPosition">
            <summary>
            
            </summary>
        </member>
        <member name="F:CommonTools.Components.Graphics.CropPosition.LeftOrTop">
            <summary>
            
            </summary>
        </member>
        <member name="F:CommonTools.Components.Graphics.CropPosition.Centered">
            <summary>
            
            </summary>
        </member>
        <member name="F:CommonTools.Components.Graphics.CropPosition.RightOrBottom">
            <summary>
            
            </summary>
        </member>
        <member name="T:CommonTools.Components.Flash.OpenFlashChart.ChartValueBase">
            <summary>
            
            </summary>
        </member>
        <member name="M:CommonTools.Components.Flash.OpenFlashChart.ChartValueBase.#ctor(System.Decimal)">
            <summary>
            Initializes a new instance of the <see cref="T:CommonTools.Components.Flash.OpenFlashChart.ChartValueBase"/> class.
            </summary>
            <param name="value">The value.</param>
        </member>
        <member name="P:CommonTools.Components.Flash.OpenFlashChart.ChartValueBase.Value">
            <summary>
            Gets or sets the value.
            </summary>
            <value>The value.</value>
        </member>
        <member name="T:CommonTools.Components.Caching.ClusteredCacheControllerFactory">
            <summary>
            This is the class that's capable of enumerating the ClusteredCache section of your app.config.
            </summary>
        </member>
        <member name="F:CommonTools.Components.Caching.ClusteredCacheControllerFactory.SECTION_NAME">
            <summary>
            The configuration's configsection key
            </summary>
        </member>
        <member name="M:CommonTools.Components.Caching.ClusteredCacheControllerFactory.CreateClusteredCacheController">
            <summary>
            Gets the ClusteredCache section settings of the app.config
            </summary>
        </member>
        <member name="T:CommonTools.Components.Caching.CacheMode">
            <summary>
            
            </summary>
        </member>
        <member name="F:CommonTools.Components.Caching.CacheMode.InProcess">
            <summary>
            
            </summary>
        </member>
        <member name="F:CommonTools.Components.Caching.CacheMode.Memcached">
            <summary>
            
            </summary>
        </member>
        <member name="F:CommonTools.Components.Caching.CacheMode.MemcachedProtocolBufferSerialization">
            <summary>
            
            </summary>
        </member>
        <member name="T:CommonTools.Web.UI.CacheView">
            <summary>
            This user control provides a user interface editor to view the transact cache objects
            in the system.
            </summary>
        </member>
        <member name="M:CommonTools.Web.UI.CacheView.RecreateChildControls">
            <see cref="M:CommonTools.Web.UI.JobView.RecreateChildControls"/>
        </member>
        <member name="M:CommonTools.Web.UI.CacheView.CreateChildControls">
            <see cref="M:CommonTools.Web.UI.JobView.CreateChildControls"/>
        </member>
        <member name="M:CommonTools.Web.UI.CacheView.Render(System.Web.UI.HtmlTextWriter)">
            <see cref="M:CommonTools.Web.UI.JobView.Render(System.Web.UI.HtmlTextWriter)"/>
        </member>
        <member name="P:CommonTools.Web.UI.CacheView.TableCssClass">
            <see cref="P:CommonTools.Web.UI.JobView.TableCssClass"/>
        </member>
        <member name="P:CommonTools.Web.UI.CacheView.TableHeaderCssClass">
            <see cref="P:CommonTools.Web.UI.JobView.TableHeaderCssClass"/>
        </member>
        <member name="P:CommonTools.Web.UI.CacheView.TableCellCssClass">
            <see cref="P:CommonTools.Web.UI.JobView.TableCellCssClass"/>
        </member>
        <member name="P:CommonTools.Web.UI.CacheView.TableEnumeratingCellCssClass">
            <see cref="P:CommonTools.Web.UI.JobView.TableEnumeratingCellCssClass"/>
        </member>
        <member name="P:CommonTools.Web.UI.CacheView.Theme">
            <see cref="P:CommonTools.Web.UI.JobView.Theme"/>
        </member>
        <member name="T:CommonTools.Web.UI.SkinnedNavigationBreadcrumbs">
            <summary>
            
            </summary>
        </member>
        <member name="M:CommonTools.Web.UI.SkinnedNavigationBreadcrumbs.RecreateChildControls">
            <see cref="M:CommonTools.Web.UI.JobView.RecreateChildControls"/>
        </member>
        <member name="M:CommonTools.Web.UI.SkinnedNavigationBreadcrumbs.OnPreRender(System.EventArgs)">
            <see cref="M:CommonTools.Web.UI.JobView.Render(System.Web.UI.HtmlTextWriter)"/>
        </member>
        <member name="P:CommonTools.Web.UI.SkinnedNavigationBreadcrumbs.ActiveMenuItem">
            <summary>
            Gets or sets the active item.
            </summary>
            <value>The active item.</value>
        </member>
        <member name="P:CommonTools.Web.UI.SkinnedNavigationBreadcrumbs.ActivePageIsLink">
            <summary>
            Gets or sets a value indicating whether the currently active page text is rendered as a link. If false,
            the active page is rendered as a span.
            </summary>
            <value><c>true</c> if [_ active page is link]; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:CommonTools.Web.UI.SkinnedNavigationBreadcrumbs.ShowFirstSeparator">
            <summary>
            Gets or sets a value indicating whether [show first separator].
            </summary>
            <value><c>true</c> if [show first separator]; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:CommonTools.Web.UI.SkinnedNavigationBreadcrumbs.SeparatorControlToLoad">
            <summary>
            Gets or sets the link CSS class.
            </summary>
            <value>The link CSS class.</value>
        </member>
        <member name="P:CommonTools.Web.UI.SkinnedNavigationBreadcrumbs.ClickableNodeControlToLoad">
            <summary>
            Gets or sets the link CSS class.
            </summary>
            <value>The link CSS class.</value>
        </member>
        <member name="P:CommonTools.Web.UI.SkinnedNavigationBreadcrumbs.UnclickableNodeControlToLoad">
            <summary>
            Gets or sets the link CSS class.
            </summary>
            <value>The link CSS class.</value>
        </member>
        <member name="T:CommonTools.Web.UI.NavigationBreadcrumbsSkin">
            <summary>
            
            </summary>
        </member>
        <member name="M:CommonTools.Web.UI.NavigationBreadcrumbsSkin.OnPreRender(System.EventArgs)">
            <see cref="M:CommonTools.Web.UI.JobView.Render(System.Web.UI.HtmlTextWriter)"/>
        </member>
        <member name="P:CommonTools.Web.UI.NavigationBreadcrumbsSkin.MenuItem">
            <summary>
            Gets or sets the menu item.
            </summary>
            <value>The menu item.</value>
        </member>
        <member name="P:CommonTools.Web.UI.NavigationBreadcrumbsSkin.IsLastNode">
            <summary>
            Gets or sets a value indicating whether this instance is last node.
            </summary>
            <value>
            	<c>true</c> if this instance is last node; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="T:CommonTools.Web.JavaScript.JsonWriter">
            <summary>
            Writer for producing JSON data.
            </summary>
        </member>
        <member name="M:CommonTools.Web.JavaScript.JsonWriter.#ctor(System.IO.TextWriter)">
            <summary>
            Ctor.
            </summary>
            <param name="output">TextWriter for writing</param>
        </member>
        <member name="M:CommonTools.Web.JavaScript.JsonWriter.#ctor(System.IO.Stream)">
            <summary>
            Ctor.
            </summary>
            <param name="output">Stream for writing</param>
        </member>
        <member name="M:CommonTools.Web.JavaScript.JsonWriter.#ctor(System.String)">
            <summary>
            Ctor.
            </summary>
            <param name="outputFileName">Name of the output file.</param>
        </member>
        <member name="M:CommonTools.Web.JavaScript.JsonWriter.#ctor(System.Text.StringBuilder)">
            <summary>
            Ctor.
            </summary>
            <param name="output">StringBuilder for appending</param>
        </member>
        <member name="M:CommonTools.Web.JavaScript.JsonWriter.Write(System.Object)">
            <summary>
            Writes the specified value.
            </summary>
            <param name="value">The value.</param>
        </member>
        <member name="M:CommonTools.Web.JavaScript.JsonWriter.WriteBase64(System.Byte[])">
            <summary>
            Writes the base64.
            </summary>
            <param name="value">The value.</param>
        </member>
        <member name="M:CommonTools.Web.JavaScript.JsonWriter.Write(System.DateTime)">
            <summary>
            Writes the specified value.
            </summary>
            <param name="value">The value.</param>
        </member>
        <member name="M:CommonTools.Web.JavaScript.JsonWriter.Write(System.Guid)">
            <summary>
            Writes the specified value.
            </summary>
            <param name="value">The value.</param>
        </member>
        <member name="M:CommonTools.Web.JavaScript.JsonWriter.Write(System.Enum)">
            <summary>
            Writes the specified value.
            </summary>
            <param name="value">The value.</param>
        </member>
        <member name="M:CommonTools.Web.JavaScript.JsonWriter.Write(System.String)">
            <summary>
            Writes the specified value.
            </summary>
            <param name="value">The value.</param>
        </member>
        <member name="M:CommonTools.Web.JavaScript.JsonWriter.Write(System.Boolean)">
            <summary>
            Writes the specified value.
            </summary>
            <param name="value">if set to <c>true</c> [value].</param>
        </member>
        <member name="M:CommonTools.Web.JavaScript.JsonWriter.Write(System.Byte)">
            <summary>
            Writes the specified value.
            </summary>
            <param name="value">The value.</param>
        </member>
        <member name="M:CommonTools.Web.JavaScript.JsonWriter.Write(System.SByte)">
            <summary>
            Writes the specified value.
            </summary>
            <param name="value">The value.</param>
        </member>
        <member name="M:CommonTools.Web.JavaScript.JsonWriter.Write(System.Int16)">
            <summary>
            Writes the specified value.
            </summary>
            <param name="value">The value.</param>
        </member>
        <member name="M:CommonTools.Web.JavaScript.JsonWriter.Write(System.UInt16)">
            <summary>
            Writes the specified value.
            </summary>
            <param name="value">The value.</param>
        </member>
        <member name="M:CommonTools.Web.JavaScript.JsonWriter.Write(System.Int32)">
            <summary>
            Writes the specified value.
            </summary>
            <param name="value">The value.</param>
        </member>
        <member name="M:CommonTools.Web.JavaScript.JsonWriter.Write(System.UInt32)">
            <summary>
            Writes the specified value.
            </summary>
            <param name="value">The value.</param>
        </member>
        <member name="M:CommonTools.Web.JavaScript.JsonWriter.Write(System.Int64)">
            <summary>
            Writes the specified value.
            </summary>
            <param name="value">The value.</param>
        </member>
        <member name="M:CommonTools.Web.JavaScript.JsonWriter.Write(System.UInt64)">
            <summary>
            Writes the specified value.
            </summary>
            <param name="value">The value.</param>
        </member>
        <member name="M:CommonTools.Web.JavaScript.JsonWriter.Write(System.Single)">
            <summary>
            Writes the specified value.
            </summary>
            <param name="value">The value.</param>
        </member>
        <member name="M:CommonTools.Web.JavaScript.JsonWriter.Write(System.Double)">
            <summary>
            Writes the specified value.
            </summary>
            <param name="value">The value.</param>
        </member>
        <member name="M:CommonTools.Web.JavaScript.JsonWriter.Write(System.Decimal)">
            <summary>
            Writes the specified value.
            </summary>
            <param name="value">The value.</param>
        </member>
        <member name="M:CommonTools.Web.JavaScript.JsonWriter.Write(System.Char)">
            <summary>
            Writes the specified value.
            </summary>
            <param name="value">The value.</param>
        </member>
        <member name="M:CommonTools.Web.JavaScript.JsonWriter.Write(System.TimeSpan)">
            <summary>
            Writes the specified value.
            </summary>
            <param name="value">The value.</param>
        </member>
        <member name="M:CommonTools.Web.JavaScript.JsonWriter.Write(System.Uri)">
            <summary>
            Writes the specified value.
            </summary>
            <param name="value">The value.</param>
        </member>
        <member name="M:CommonTools.Web.JavaScript.JsonWriter.Write(System.Version)">
            <summary>
            Writes the specified value.
            </summary>
            <param name="value">The value.</param>
        </member>
        <member name="M:CommonTools.Web.JavaScript.JsonWriter.Write(System.Xml.XmlNode)">
            <summary>
            Writes the specified value.
            </summary>
            <param name="value">The value.</param>
        </member>
        <member name="M:CommonTools.Web.JavaScript.JsonWriter.WriteArray(System.Collections.IEnumerable)">
            <summary>
            Writes the array.
            </summary>
            <param name="value">The value.</param>
        </member>
        <member name="M:CommonTools.Web.JavaScript.JsonWriter.WriteObject(System.Collections.IDictionary)">
            <summary>
            Writes the object.
            </summary>
            <param name="value">The value.</param>
        </member>
        <member name="M:CommonTools.Web.JavaScript.JsonWriter.WriteObject(System.Object)">
            <summary>
            Writes the object.
            </summary>
            <param name="value">The value.</param>
        </member>
        <member name="M:CommonTools.Web.JavaScript.JsonWriter.WriteLine">
            <summary>
            Writes the line.
            </summary>
        </member>
        <member name="M:CommonTools.Web.JavaScript.JsonWriter.IsIgnored(System.Type,System.Reflection.MemberInfo,System.Object)">
            <summary>
            Determines if the property or field should not be serialized.
            </summary>
            <param name="objType">Type of the obj.</param>
            <param name="member">The member.</param>
            <param name="obj">The obj.</param>
            <returns>
            	<c>true</c> if the specified obj type is ignored; otherwise, <c>false</c>.
            </returns>
            <remarks>
            Checks these in order, if any returns true then this is true:
            - is flagged with the JsonIgnoreAttribute property
            - has a JsonSpecifiedProperty which returns false
            </remarks>
        </member>
        <member name="M:CommonTools.Web.JavaScript.JsonWriter.IsDefaultValue(System.Reflection.MemberInfo,System.Object)">
            <summary>
            Determines if the member value matches the DefaultValue attribute
            </summary>
            <returns>if has a value equivalent to the DefaultValueAttribute</returns>
        </member>
        <member name="M:CommonTools.Web.JavaScript.JsonWriter.GetFlagList(System.Type,System.Object)">
            <summary>
            Splits a bitwise-OR'd set of enums into a list.
            </summary>
            <param name="enumType">the enum type</param>
            <param name="value">the combined value</param>
            <returns>list of flag enums</returns>
            <remarks>
            from PseudoCode.EnumHelper
            </remarks>
        </member>
        <member name="P:CommonTools.Web.JavaScript.JsonWriter.TypeHintName">
            <summary>
            Gets and sets the property name used for type hinting.
            </summary>
        </member>
        <member name="P:CommonTools.Web.JavaScript.JsonWriter.PrettyPrint">
            <summary>
            Gets and sets if JSON will be formatted for human reading.
            </summary>
        </member>
        <member name="P:CommonTools.Web.JavaScript.JsonWriter.Tab">
            <summary>
            Gets and sets the string to use for indentation
            </summary>
        </member>
        <member name="P:CommonTools.Web.JavaScript.JsonWriter.NewLine">
            <summary>
            Gets and sets the lien terminator string
            </summary>
        </member>
        <member name="P:CommonTools.Web.JavaScript.JsonWriter.UseXmlSerializationAttributes">
            <summary>
            Gets and sets if should use XmlSerialization Attributes.
            </summary>
            <remarks>
            Respects XmlIgnoreAttribute, ...
            </remarks>
        </member>
        <member name="P:CommonTools.Web.JavaScript.JsonWriter.StrictConformance">
            <summary>
            Gets and sets if should conform strictly to JSON spec.
            </summary>
            <remarks>
            Setting to true causes NaN, Infinity, -Infinity to serialize as null.
            </remarks>
        </member>
        <member name="P:CommonTools.Web.JavaScript.JsonWriter.SkipNullValue">
            <summary>
            Gets or sets a value indicating whether [skip null value].
            </summary>
            <value><c>true</c> if [skip null value]; otherwise, <c>false</c>.</value>
        </member>
        <member name="T:CommonTools.Web.JavaScript.JsonReader">
            <summary>
            Reader for consuming JSON data
            </summary>
        </member>
        <member name="M:CommonTools.Web.JavaScript.JsonReader.#ctor(System.IO.TextReader)">
            <summary>
            Ctor.
            </summary>
            <param name="input">TextReader containing source</param>
        </member>
        <member name="M:CommonTools.Web.JavaScript.JsonReader.#ctor(System.IO.Stream)">
            <summary>
            Ctor.
            </summary>
            <param name="input">Stream containing source</param>
        </member>
        <member name="M:CommonTools.Web.JavaScript.JsonReader.#ctor(System.String)">
            <summary>
            Ctor.
            </summary>
            <param name="input">string containing source</param>
        </member>
        <member name="M:CommonTools.Web.JavaScript.JsonReader.#ctor(System.Text.StringBuilder)">
            <summary>
            Ctor.
            </summary>
            <param name="input">StringBuilder containing source</param>
        </member>
        <member name="M:CommonTools.Web.JavaScript.JsonReader.Deserialize">
            <summary>
            Convert from JSON string to Object graph
            </summary>
            <returns></returns>
        </member>
        <member name="M:CommonTools.Web.JavaScript.JsonReader.Deserialize(System.Type)">
            <summary>
            Convert from JSON string to Object graph of specific Type
            </summary>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="M:CommonTools.Web.JavaScript.JsonReader.ProcessTypeHint(System.Type@,System.Collections.Generic.Dictionary{System.String,System.Reflection.MemberInfo}@,System.Collections.IDictionary,System.String)">
            <summary>
            If a Type Hint is present then this method attempts to
            use it and move any previously parsed data over.
            </summary>
            <param name="objectType">reference to the objectType</param>
            <param name="memberMap">reference to the memberMap</param>
            <param name="result">the previous result</param>
            <param name="typeInfo">the type info string to use</param>
            <returns></returns>
        </member>
        <member name="M:CommonTools.Web.JavaScript.JsonReader.SetMemberValue(System.Object,System.Type,System.Reflection.MemberInfo,System.Object)">
            <summary>
            Helper method to set value of either property or field
            </summary>
            <param name="result"></param>
            <param name="memberType"></param>
            <param name="memberInfo"></param>
            <param name="value"></param>
        </member>
        <member name="M:CommonTools.Web.JavaScript.JsonReader.CoerceType(System.Type,System.Object)">
            <summary>
            Coerces the type.
            </summary>
            <param name="targetType">Type of the target.</param>
            <param name="value">The value.</param>
            <returns></returns>
        </member>
        <member name="M:CommonTools.Web.JavaScript.JsonReader.MatchLiteral(System.String)">
            <summary>
            Determines if the next token is the given literal
            </summary>
            <param name="literal"></param>
            <returns></returns>
        </member>
        <member name="P:CommonTools.Web.JavaScript.JsonReader.AllowNullValueTypes">
            <summary>
            Gets and sets if ValueTypes can accept values of null
            </summary>
            <remarks>
            Only affects deserialization: if a ValueType is assigned the
            value of null, it will receive the value default(TheType).
            Setting this to false, throws an exception if null is
            specified for a ValueType member.
            </remarks>
        </member>
        <member name="P:CommonTools.Web.JavaScript.JsonReader.TypeHintName">
            <summary>
            Gets and sets the property name used for type hinting.
            </summary>
        </member>
        <member name="T:CommonTools.QuoteReplacementMode">
            <summary>
            
            </summary>
        </member>
        <member name="F:CommonTools.QuoteReplacementMode.ReplaceSingleQuotes">
            <summary>
            
            </summary>
        </member>
        <member name="F:CommonTools.QuoteReplacementMode.ReplaceDoubleQuotes">
            <summary>
            
            </summary>
        </member>
        <member name="T:CommonTools.Components.Mathematics.Statistics">
            <summary>
            
            </summary>
        </member>
        <member name="M:CommonTools.Components.Mathematics.Statistics.GetMedian(System.Collections.Generic.IEnumerable{System.Double})">
            <summary>
            Gets the median.
            </summary>
            <param name="records">The records.</param>
            <returns></returns>
        </member>
        <member name="M:CommonTools.Components.Mathematics.Statistics.GetMedian(System.Collections.Generic.IEnumerable{System.Int32})">
            <summary>
            Gets the median.
            </summary>
            <param name="records">The records.</param>
            <returns></returns>
        </member>
        <member name="M:CommonTools.Components.Mathematics.Statistics.GetMedian(System.Collections.Generic.IEnumerable{System.Int64})">
            <summary>
            Gets the median.
            </summary>
            <param name="records">The records.</param>
            <returns></returns>
        </member>
        <member name="M:CommonTools.Components.Mathematics.Statistics.GetMedian(System.Collections.Generic.IEnumerable{System.Decimal})">
            <summary>
            Gets the median.
            </summary>
            <param name="records">The records.</param>
            <returns></returns>
        </member>
        <member name="M:CommonTools.Components.Mathematics.Statistics.GetMedian(System.Collections.Generic.IEnumerable{System.Single})">
            <summary>
            Gets the median.
            </summary>
            <param name="records">The records.</param>
            <returns></returns>
        </member>
        <member name="M:CommonTools.Components.Mathematics.Statistics.CalculateVariance(System.Collections.Generic.IEnumerable{System.Double})">
            <summary>
            Calculates the variance.
            </summary>
            <param name="values">The values.</param>
            <returns></returns>
        </member>
        <member name="M:CommonTools.Components.Mathematics.Statistics.CalculateVariance(System.Collections.Generic.IEnumerable{System.Decimal})">
            <summary>
            Calculates the variance.
            </summary>
            <param name="values">The values.</param>
            <returns></returns>
        </member>
        <member name="M:CommonTools.Components.Mathematics.Statistics.CalculateVariance(System.Collections.Generic.IEnumerable{System.Int32})">
            <summary>
            Calculates the variance.
            </summary>
            <param name="values">The values.</param>
            <returns></returns>
        </member>
        <member name="M:CommonTools.Components.Mathematics.Statistics.CalculateVariance(System.Collections.Generic.IEnumerable{System.Int64})">
            <summary>
            Calculates the variance.
            </summary>
            <param name="values">The values.</param>
            <returns></returns>
        </member>
        <member name="M:CommonTools.Components.Mathematics.Statistics.CalculateVariance(System.Collections.Generic.IEnumerable{System.Single})">
            <summary>
            Calculates the variance.
            </summary>
            <param name="values">The values.</param>
            <returns></returns>
        </member>
        <member name="M:CommonTools.Components.Mathematics.Statistics.CalculateStandardDeviation(System.Collections.Generic.IEnumerable{System.Double})">
            <summary>
            Calculates the standard deviation.
            </summary>
            <param name="values">The values.</param>
            <returns></returns>
        </member>
        <member name="M:CommonTools.Components.Mathematics.Statistics.CalculateStandardDeviation(System.Collections.Generic.IEnumerable{System.Decimal})">
            <summary>
            Calculates the standard deviation.
            </summary>
            <param name="values">The values.</param>
            <returns></returns>
        </member>
        <member name="M:CommonTools.Components.Mathematics.Statistics.CalculateStandardDeviation(System.Collections.Generic.IEnumerable{System.Int32})">
            <summary>
            Calculates the standard deviation.
            </summary>
            <param name="values">The values.</param>
            <returns></returns>
        </member>
        <member name="M:CommonTools.Components.Mathematics.Statistics.CalculateStandardDeviation(System.Collections.Generic.IEnumerable{System.Int64})">
            <summary>
            Calculates the standard deviation.
            </summary>
            <param name="values">The values.</param>
            <returns></returns>
        </member>
        <member name="M:CommonTools.Components.Mathematics.Statistics.CalculateStandardDeviation(System.Collections.Generic.IEnumerable{System.Single})">
            <summary>
            Calculates the standard deviation.
            </summary>
            <param name="values">The values.</param>
            <returns></returns>
        </member>
        <member name="M:CommonTools.Components.Mathematics.Statistics.CalculateMedianVariance(System.Collections.Generic.IEnumerable{System.Double})">
            <summary>
            Calculates the median variance.
            </summary>
            <param name="values">The values.</param>
            <returns></returns>
        </member>
        <member name="M:CommonTools.Components.Mathematics.Statistics.CalculateMedianVariance(System.Collections.Generic.IEnumerable{System.Decimal})">
            <summary>
            Calculates the median variance.
            </summary>
            <param name="values">The values.</param>
            <returns></returns>
        </member>
        <member name="M:CommonTools.Components.Mathematics.Statistics.CalculateMedianVariance(System.Collections.Generic.IEnumerable{System.Int32})">
            <summary>
            Calculates the median variance.
            </summary>
            <param name="values">The values.</param>
            <returns></returns>
        </member>
        <member name="M:CommonTools.Components.Mathematics.Statistics.CalculateMedianVariance(System.Collections.Generic.IEnumerable{System.Int64})">
            <summary>
            Calculates the median variance.
            </summary>
            <param name="values">The values.</param>
            <returns></returns>
        </member>
        <member name="M:CommonTools.Components.Mathematics.Statistics.CalculateMedianVariance(System.Collections.Generic.IEnumerable{System.Single})">
            <summary>
            Calculates the median variance.
            </summary>
            <param name="values">The values.</param>
            <returns></returns>
        </member>
        <member name="M:CommonTools.Components.Mathematics.Statistics.CalculateMedianAbsoluteDeviation(System.Collections.Generic.IEnumerable{System.Double})">
            <summary>
            Calculates the median absolute deviation.
            </summary>
            <param name="values">The values.</param>
            <returns></returns>
        </member>
        <member name="M:CommonTools.Components.Mathematics.Statistics.CalculateMedianAbsoluteDeviation(System.Collections.Generic.IEnumerable{System.Decimal})">
            <summary>
            Calculates the median absolute deviation.
            </summary>
            <param name="values">The values.</param>
            <returns></returns>
        </member>
        <member name="M:CommonTools.Components.Mathematics.Statistics.CalculateMedianAbsoluteDeviation(System.Collections.Generic.IEnumerable{System.Int32})">
            <summary>
            Calculates the median absolute deviation.
            </summary>
            <param name="values">The values.</param>
            <returns></returns>
        </member>
        <member name="M:CommonTools.Components.Mathematics.Statistics.CalculateMedianAbsoluteDeviation(System.Collections.Generic.IEnumerable{System.Int64})">
            <summary>
            Calculates the median absolute deviation.
            </summary>
            <param name="values">The values.</param>
            <returns></returns>
        </member>
        <member name="M:CommonTools.Components.Mathematics.Statistics.CalculateMedianAbsoluteDeviation(System.Collections.Generic.IEnumerable{System.Single})">
            <summary>
            Calculates the median absolute deviation.
            </summary>
            <param name="values">The values.</param>
            <returns></returns>
        </member>
        <member name="M:CommonTools.Components.Mathematics.Statistics.CalculateCovariance(System.Collections.Generic.IEnumerable{System.Double},System.Collections.Generic.IEnumerable{System.Double})">
            <summary>
            Calculates the covariance of two sets
            </summary>
            <param name="a">Set A</param>
            <param name="b">Set B</param>
            <returns></returns>
        </member>
        <member name="M:CommonTools.Components.Mathematics.Statistics.CalculateCovariance(System.Collections.Generic.IEnumerable{System.Decimal},System.Collections.Generic.IEnumerable{System.Decimal})">
            <summary>
            Calculates the covariance of two sets
            </summary>
            <param name="a">Set A</param>
            <param name="b">Set B</param>
            <returns></returns>
        </member>
        <member name="M:CommonTools.Components.Mathematics.Statistics.CalculateCovariance(System.Collections.Generic.IEnumerable{System.Int32},System.Collections.Generic.IEnumerable{System.Int32})">
            <summary>
            Calculates the covariance of two sets
            </summary>
            <param name="a">Set A</param>
            <param name="b">Set B</param>
            <returns></returns>
        </member>
        <member name="M:CommonTools.Components.Mathematics.Statistics.CalculateCovariance(System.Collections.Generic.IEnumerable{System.Int64},System.Collections.Generic.IEnumerable{System.Int64})">
            <summary>
            Calculates the covariance of two sets
            </summary>
            <param name="a">Set A</param>
            <param name="b">Set B</param>
            <returns></returns>
        </member>
        <member name="M:CommonTools.Components.Mathematics.Statistics.CalculateCovariance(System.Collections.Generic.IEnumerable{System.Single},System.Collections.Generic.IEnumerable{System.Single})">
            <summary>
            Calculates the covariance of two sets
            </summary>
            <param name="a">Set A</param>
            <param name="b">Set B</param>
            <returns></returns>
        </member>
        <member name="T:CommonTools.Components.Flash.OpenFlashChart.ChartStylableTextElement">
            <summary>
            
            </summary>
        </member>
        <member name="M:CommonTools.Components.Flash.OpenFlashChart.ChartStylableTextElement.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:CommonTools.Components.Flash.OpenFlashChart.ChartStylableTextElement"/> class.
            </summary>
            <param name="text">The text.</param>
        </member>
        <member name="M:CommonTools.Components.Flash.OpenFlashChart.ChartStylableTextElement.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:CommonTools.Components.Flash.OpenFlashChart.ChartStylableTextElement"/> class.
            </summary>
            <param name="text">The text.</param>
            <param name="style">The style.</param>
        </member>
        <member name="P:CommonTools.Components.Flash.OpenFlashChart.ChartStylableTextElement.Style">
            <summary>
            Gets or sets the style. E.g.: {font-size: 20px; color:#0000ff; font-family: Verdana; text-align: center;}
            </summary>
            <value>The style.</value>
        </member>
        <member name="T:CommonTools.Components.Caching.ClusteredCachingSynchronizationStatus">
            <summary>
            
            </summary>
        </member>
        <member name="F:CommonTools.Components.Caching.ClusteredCachingSynchronizationStatus.RemovedFromCollection">
            <summary>
            This item does not exist at the sql cache synchronization database any more
            </summary>
        </member>
        <member name="F:CommonTools.Components.Caching.ClusteredCachingSynchronizationStatus.OutOfDate">
            <summary>
            The HttpRuntime.Cache item is out of date
            </summary>
        </member>
        <member name="F:CommonTools.Components.Caching.ClusteredCachingSynchronizationStatus.UpToDate">
            <summary>
            The HttpRuntime.Cache item is up to date
            </summary>
        </member>
        <member name="F:CommonTools.Components.Caching.ClusteredCachingSynchronizationStatus.NotFound">
            <summary>
            The item was not found at the HttpRuntime.Cache collection
            </summary>
        </member>
        <member name="T:CommonTools.Components.Caching.CacheKeySqlDependency">
            <summary>
            Struct used for the ClusteredCacheManager
            </summary>
        </member>
        <member name="T:CommonTools.Components.BusinessTier.ValidationStatus">
            <summary>
            The validation status.
            </summary>
        </member>
        <member name="F:CommonTools.Components.BusinessTier.ValidationStatus.Valid">
            <summary>
            Valid
            </summary>
        </member>
        <member name="F:CommonTools.Components.BusinessTier.ValidationStatus.NotAllPropertiesValid">
            <summary>
            Not all properties were valid.
            </summary>        
        </member>
        <member name="F:CommonTools.Components.BusinessTier.ValidationStatus.NotAllMandatoryFieldsProvided">
            <summary>
            Fields marked with BusinessObjectPropertyAttribute.IsMandatoryForInstance = true 
            need to be set before the object is allowed to be created at database
            </summary>  
        </member>
        <member name="F:CommonTools.Components.BusinessTier.ValidationStatus.NullReference">
            <summary>
            
            </summary>
        </member>
        <member name="F:CommonTools.Components.BusinessTier.ValidationStatus.ValidationFailed">
            <summary>
            used with custom errors
            </summary>
        </member>
        <member name="T:CommonTools.Web.Navigation.FormattedRedirectRule">
            <summary>
            
            </summary>
        </member>
        <member name="T:CommonTools.Web.Navigation.RedirectRule">
            <summary>
            This struct exposes properties that represent a redirect rule
            </summary>
        </member>
        <member name="M:CommonTools.Web.Navigation.RedirectRule.#ctor(System.String,System.String,System.String,System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:CommonTools.Web.Navigation.RedirectRule"/> class.
            </summary>
            <param name="name">The name.</param>
            <param name="url">The URL.</param>
            <param name="vanity">The vanity.</param>
            <param name="pattern">The pattern.</param>
            <param name="path">The path.</param>
        </member>
        <member name="M:CommonTools.Web.Navigation.RedirectRule.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:CommonTools.Web.Navigation.RedirectRule"/> class.
            </summary>
        </member>
        <member name="P:CommonTools.Web.Navigation.RedirectRule.Pattern">
            <summary>
            Gets the pattern.
            </summary>
            <value>The pattern.</value>
        </member>
        <member name="P:CommonTools.Web.Navigation.RedirectRule.Url">
            <summary>
            Gets the URL.
            </summary>
            <value>The URL.</value>
        </member>
        <member name="P:CommonTools.Web.Navigation.RedirectRule.Vanity">
            <summary>
            Gets the vanity.
            </summary>
            <value>The vanity.</value>
        </member>
        <member name="P:CommonTools.Web.Navigation.RedirectRule.Path">
            <summary>
            Gets the path.
            </summary>
            <value>The path.</value>
        </member>
        <member name="P:CommonTools.Web.Navigation.RedirectRule.Name">
            <summary>
            Gets the name of the <see cref="T:CommonTools.Web.Navigation.IUrlRewriteItem"/>.
            </summary>
            <value>The name.</value>
        </member>
        <member name="P:CommonTools.Web.Navigation.RedirectRule.ParentName">
            <summary>
            Gets the name of the <see cref="T:CommonTools.Web.Navigation.IUrlRewriteItem"/>.
            </summary>
            <value>The name.</value>
        </member>
        <member name="P:CommonTools.Web.Navigation.RedirectRule.FullVirtualPath">
            <summary>
            Gets the name of the <see cref="T:CommonTools.Web.Navigation.IUrlRewriteItem"/>.
            </summary>
            <value>The name.</value>
        </member>
        <member name="P:CommonTools.Web.Navigation.RedirectRule.BreadcrumbTitle">
            <summary>
            Gets the breadcrumb title.
            </summary>
            <value>The breadcrumb title.</value>
        </member>
        <member name="P:CommonTools.Web.Navigation.RedirectRule.Title">
            <summary>
            Gets or sets the title of the page.
            </summary>
            <value>The title.</value>
        </member>
        <member name="P:CommonTools.Web.Navigation.RedirectRule.IsHttps">
            <summary>
            Gets a value indicating whether this instance is HTTPS.
            </summary>
            <value><c>true</c> if this instance is HTTPS; otherwise, <c>false</c>.</value>
        </member>
        <member name="M:CommonTools.Web.Navigation.FormattedRedirectRule.#ctor(CommonTools.Web.Navigation.IUrlRewriteItem)">
            <summary>
            Initializes a new instance of the <see cref="T:CommonTools.Web.Navigation.FormattedRedirectRule"/> class.
            </summary>
            <param name="item">The item.</param>
        </member>
        <member name="M:CommonTools.Web.Navigation.FormattedRedirectRule.#ctor(System.Web.SiteMapNode)">
            <summary>
            Initializes a new instance of the <see cref="T:CommonTools.Web.Navigation.FormattedRedirectRule"/> class.
            </summary>
            <param name="node">The node.</param>
        </member>
        <member name="T:CommonTools.Web.Navigation.SiteMapManager">
            <summary>
            This class provides utility methods that can be used with sitemap objects.
            </summary>
        </member>
        <member name="M:CommonTools.Web.Navigation.SiteMapManager.ResolveRewriteItem(CommonTools.Web.Navigation.IUrlRewriteItem)">
            <summary>
            Resolves the rewrite item.
            </summary>
            <param name="item">The item.</param>
            <returns>
            A resolved url path, string.Empty if an error occurred
            </returns>
        </member>
        <member name="M:CommonTools.Web.Navigation.SiteMapManager.ResolveRewriteItem(CommonTools.Web.Navigation.IUrlRewriteItem,System.Object[])">
            <summary>
            Resolves the rewrite item.
            </summary>
            <param name="item">The item.</param>
            <param name="args">The args to format the resulting string with.</param>
            <returns>
            A resolved url path, string.Empty if an error occurred
            </returns>
        </member>
        <member name="M:CommonTools.Web.Navigation.SiteMapManager.ResolveRewriteItem(System.Web.HttpContext,System.Web.UI.Control,System.String,CommonTools.Web.Navigation.IUrlRewriteItem)">
            <summary>
            Resolves the rewrite item.
            </summary>
            <param name="item">The item.</param>
            <param name="host">The host (www.mysite.com).</param>
            <param name="context">The current context.</param>
            <param name="control">The sending control control.</param>
            <returns>
            A resolved url path, string.Empty if an error occurred
            </returns>
        </member>
        <member name="M:CommonTools.Web.Navigation.SiteMapManager.ResolveRewriteItem(System.Web.HttpContext,System.Web.UI.Control,CommonTools.Web.Navigation.IUrlRewriteItem)">
            <summary>
            Resolves the rewrite item.
            </summary>
            <param name="item">The item.</param>
            <param name="context">The current context.</param>
            <param name="control">The sending control control.</param>
            <returns>
            A resolved url path, string.Empty if an error occurred
            </returns>
        </member>
        <member name="M:CommonTools.Web.Navigation.SiteMapManager.ResolveRewriteItem(System.Web.HttpContext,System.Web.UI.Control,CommonTools.Web.Navigation.IUrlRewriteItem,System.Object[])">
            <summary>
            Resolves the rewrite item.
            </summary>
            <param name="item">The item.</param>
            <param name="context">The current context.</param>
            <param name="control">The sending control control.</param>
            <param name="args">The args to format the resulting string with.</param>
            <returns>
            A resolved url path, string.Empty if an error occurred
            </returns>
        </member>
        <member name="M:CommonTools.Web.Navigation.SiteMapManager.ResolveRewriteItem(System.Web.HttpContext,System.Web.UI.Control,System.String,CommonTools.Web.Navigation.IUrlRewriteItem,System.Object[])">
            <summary>
            Resolves the rewrite item.
            </summary>
            <param name="item">The item.</param>
            <param name="host">The host (www.mysite.com).</param>
            <param name="context">The current context.</param>
            <param name="control">The sending control control.</param>
            <param name="args">The args to format the resulting string with.</param>
            <returns>
            A resolved url path, string.Empty if an error occurred
            </returns>
        </member>
        <member name="M:CommonTools.Web.Navigation.SiteMapManager.ResolveItem(System.String,System.Web.HttpContext,System.Web.UI.Control,CommonTools.Web.Navigation.IUrlRewriteItem,System.Object[])">
            <summary>
            Resolves the rewrite item.
            </summary>
            <param name="item">The item.</param>
            <param name="host">The host (www.mysite.com).</param>
            <param name="context">The current context.</param>
            <param name="control">The sending control control.</param>
            <param name="args">The args to format the resulting string with.</param>
            <returns>
            A resolved url path, string.Empty if an error occurred
            </returns>
        </member>
        <member name="T:CommonTools.Web.Navigation.SiteMapItemPropertyAttribute">
            <summary>
            This class contains all site map item property attribute related data
            </summary>
        </member>
        <member name="M:CommonTools.Web.Navigation.SiteMapItemPropertyAttribute.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:CommonTools.Web.Navigation.SiteMapItemPropertyAttribute"/> class.
            </summary>
            <param name="propertyName">Name of the property.</param>
        </member>
        <member name="P:CommonTools.Web.Navigation.SiteMapItemPropertyAttribute.PropertyName">
            <summary>
            Gets or sets the name of the attribute.
            </summary>
            <value>The name of the attribute.</value>
        </member>
        <member name="T:CommonTools.Web.JavaScript.JsonIgnoreAttribute">
            <summary>
            Designates a property or field to not be serialized.
            </summary>
        </member>
        <member name="M:CommonTools.Web.JavaScript.JsonIgnoreAttribute.IsJsonIgnore(System.Object)">
            <summary>
            Gets a value which indicates if should be ignored in Json serialization.
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:CommonTools.Web.JavaScript.JsonIgnoreAttribute.IsXmlIgnore(System.Object)">
            <summary>
            Gets a value which indicates if should be ignored in Json serialization.
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="T:CommonTools.Extensions.DateTimeRoundingAccuracy">
            <summary>
            
            </summary>
        </member>
        <member name="F:CommonTools.Extensions.DateTimeRoundingAccuracy.Millisecond">
            <summary>
            
            </summary>
        </member>
        <member name="F:CommonTools.Extensions.DateTimeRoundingAccuracy.Second">
            <summary>
            
            </summary>
        </member>
        <member name="F:CommonTools.Extensions.DateTimeRoundingAccuracy.Minute">
            <summary>
            
            </summary>
        </member>
        <member name="F:CommonTools.Extensions.DateTimeRoundingAccuracy.Hour">
            <summary>
            
            </summary>
        </member>
        <member name="F:CommonTools.Extensions.DateTimeRoundingAccuracy.Day">
            <summary>
            
            </summary>
        </member>
        <member name="F:CommonTools.Extensions.DateTimeRoundingAccuracy.Month">
            <summary>
            
            </summary>
        </member>
        <member name="T:CommonTools.Components.Caching.CacheSection">
            <summary>
            Provides the handler for the cache section of app.config.
            </summary>
        </member>
        <member name="M:CommonTools.Components.Caching.CacheSection.CreateCacheControllerInstance">
            <summary>
            Creates an instance of this object's default controller.
            </summary>
            <returns></returns>
        </member>
        <member name="M:CommonTools.Components.Caching.CacheSection.GetCacheItem(System.String)">
            <summary>
            Gets the cache item.
            </summary>
            <param name="key">The key.</param>
            <returns></returns>
        </member>
        <member name="P:CommonTools.Components.Caching.CacheSection.CacheElementCollection">
            <summary>
            holds the collection of cache objects in the app.config.
            </summary>
        </member>
        <member name="P:CommonTools.Components.Caching.CacheSection.CacheControllerType">
            <summary>
            The number of minutes to hold the cached object.
            </summary>
        </member>
        <member name="P:CommonTools.Components.Caching.CacheSection.CacheItems">
            <summary>
            Gets the ICacheItem collection associated with this ICacheController.
            </summary>
            <value>The cache items.</value>
        </member>
        <member name="P:CommonTools.Components.Caching.CacheSection.Minutes">
            <summary>
            Gets the amount of minutes to cache all ICacheItems at this object's ICacheItem collection. This value can be overwritten
            by the ICacheItem itself.
            </summary>
            <value>The minutes.</value>
        </member>
        <member name="P:CommonTools.Components.Caching.CacheSection.Enabled">
            <summary>
            Gets a value indicating whether to enable caching or not. If this is set to false, no ICacheItem at the ICacheItem collection
            can use the HttpRuntime cache.
            </summary>
            <value><c>true</c> if enabled; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:CommonTools.Components.Caching.CacheSection.ContinuousAccessStaleKeySuffixForMemcached">
            <summary>
            Gets the continuous access stale key suffix for memcached.
            </summary>
            <value>The continuous access stale key suffix for memcached.</value>
        </member>
        <member name="T:CommonTools.Components.Caching.CacheElements">
            <summary>
            Provides the handler for each individual cache node in the cache section of app.config.
            </summary>
        </member>
        <member name="M:CommonTools.Components.Caching.CacheElements.CreateNewElement">
            <summary>
            Overridden. Creates a new CacheElement.
            </summary>
            <returns></returns>
        </member>
        <member name="M:CommonTools.Components.Caching.CacheElements.GetElementKey(System.Configuration.ConfigurationElement)">
            <summary>
            Overridden. Retrieves the specified cache element name for the given weak typed node.
            </summary>
            <param name="element">The node in app.config</param>
            <returns>The cache element name located at the configuration element.</returns>
        </member>
        <member name="P:CommonTools.Components.Caching.CacheElements.ContinuousAccessStaleKeySuffixForMemcached">
            <summary>
            Gets the continuous access stale key suffix for memcached.
            </summary>
            <value>The continuous access stale key suffix for memcached.</value>
        </member>
        <member name="P:CommonTools.Components.Caching.CacheElements.Minutes">
            <summary>
            The number of minutes to hold the cached object.
            </summary>
        </member>
        <member name="P:CommonTools.Components.Caching.CacheElements.Enabled">
            <summary>
            Whether the cache object is cached.
            </summary>
        </member>
        <member name="T:CommonTools.Components.Caching.CacheElement">
            <summary>
            Provides the cache element object as specified through app.config.
            </summary>
        </member>
        <member name="P:CommonTools.Components.Caching.CacheElement.Enabled">
            <summary>
            Whether this cache element is enabled.
            </summary>
        </member>
        <member name="P:CommonTools.Components.Caching.CacheElement.Minutes">
            <summary>
            The number of minutes before the cache item is expired. A default value of -1 means that
            the object never expires.
            </summary>
        </member>
        <member name="P:CommonTools.Components.Caching.CacheElement.Seconds">
            <summary>
            The number of minutes before the cache item is expired. A default value of -1 means that
            the object never expires.
            </summary>
        </member>
        <member name="P:CommonTools.Components.Caching.CacheElement.Suffix">
            <summary>
            A suffix to uniquely identify the cache type.
            </summary>
        </member>
        <member name="P:CommonTools.Components.Caching.CacheElement.IsIterating">
            <summary>
            Determines whether the cache element is an enumerable cache object.
            </summary>
        </member>
        <member name="P:CommonTools.Components.Caching.CacheElement.IsClustered">
            <summary>
            Gets a value indicating whether this instance is clustered.
            </summary>
            <value>
            	<c>true</c> if this instance is clustered; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:CommonTools.Components.Caching.CacheElement.Name">
            <summary>
            The name of the cache object.
            </summary>
        </member>
        <member name="P:CommonTools.Components.Caching.CacheElement.CacheKey">
            <summary>
            The cache key the element depends on.
            </summary>
        </member>
        <member name="P:CommonTools.Components.Caching.CacheElement.CacheItemPriority">
            <summary>
            Priority of the cache item.
            </summary>
        </member>
        <member name="P:CommonTools.Components.Caching.CacheElement.LifeSpan">
            <summary>
            Gets the life span.
            </summary>
            <value>The life span.</value>
        </member>
        <member name="P:CommonTools.Components.Caching.CacheElement.IsMemcached">
            <summary>
            Gets a value indicating whether this instance is memcached.
            </summary>
            <value>
            	<c>true</c> if this instance is memcached; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:CommonTools.Components.Caching.CacheElement.UseProtocolBufferSerialization">
            <summary>
            Gets a value indicating whether to use protocol buffer serialization for memcached objects. This serialization technique
            has an average performance increase of about 20%, but the specified object must be decorated with ProtoContract attricutes.
            </summary>
            <value>
            	<c>true</c> if [use protocol buffer serialization]; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:CommonTools.Components.Caching.CacheElement.ContinuousAccessExtendedLifeSpan">
            <summary>
            Gets the time indicating for how long an object should linger in cache until the next call comes in which reloads the object
            on a separate thread. If an object has a lifespan of 10 minutes and the UseContinuousAccess flag is used, this property defines
            that the object should actually be cached for 10 minutes + ContinuousAccessExtendedLifeSpan. If a request comes in after the
            official expiry date (10 min), the object will be reloaded on a separate thread and then inserted into cache.
            While loading, the stale object which is still on its "extended lifespan" will be returned so no Dog Pile Effect can
            occur.
            </summary>
            <value>The continuous access extended life span.</value>
        </member>
        <member name="P:CommonTools.Components.Caching.CacheElement.UseContinuousAccess">
            <summary>
            Gets a value indicating whether [use continuous access].
            </summary>
            <value><c>true</c> if [use continuous access]; otherwise, <c>false</c>.</value>
        </member>
        <member name="T:CommonTools.Core.CompareHelper">
            <summary>
            This class contains all compare helper related data
            </summary>
        </member>
        <member name="M:CommonTools.Core.CompareHelper.HaveEqualItems``1(System.Collections.Generic.List{``0},System.Collections.Generic.List{``0})">
            <summary>
            Haves the equal items.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="a">A.</param>
            <param name="b">The b.</param>
            <returns></returns>
        </member>
        <member name="T:CommonTools.Core.CatastrophicException">
            <summary>
            
            </summary>
        </member>
        <member name="M:CommonTools.Core.CatastrophicException.#ctor(System.Exception,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:CommonTools.Core.CatastrophicException"/> class.
            </summary>
            <param name="innerException">The inner exception.</param>
            <param name="isLogged">if set to <c>true</c> [is logged].</param>
        </member>
        <member name="M:CommonTools.Core.CatastrophicException.#ctor(System.String,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:CommonTools.Core.CatastrophicException"/> class.
            </summary>
            <param name="message">The message.</param>
            <param name="isLogged">if set to <c>true</c> [is logged].</param>
        </member>
        <member name="M:CommonTools.Core.CatastrophicException.#ctor(System.String,System.Exception,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:CommonTools.Core.CatastrophicException"/> class.
            </summary>
            <param name="message">The message.</param>
            <param name="innerException">The inner exception.</param>
            <param name="isLogged">if set to <c>true</c> [is logged].</param>
        </member>
        <member name="P:CommonTools.Core.CatastrophicException.IsLogged">
            <summary>
            Gets or sets a value indicating whether this exception is logged.
            </summary>
            <value><c>true</c> if this instance is logged; otherwise, <c>false</c>.</value>
        </member>
        <member name="M:CommonTools.Components.Flash.OpenFlashChart.EnumUtility.GetChartTypeString(CommonTools.Components.Flash.OpenFlashChart.ChartType)">
            <summary>
            Gets the chart type string.
            </summary>
            <param name="chartType">Type of the chart.</param>
            <returns></returns>
        </member>
        <member name="M:CommonTools.Components.Flash.OpenFlashChart.EnumUtility.GetOrientationString(CommonTools.Components.Flash.OpenFlashChart.Orientation)">
            <summary>
            Gets the orientation string.
            </summary>
            <param name="orientation">The orientation.</param>
            <returns></returns>
        </member>
        <member name="M:CommonTools.Components.Flash.OpenFlashChart.EnumUtility.GetChartTypeFromLineChartType(CommonTools.Components.Flash.OpenFlashChart.LineChartType)">
            <summary>
            Gets the type of the chart type from line chart.
            </summary>
            <param name="lineChartType">Type of the line chart.</param>
            <returns></returns>
        </member>
        <member name="T:CommonTools.Components.Flash.OpenFlashChart.Charts.PieChartValue">
            <summary>
            
            </summary>
        </member>
        <member name="M:CommonTools.Components.Flash.OpenFlashChart.Charts.PieChartValue.#ctor(System.Decimal)">
            <summary>
            Initializes a new instance of the <see cref="T:CommonTools.Components.Flash.OpenFlashChart.Charts.PieChartValue"/> class.
            </summary>
            <param name="value">The value.</param>
        </member>
        <member name="M:CommonTools.Components.Flash.OpenFlashChart.Charts.PieChartValue.#ctor(System.Decimal,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:CommonTools.Components.Flash.OpenFlashChart.Charts.PieChartValue"/> class.
            </summary>
            <param name="value">The value.</param>
            <param name="label">The label.</param>
        </member>
        <member name="M:CommonTools.Components.Flash.OpenFlashChart.Charts.PieChartValue.#ctor(System.Decimal,System.String,System.String,System.String,System.Double)">
            <summary>
            Initializes a new instance of the <see cref="T:CommonTools.Components.Flash.OpenFlashChart.Charts.PieChartValue"/> class.
            </summary>
            <param name="value">The value.</param>
            <param name="label">The label.</param>
            <param name="colour">The colour.</param>
            <param name="labelColour">The label colour.</param>
            <param name="fontSize">Size of the font.</param>
        </member>
        <member name="P:CommonTools.Components.Flash.OpenFlashChart.Charts.PieChartValue.Label">
            <summary>
            Gets or sets the label.
            </summary>
            <value>The label.</value>
        </member>
        <member name="P:CommonTools.Components.Flash.OpenFlashChart.Charts.PieChartValue.Colour">
            <summary>
            Gets or sets the colour.
            </summary>
            <value>The colour.</value>
        </member>
        <member name="P:CommonTools.Components.Flash.OpenFlashChart.Charts.PieChartValue.LabelColour">
            <summary>
            Gets or sets the label colour.
            </summary>
            <value>The label colour.</value>
        </member>
        <member name="P:CommonTools.Components.Flash.OpenFlashChart.Charts.PieChartValue.FontSize">
            <summary>
            Gets or sets the size of the font.
            </summary>
            <value>The size of the font.</value>
        </member>
        <member name="T:CommonTools.Components.Flash.OpenFlashChart.AxisLabel">
            <summary>
            
            </summary>
        </member>
        <member name="M:CommonTools.Components.Flash.OpenFlashChart.AxisLabel.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:CommonTools.Components.Flash.OpenFlashChart.AxisLabel"/> class.
            </summary>
            <param name="visible">if set to <c>true</c> [visible].</param>
        </member>
        <member name="M:CommonTools.Components.Flash.OpenFlashChart.AxisLabel.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:CommonTools.Components.Flash.OpenFlashChart.AxisLabel"/> class.
            </summary>
        </member>
        <member name="M:CommonTools.Components.Flash.OpenFlashChart.AxisLabel.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:CommonTools.Components.Flash.OpenFlashChart.AxisLabel"/> class.
            </summary>
            <param name="text">The text.</param>
        </member>
        <member name="M:CommonTools.Components.Flash.OpenFlashChart.AxisLabel.#ctor(System.String,System.String,System.Int32,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:CommonTools.Components.Flash.OpenFlashChart.AxisLabel"/> class.
            </summary>
            <param name="text">The text.</param>
            <param name="colour">The colour.</param>
            <param name="size">The size.</param>
            <param name="visible">if set to <c>true</c> [visible].</param>
        </member>
        <member name="P:CommonTools.Components.Flash.OpenFlashChart.AxisLabel.Colour">
            <summary>
            Gets or sets the colour.
            </summary>
            <value>The colour.</value>
        </member>
        <member name="P:CommonTools.Components.Flash.OpenFlashChart.AxisLabel.Size">
            <summary>
            Gets or sets the size.
            </summary>
            <value>The size.</value>
        </member>
        <member name="P:CommonTools.Components.Flash.OpenFlashChart.AxisLabel.Visible">
            <summary>
            Gets or sets a value indicating whether this <see cref="T:CommonTools.Components.Flash.OpenFlashChart.AxisLabel"/> is visible.
            </summary>
            <value><c>true</c> if visible; otherwise, <c>false</c>.</value>
        </member>
        <member name="T:CommonTools.Components.BusinessTier.ObjectPropertyInfo">
            <summary>
            This class contains all object property info related data
            </summary>
        </member>
        <member name="M:CommonTools.Components.BusinessTier.ObjectPropertyInfo.#ctor(System.Reflection.PropertyInfo)">
            <summary>
            Initializes a new instance of the <see cref="T:CommonTools.Components.BusinessTier.ObjectPropertyInfo"/> class.
            </summary>
            <param name="propertyInfo">The property info.</param>
        </member>
        <member name="P:CommonTools.Components.BusinessTier.ObjectPropertyInfo.PropertyInfo">
            <summary>
            Gets or sets the property info.
            </summary>
            <value>The property info.</value>
        </member>
        <member name="P:CommonTools.Components.BusinessTier.ObjectPropertyInfo.BusinessObjectPropertyAttribute">
            <summary>
            Gets or sets the business object property attribute.
            </summary>
            <value>The business object property attribute.</value>
        </member>
        <member name="P:CommonTools.Components.BusinessTier.ObjectPropertyInfo.BusinessObjectValidationAttribute">
            <summary>
            Gets or sets the business object validation attribute.
            </summary>
            <value>The business object validation attribute.</value>
        </member>
        <member name="P:CommonTools.Components.BusinessTier.ObjectPropertyInfo.BusinessObjectStringSecurityAttribute">
            <summary>
            Gets or sets the business object string security attribute.
            </summary>
            <value>The business object string security attribute.</value>
        </member>
        <member name="P:CommonTools.Components.BusinessTier.ObjectPropertyInfo.HasBusinessObjectPropertyAttribute">
            <summary>
            Gets or sets a value indicating whether this instance has business object property attribute.
            </summary>
            <value>
            	<c>true</c> if this instance has business object property attribute; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:CommonTools.Components.BusinessTier.ObjectPropertyInfo.HasBusinessObjectValidationAttribute">
            <summary>
            Gets or sets a value indicating whether this instance has business object validation attribute.
            </summary>
            <value>
            	<c>true</c> if this instance has business object validation attribute; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:CommonTools.Components.BusinessTier.ObjectPropertyInfo.HasBusinessObjectStringSecurityAttribute">
            <summary>
            Gets or sets a value indicating whether this instance has business object string security attribute.
            </summary>
            <value>
            	<c>true</c> if this instance has business object string security attribute; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:CommonTools.Components.BusinessTier.ObjectPropertyInfo.PropertyType">
            <summary>
            Gets or sets the type of the property.
            </summary>
            <value>The type of the property.</value>
        </member>
        <member name="T:CommonTools.Components.BusinessTier.ObjectPropertyInfo.PropertyTypeDefinition">
            <summary>
            
            </summary>
        </member>
        <member name="F:CommonTools.Components.BusinessTier.ObjectPropertyInfo.PropertyTypeDefinition.String">
            <summary>
            
            </summary>
        </member>
        <member name="F:CommonTools.Components.BusinessTier.ObjectPropertyInfo.PropertyTypeDefinition.Int64">
            <summary>
            
            </summary>
        </member>
        <member name="F:CommonTools.Components.BusinessTier.ObjectPropertyInfo.PropertyTypeDefinition.Int32">
            <summary>
            
            </summary>
        </member>
        <member name="F:CommonTools.Components.BusinessTier.ObjectPropertyInfo.PropertyTypeDefinition.Int16">
            <summary>
            
            </summary>
        </member>
        <member name="F:CommonTools.Components.BusinessTier.ObjectPropertyInfo.PropertyTypeDefinition.Decimal">
            <summary>
            
            </summary>
        </member>
        <member name="F:CommonTools.Components.BusinessTier.ObjectPropertyInfo.PropertyTypeDefinition.Double">
            <summary>
            
            </summary>
        </member>
        <member name="T:CommonTools.Components.BusinessTier.BusinessObjectValidationAttribute">
            <summary>
            This attribute can be used for BaseBusinessObject properties in order to enforce validation constraints.
            </summary>
        </member>
        <member name="M:CommonTools.Components.BusinessTier.BusinessObjectValidationAttribute.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:CommonTools.Components.BusinessTier.BusinessObjectValidationAttribute"/> class.
            </summary>
        </member>
        <member name="P:CommonTools.Components.BusinessTier.BusinessObjectValidationAttribute.MinimumValue">
            <summary>
            Gets or sets the minimum value of the validation range.
            </summary>
            <value>The minimum value.</value>
        </member>
        <member name="P:CommonTools.Components.BusinessTier.BusinessObjectValidationAttribute.MaximumValue">
            <summary>
            Gets or sets the maximum value of the validation range.
            </summary>
            <value>The maximum value.</value>
        </member>
        <member name="P:CommonTools.Components.BusinessTier.BusinessObjectValidationAttribute.MinLength">
            <summary>
            Gets or sets the minimum amount of characters a string must have.
            </summary>
            <value>The length of the min.</value>
        </member>
        <member name="P:CommonTools.Components.BusinessTier.BusinessObjectValidationAttribute.MaxLength">
            <summary>
            Gets or sets the maximum amount of characters a string is allowed have.
            </summary>
            <value>The length of the max.</value>
        </member>
        <member name="P:CommonTools.Components.BusinessTier.BusinessObjectValidationAttribute.Regex">
            <summary>
            Gets or sets the regular expression that determines the pattern used to validate a field.
            </summary>
            <value>The regex.</value>
        </member>
        <member name="P:CommonTools.Components.BusinessTier.BusinessObjectValidationAttribute.IsRequired">
            <summary>
            Gets or sets a value indicating this property's input field is a required form field.
            </summary>
            <value>
            	<c>true</c> if this instance this property's input field is required; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:CommonTools.Components.BusinessTier.BusinessObjectValidationAttribute.IsRequiredMessage">
            <summary>
            Gets or sets the text for the error message displayed in a CommonTools.BusinessObjects.BaseBusinessObjectValidationControl
            BaseBusinessObjectValidationControl when required field validation fails.
            </summary>
            <value>The is required message.</value>
        </member>
        <member name="P:CommonTools.Components.BusinessTier.BusinessObjectValidationAttribute.IsRequiredMessageResourceKey">
            <summary>
            Gets or sets the text for the error message displayed in a CommonTools.BusinessObjects.BaseBusinessObjectValidationControl
            BaseBusinessObjectValidationControl when required field validation fails.
            </summary>
            <value>The is required message.</value>
        </member>
        <member name="P:CommonTools.Components.BusinessTier.BusinessObjectValidationAttribute.RegexMessage">
            <summary>
            Gets or sets the text for the error message displayed in a CommonTools.BusinessObjects.BaseBusinessObjectValidationControl
            BaseBusinessObjectValidationControl when regular expression validation fails.
            </summary>
            <value>The regex message.</value>
        </member>
        <member name="P:CommonTools.Components.BusinessTier.BusinessObjectValidationAttribute.RegexMessageResourceKey">
            <summary>
            Gets or sets the text for the error message displayed in a CommonTools.BusinessObjects.BaseBusinessObjectValidationControl
            BaseBusinessObjectValidationControl when regular expression validation fails.
            </summary>
            <value>The regex message.</value>
        </member>
        <member name="P:CommonTools.Components.BusinessTier.BusinessObjectValidationAttribute.OutOfRangeErrorMessage">
            <summary>
            Gets or sets the text for the error message displayed in a CommonTools.BusinessObjects.BaseBusinessObjectValidationControl
            BaseBusinessObjectValidationControl out of bounce validation fails. This can be either a MinimumValue/MaximumValue or MinLength/MaxLength
            validation failure.
            </summary>
            <value>The out of range error message.</value>
        </member>
        <member name="P:CommonTools.Components.BusinessTier.BusinessObjectValidationAttribute.OutOfRangeErrorMessageResourceKey">
            <summary>
            Gets or sets the text for the error message displayed in a CommonTools.BusinessObjects.BaseBusinessObjectValidationControl
            BaseBusinessObjectValidationControl out of bounce validation fails. This can be either a MinimumValue/MaximumValue or MinLength/MaxLength
            validation failure.
            </summary>
            <value>The out of range error message.</value>
        </member>
        <member name="P:CommonTools.Components.BusinessTier.BusinessObjectValidationAttribute.ValidatorInstance">
            <summary>
            Gets the validator attribute instance.
            </summary>
            <value></value>
            <returns>The current <see cref="T:System.Configuration.ConfigurationValidatorBase"></see>.</returns>
        </member>
    </members>
</doc>
